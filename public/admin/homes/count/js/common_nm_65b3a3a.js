;/*!/node_modules/html5shiv/dist/html5shiv.js*/
define('common:node_modules/html5shiv/dist/html5shiv', function(require, exports, module) {

  /**
  * @preserve HTML5 Shiv 3.7.3 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
  */
  ;(function(window, document) {
  /*jshint evil:true */
    /** version */
    var version = '3.7.3-pre';
  
    /** Preset options */
    var options = window.html5 || {};
  
    /** Used to skip problem elements */
    var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;
  
    /** Not all elements can be cloned in IE **/
    var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;
  
    /** Detect whether the browser supports default html5 styles */
    var supportsHtml5Styles;
  
    /** Name of the expando, to work with multiple documents or to re-shiv one document */
    var expando = '_html5shiv';
  
    /** The id for the the documents expando */
    var expanID = 0;
  
    /** Cached data for each document */
    var expandoData = {};
  
    /** Detect whether the browser supports unknown elements */
    var supportsUnknownElements;
  
    (function() {
      try {
          var a = document.createElement('a');
          a.innerHTML = '<xyz></xyz>';
          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
          supportsHtml5Styles = ('hidden' in a);
  
          supportsUnknownElements = a.childNodes.length == 1 || (function() {
            // assign a false positive if unable to shiv
            (document.createElement)('a');
            var frag = document.createDocumentFragment();
            return (
              typeof frag.cloneNode == 'undefined' ||
              typeof frag.createDocumentFragment == 'undefined' ||
              typeof frag.createElement == 'undefined'
            );
          }());
      } catch(e) {
        // assign a false positive if detection fails => unable to shiv
        supportsHtml5Styles = true;
        supportsUnknownElements = true;
      }
  
    }());
  
    /*--------------------------------------------------------------------------*/
  
    /**
     * Creates a style sheet with the given CSS text and adds it to the document.
     * @private
     * @param {Document} ownerDocument The document.
     * @param {String} cssText The CSS text.
     * @returns {StyleSheet} The style element.
     */
    function addStyleSheet(ownerDocument, cssText) {
      var p = ownerDocument.createElement('p'),
          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;
  
      p.innerHTML = 'x<style>' + cssText + '</style>';
      return parent.insertBefore(p.lastChild, parent.firstChild);
    }
  
    /**
     * Returns the value of `html5.elements` as an array.
     * @private
     * @returns {Array} An array of shived element node names.
     */
    function getElements() {
      var elements = html5.elements;
      return typeof elements == 'string' ? elements.split(' ') : elements;
    }
  
    /**
     * Extends the built-in list of html5 elements
     * @memberOf html5
     * @param {String|Array} newElements whitespace separated list or array of new element names to shiv
     * @param {Document} ownerDocument The context document.
     */
    function addElements(newElements, ownerDocument) {
      var elements = html5.elements;
      if(typeof elements != 'string'){
        elements = elements.join(' ');
      }
      if(typeof newElements != 'string'){
        newElements = newElements.join(' ');
      }
      html5.elements = elements +' '+ newElements;
      shivDocument(ownerDocument);
    }
  
     /**
     * Returns the data associated to the given document
     * @private
     * @param {Document} ownerDocument The document.
     * @returns {Object} An object of data.
     */
    function getExpandoData(ownerDocument) {
      var data = expandoData[ownerDocument[expando]];
      if (!data) {
          data = {};
          expanID++;
          ownerDocument[expando] = expanID;
          expandoData[expanID] = data;
      }
      return data;
    }
  
    /**
     * returns a shived element for the given nodeName and document
     * @memberOf html5
     * @param {String} nodeName name of the element
     * @param {Document} ownerDocument The context document.
     * @returns {Object} The shived element.
     */
    function createElement(nodeName, ownerDocument, data){
      if (!ownerDocument) {
          ownerDocument = document;
      }
      if(supportsUnknownElements){
          return ownerDocument.createElement(nodeName);
      }
      if (!data) {
          data = getExpandoData(ownerDocument);
      }
      var node;
  
      if (data.cache[nodeName]) {
          node = data.cache[nodeName].cloneNode();
      } else if (saveClones.test(nodeName)) {
          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
      } else {
          node = data.createElem(nodeName);
      }
  
      // Avoid adding some elements to fragments in IE < 9 because
      // * Attributes like `name` or `type` cannot be set/changed once an element
      //   is inserted into a document/fragment
      // * Link elements with `src` attributes that are inaccessible, as with
      //   a 403 response, will cause the tab/window to crash
      // * Script elements appended to fragments will execute when their `src`
      //   or `text` property is set
      return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;
    }
  
    /**
     * returns a shived DocumentFragment for the given document
     * @memberOf html5
     * @param {Document} ownerDocument The context document.
     * @returns {Object} The shived DocumentFragment.
     */
    function createDocumentFragment(ownerDocument, data){
      if (!ownerDocument) {
          ownerDocument = document;
      }
      if(supportsUnknownElements){
          return ownerDocument.createDocumentFragment();
      }
      data = data || getExpandoData(ownerDocument);
      var clone = data.frag.cloneNode(),
          i = 0,
          elems = getElements(),
          l = elems.length;
      for(;i<l;i++){
          clone.createElement(elems[i]);
      }
      return clone;
    }
  
    /**
     * Shivs the `createElement` and `createDocumentFragment` methods of the document.
     * @private
     * @param {Document|DocumentFragment} ownerDocument The document.
     * @param {Object} data of the document.
     */
    function shivMethods(ownerDocument, data) {
      if (!data.cache) {
          data.cache = {};
          data.createElem = ownerDocument.createElement;
          data.createFrag = ownerDocument.createDocumentFragment;
          data.frag = data.createFrag();
      }
  
  
      ownerDocument.createElement = function(nodeName) {
        //abort shiv
        if (!html5.shivMethods) {
            return data.createElem(nodeName);
        }
        return createElement(nodeName, ownerDocument, data);
      };
  
      ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
        'var n=f.cloneNode(),c=n.createElement;' +
        'h.shivMethods&&(' +
          // unroll the `createElement` calls
          getElements().join().replace(/[\w\-:]+/g, function(nodeName) {
            data.createElem(nodeName);
            data.frag.createElement(nodeName);
            return 'c("' + nodeName + '")';
          }) +
        ');return n}'
      )(html5, data.frag);
    }
  
    /*--------------------------------------------------------------------------*/
  
    /**
     * Shivs the given document.
     * @memberOf html5
     * @param {Document} ownerDocument The document to shiv.
     * @returns {Document} The shived document.
     */
    function shivDocument(ownerDocument) {
      if (!ownerDocument) {
          ownerDocument = document;
      }
      var data = getExpandoData(ownerDocument);
  
      if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
        data.hasCSS = !!addStyleSheet(ownerDocument,
          // corrects block display not defined in IE6/7/8/9
          'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +
          // adds styling not present in IE6/7/8/9
          'mark{background:#FF0;color:#000}' +
          // hides non-rendered elements
          'template{display:none}'
        );
      }
      if (!supportsUnknownElements) {
        shivMethods(ownerDocument, data);
      }
      return ownerDocument;
    }
  
    /*--------------------------------------------------------------------------*/
  
    /**
     * The `html5` object is exposed so that more elements can be shived and
     * existing shiving can be detected on iframes.
     * @type Object
     * @example
     *
     * // options can be changed before the script is included
     * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
     */
    var html5 = {
  
      /**
       * An array or space separated string of node names of the elements to shiv.
       * @memberOf html5
       * @type Array|String
       */
      'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',
  
      /**
       * current version of html5shiv
       */
      'version': version,
  
      /**
       * A flag to indicate that the HTML5 style sheet should be inserted.
       * @memberOf html5
       * @type Boolean
       */
      'shivCSS': (options.shivCSS !== false),
  
      /**
       * Is equal to true if a browser supports creating unknown/HTML5 elements
       * @memberOf html5
       * @type boolean
       */
      'supportsUnknownElements': supportsUnknownElements,
  
      /**
       * A flag to indicate that the document's `createElement` and `createDocumentFragment`
       * methods should be overwritten.
       * @memberOf html5
       * @type Boolean
       */
      'shivMethods': (options.shivMethods !== false),
  
      /**
       * A string to describe the type of `html5` object ("default" or "default print").
       * @memberOf html5
       * @type String
       */
      'type': 'default',
  
      // shivs the document according to the specified `html5` object options
      'shivDocument': shivDocument,
  
      //creates a shived element
      createElement: createElement,
  
      //creates a shived documentFragment
      createDocumentFragment: createDocumentFragment,
  
      //extends list of elements
      addElements: addElements
    };
  
    /*--------------------------------------------------------------------------*/
  
    // expose html5
    window.html5 = html5;
  
    // shiv the document
    shivDocument(document);
  
    if(typeof module == 'object' && module.exports){
      module.exports = html5;
    }
  
  }(typeof window !== "undefined" ? window : this, document));
  

});

;/*!/node_modules/es5-shim/es5-shim.js*/
define('common:node_modules/es5-shim/es5-shim', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  /*!
   * https://github.com/es-shims/es5-shim
   * @license es5-shim Copyright 2009-2015 by contributors, MIT License
   * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
   */
  
  // vim: ts=4 sts=4 sw=4 expandtab
  
  // Add semicolon to prevent IIFE from being passed as argument to concatenated code.
  ;
  
  // UMD (Universal Module Definition)
  // see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
  (function (root, factory) {
      'use strict';
  
      /* global define, exports, module */
      if (typeof define === 'function' && define.amd) {
          // AMD. Register as an anonymous module.
          define(factory);
      } else if (typeof exports === 'object') {
          // Node. Does not work with strict CommonJS, but
          // only CommonJS-like enviroments that support module.exports,
          // like Node.
          module.exports = factory();
      } else {
          // Browser globals (root is window)
          root.returnExports = factory();
      }
  }(this, function () {
      /**
       * Brings an environment as close to ECMAScript 5 compliance
       * as is possible with the facilities of erstwhile engines.
       *
       * Annotated ES5: http://es5.github.com/ (specific links below)
       * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
       * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
       */
  
      // Shortcut to an often accessed properties, in order to avoid multiple
      // dereference that costs universally. This also holds a reference to known-good
      // functions.
      var $Array = Array;
      var ArrayPrototype = $Array.prototype;
      var $Object = Object;
      var ObjectPrototype = $Object.prototype;
      var $Function = Function;
      var FunctionPrototype = $Function.prototype;
      var $String = String;
      var StringPrototype = $String.prototype;
      var $Number = Number;
      var NumberPrototype = $Number.prototype;
      var array_slice = ArrayPrototype.slice;
      var array_splice = ArrayPrototype.splice;
      var array_push = ArrayPrototype.push;
      var array_unshift = ArrayPrototype.unshift;
      var array_concat = ArrayPrototype.concat;
      var array_join = ArrayPrototype.join;
      var call = FunctionPrototype.call;
      var apply = FunctionPrototype.apply;
      var max = Math.max;
      var min = Math.min;
  
      // Having a toString local variable name breaks in Opera so use to_string.
      var to_string = ObjectPrototype.toString;
  
      /* global Symbol */
      /* eslint-disable one-var-declaration-per-line, no-redeclare, max-statements-per-line */
      var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
      var isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, constructorRegex = /^\s*class /, isES6ClassFn = function isES6ClassFn(value) { try { var fnStr = fnToStr.call(value); var singleStripped = fnStr.replace(/\/\/.*\n/g, ''); var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, ''); var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' '); return constructorRegex.test(spaceStripped); } catch (e) { return false; /* not a function */ } }, tryFunctionObject = function tryFunctionObject(value) { try { if (isES6ClassFn(value)) { return false; } fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]', isCallable = function isCallable(value) { if (!value) { return false; } if (typeof value !== 'function' && typeof value !== 'object') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } if (isES6ClassFn(value)) { return false; } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };
  
      var isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };
      var isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };
      /* eslint-enable one-var-declaration-per-line, no-redeclare, max-statements-per-line */
  
      /* inlined from http://npmjs.com/define-properties */
      var supportsDescriptors = $Object.defineProperty && (function () {
          try {
              var obj = {};
              $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
              for (var _ in obj) { // jscs:ignore disallowUnusedVariables
                  return false;
              }
              return obj.x === obj;
          } catch (e) { /* this is ES3 */
              return false;
          }
      }());
      var defineProperties = (function (has) {
          // Define configurable, writable, and non-enumerable props
          // if they don't exist.
          var defineProperty;
          if (supportsDescriptors) {
              defineProperty = function (object, name, method, forceAssign) {
                  if (!forceAssign && (name in object)) {
                      return;
                  }
                  $Object.defineProperty(object, name, {
                      configurable: true,
                      enumerable: false,
                      writable: true,
                      value: method
                  });
              };
          } else {
              defineProperty = function (object, name, method, forceAssign) {
                  if (!forceAssign && (name in object)) {
                      return;
                  }
                  object[name] = method;
              };
          }
          return function defineProperties(object, map, forceAssign) {
              for (var name in map) {
                  if (has.call(map, name)) {
                      defineProperty(object, name, map[name], forceAssign);
                  }
              }
          };
      }(ObjectPrototype.hasOwnProperty));
  
      //
      // Util
      // ======
      //
  
      /* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */
      var isPrimitive = function isPrimitive(input) {
          var type = typeof input;
          return input === null || (type !== 'object' && type !== 'function');
      };
  
      var isActualNaN = $Number.isNaN || function isActualNaN(x) {
          return x !== x;
      };
  
      var ES = {
          // ES5 9.4
          // http://es5.github.com/#x9.4
          // http://jsperf.com/to-integer
          /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */
          ToInteger: function ToInteger(num) {
              var n = +num;
              if (isActualNaN(n)) {
                  n = 0;
              } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
                  n = (n > 0 || -1) * Math.floor(Math.abs(n));
              }
              return n;
          },
  
          /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */
          ToPrimitive: function ToPrimitive(input) {
              var val, valueOf, toStr;
              if (isPrimitive(input)) {
                  return input;
              }
              valueOf = input.valueOf;
              if (isCallable(valueOf)) {
                  val = valueOf.call(input);
                  if (isPrimitive(val)) {
                      return val;
                  }
              }
              toStr = input.toString;
              if (isCallable(toStr)) {
                  val = toStr.call(input);
                  if (isPrimitive(val)) {
                      return val;
                  }
              }
              throw new TypeError();
          },
  
          // ES5 9.9
          // http://es5.github.com/#x9.9
          /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */
          ToObject: function (o) {
              if (o == null) { // this matches both null and undefined
                  throw new TypeError("can't convert " + o + ' to object');
              }
              return $Object(o);
          },
  
          /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */
          ToUint32: function ToUint32(x) {
              return x >>> 0;
          }
      };
  
      //
      // Function
      // ========
      //
  
      // ES-5 15.3.4.5
      // http://es5.github.com/#x15.3.4.5
  
      var Empty = function Empty() {};
  
      defineProperties(FunctionPrototype, {
          bind: function bind(that) { // .length is 1
              // 1. Let Target be the this value.
              var target = this;
              // 2. If IsCallable(Target) is false, throw a TypeError exception.
              if (!isCallable(target)) {
                  throw new TypeError('Function.prototype.bind called on incompatible ' + target);
              }
              // 3. Let A be a new (possibly empty) internal list of all of the
              //   argument values provided after thisArg (arg1, arg2 etc), in order.
              // XXX slicedArgs will stand in for "A" if used
              var args = array_slice.call(arguments, 1); // for normal call
              // 4. Let F be a new native ECMAScript object.
              // 11. Set the [[Prototype]] internal property of F to the standard
              //   built-in Function prototype object as specified in 15.3.3.1.
              // 12. Set the [[Call]] internal property of F as described in
              //   15.3.4.5.1.
              // 13. Set the [[Construct]] internal property of F as described in
              //   15.3.4.5.2.
              // 14. Set the [[HasInstance]] internal property of F as described in
              //   15.3.4.5.3.
              var bound;
              var binder = function () {
  
                  if (this instanceof bound) {
                      // 15.3.4.5.2 [[Construct]]
                      // When the [[Construct]] internal method of a function object,
                      // F that was created using the bind function is called with a
                      // list of arguments ExtraArgs, the following steps are taken:
                      // 1. Let target be the value of F's [[TargetFunction]]
                      //   internal property.
                      // 2. If target has no [[Construct]] internal method, a
                      //   TypeError exception is thrown.
                      // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                      //   property.
                      // 4. Let args be a new list containing the same values as the
                      //   list boundArgs in the same order followed by the same
                      //   values as the list ExtraArgs in the same order.
                      // 5. Return the result of calling the [[Construct]] internal
                      //   method of target providing args as the arguments.
  
                      var result = apply.call(
                          target,
                          this,
                          array_concat.call(args, array_slice.call(arguments))
                      );
                      if ($Object(result) === result) {
                          return result;
                      }
                      return this;
  
                  } else {
                      // 15.3.4.5.1 [[Call]]
                      // When the [[Call]] internal method of a function object, F,
                      // which was created using the bind function is called with a
                      // this value and a list of arguments ExtraArgs, the following
                      // steps are taken:
                      // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                      //   property.
                      // 2. Let boundThis be the value of F's [[BoundThis]] internal
                      //   property.
                      // 3. Let target be the value of F's [[TargetFunction]] internal
                      //   property.
                      // 4. Let args be a new list containing the same values as the
                      //   list boundArgs in the same order followed by the same
                      //   values as the list ExtraArgs in the same order.
                      // 5. Return the result of calling the [[Call]] internal method
                      //   of target providing boundThis as the this value and
                      //   providing args as the arguments.
  
                      // equiv: target.call(this, ...boundArgs, ...args)
                      return apply.call(
                          target,
                          that,
                          array_concat.call(args, array_slice.call(arguments))
                      );
  
                  }
  
              };
  
              // 15. If the [[Class]] internal property of Target is "Function", then
              //     a. Let L be the length property of Target minus the length of A.
              //     b. Set the length own property of F to either 0 or L, whichever is
              //       larger.
              // 16. Else set the length own property of F to 0.
  
              var boundLength = max(0, target.length - args.length);
  
              // 17. Set the attributes of the length own property of F to the values
              //   specified in 15.3.5.1.
              var boundArgs = [];
              for (var i = 0; i < boundLength; i++) {
                  array_push.call(boundArgs, '$' + i);
              }
  
              // XXX Build a dynamic function with desired amount of arguments is the only
              // way to set the length property of a function.
              // In environments where Content Security Policies enabled (Chrome extensions,
              // for ex.) all use of eval or Function costructor throws an exception.
              // However in all of these environments Function.prototype.bind exists
              // and so this code will never be executed.
              bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);
  
              if (target.prototype) {
                  Empty.prototype = target.prototype;
                  bound.prototype = new Empty();
                  // Clean up dangling references.
                  Empty.prototype = null;
              }
  
              // TODO
              // 18. Set the [[Extensible]] internal property of F to true.
  
              // TODO
              // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
              // 20. Call the [[DefineOwnProperty]] internal method of F with
              //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
              //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
              //   false.
              // 21. Call the [[DefineOwnProperty]] internal method of F with
              //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
              //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
              //   and false.
  
              // TODO
              // NOTE Function objects created using Function.prototype.bind do not
              // have a prototype property or the [[Code]], [[FormalParameters]], and
              // [[Scope]] internal properties.
              // XXX can't delete prototype in pure-js.
  
              // 22. Return F.
              return bound;
          }
      });
  
      // _Please note: Shortcuts are defined after `Function.prototype.bind` as we
      // use it in defining shortcuts.
      var owns = call.bind(ObjectPrototype.hasOwnProperty);
      var toStr = call.bind(ObjectPrototype.toString);
      var arraySlice = call.bind(array_slice);
      var arraySliceApply = apply.bind(array_slice);
      var strSlice = call.bind(StringPrototype.slice);
      var strSplit = call.bind(StringPrototype.split);
      var strIndexOf = call.bind(StringPrototype.indexOf);
      var pushCall = call.bind(array_push);
      var isEnum = call.bind(ObjectPrototype.propertyIsEnumerable);
      var arraySort = call.bind(ArrayPrototype.sort);
  
      //
      // Array
      // =====
      //
  
      var isArray = $Array.isArray || function isArray(obj) {
          return toStr(obj) === '[object Array]';
      };
  
      // ES5 15.4.4.12
      // http://es5.github.com/#x15.4.4.13
      // Return len+argCount.
      // [bugfix, ielt8]
      // IE < 8 bug: [].unshift(0) === undefined but should be "1"
      var hasUnshiftReturnValueBug = [].unshift(0) !== 1;
      defineProperties(ArrayPrototype, {
          unshift: function () {
              array_unshift.apply(this, arguments);
              return this.length;
          }
      }, hasUnshiftReturnValueBug);
  
      // ES5 15.4.3.2
      // http://es5.github.com/#x15.4.3.2
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
      defineProperties($Array, { isArray: isArray });
  
      // The IsCallable() check in the Array functions
      // has been replaced with a strict check on the
      // internal class of the object to trap cases where
      // the provided function was actually a regular
      // expression literal, which in V8 and
      // JavaScriptCore is a typeof "function".  Only in
      // V8 are regular expression literals permitted as
      // reduce parameters, so it is desirable in the
      // general case for the shim to match the more
      // strict and common behavior of rejecting regular
      // expressions.
  
      // ES5 15.4.4.18
      // http://es5.github.com/#x15.4.4.18
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach
  
      // Check failure of by-index access of string characters (IE < 9)
      // and failure of `0 in boxedString` (Rhino)
      var boxedString = $Object('a');
      var splitString = boxedString[0] !== 'a' || !(0 in boxedString);
  
      var properlyBoxesContext = function properlyBoxed(method) {
          // Check node 0.6.21 bug where third parameter is not boxed
          var properlyBoxesNonStrict = true;
          var properlyBoxesStrict = true;
          var threwException = false;
          if (method) {
              try {
                  method.call('foo', function (_, __, context) {
                      if (typeof context !== 'object') {
                          properlyBoxesNonStrict = false;
                      }
                  });
  
                  method.call([1], function () {
                      'use strict';
  
                      properlyBoxesStrict = typeof this === 'string';
                  }, 'x');
              } catch (e) {
                  threwException = true;
              }
          }
          return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
      };
  
      defineProperties(ArrayPrototype, {
          forEach: function forEach(callbackfn/*, thisArg*/) {
              var object = ES.ToObject(this);
              var self = splitString && isString(this) ? strSplit(this, '') : object;
              var i = -1;
              var length = ES.ToUint32(self.length);
              var T;
              if (arguments.length > 1) {
                  T = arguments[1];
              }
  
              // If no callback function or if callback is not a callable function
              if (!isCallable(callbackfn)) {
                  throw new TypeError('Array.prototype.forEach callback must be a function');
              }
  
              while (++i < length) {
                  if (i in self) {
                      // Invoke the callback function with call, passing arguments:
                      // context, property value, property key, thisArg object
                      if (typeof T === 'undefined') {
                          callbackfn(self[i], i, object);
                      } else {
                          callbackfn.call(T, self[i], i, object);
                      }
                  }
              }
          }
      }, !properlyBoxesContext(ArrayPrototype.forEach));
  
      // ES5 15.4.4.19
      // http://es5.github.com/#x15.4.4.19
      // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
      defineProperties(ArrayPrototype, {
          map: function map(callbackfn/*, thisArg*/) {
              var object = ES.ToObject(this);
              var self = splitString && isString(this) ? strSplit(this, '') : object;
              var length = ES.ToUint32(self.length);
              var result = $Array(length);
              var T;
              if (arguments.length > 1) {
                  T = arguments[1];
              }
  
              // If no callback function or if callback is not a callable function
              if (!isCallable(callbackfn)) {
                  throw new TypeError('Array.prototype.map callback must be a function');
              }
  
              for (var i = 0; i < length; i++) {
                  if (i in self) {
                      if (typeof T === 'undefined') {
                          result[i] = callbackfn(self[i], i, object);
                      } else {
                          result[i] = callbackfn.call(T, self[i], i, object);
                      }
                  }
              }
              return result;
          }
      }, !properlyBoxesContext(ArrayPrototype.map));
  
      // ES5 15.4.4.20
      // http://es5.github.com/#x15.4.4.20
      // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
      defineProperties(ArrayPrototype, {
          filter: function filter(callbackfn/*, thisArg*/) {
              var object = ES.ToObject(this);
              var self = splitString && isString(this) ? strSplit(this, '') : object;
              var length = ES.ToUint32(self.length);
              var result = [];
              var value;
              var T;
              if (arguments.length > 1) {
                  T = arguments[1];
              }
  
              // If no callback function or if callback is not a callable function
              if (!isCallable(callbackfn)) {
                  throw new TypeError('Array.prototype.filter callback must be a function');
              }
  
              for (var i = 0; i < length; i++) {
                  if (i in self) {
                      value = self[i];
                      if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {
                          pushCall(result, value);
                      }
                  }
              }
              return result;
          }
      }, !properlyBoxesContext(ArrayPrototype.filter));
  
      // ES5 15.4.4.16
      // http://es5.github.com/#x15.4.4.16
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
      defineProperties(ArrayPrototype, {
          every: function every(callbackfn/*, thisArg*/) {
              var object = ES.ToObject(this);
              var self = splitString && isString(this) ? strSplit(this, '') : object;
              var length = ES.ToUint32(self.length);
              var T;
              if (arguments.length > 1) {
                  T = arguments[1];
              }
  
              // If no callback function or if callback is not a callable function
              if (!isCallable(callbackfn)) {
                  throw new TypeError('Array.prototype.every callback must be a function');
              }
  
              for (var i = 0; i < length; i++) {
                  if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                      return false;
                  }
              }
              return true;
          }
      }, !properlyBoxesContext(ArrayPrototype.every));
  
      // ES5 15.4.4.17
      // http://es5.github.com/#x15.4.4.17
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
      defineProperties(ArrayPrototype, {
          some: function some(callbackfn/*, thisArg */) {
              var object = ES.ToObject(this);
              var self = splitString && isString(this) ? strSplit(this, '') : object;
              var length = ES.ToUint32(self.length);
              var T;
              if (arguments.length > 1) {
                  T = arguments[1];
              }
  
              // If no callback function or if callback is not a callable function
              if (!isCallable(callbackfn)) {
                  throw new TypeError('Array.prototype.some callback must be a function');
              }
  
              for (var i = 0; i < length; i++) {
                  if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                      return true;
                  }
              }
              return false;
          }
      }, !properlyBoxesContext(ArrayPrototype.some));
  
      // ES5 15.4.4.21
      // http://es5.github.com/#x15.4.4.21
      // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
      var reduceCoercesToObject = false;
      if (ArrayPrototype.reduce) {
          reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) {
              return list;
          }) === 'object';
      }
      defineProperties(ArrayPrototype, {
          reduce: function reduce(callbackfn/*, initialValue*/) {
              var object = ES.ToObject(this);
              var self = splitString && isString(this) ? strSplit(this, '') : object;
              var length = ES.ToUint32(self.length);
  
              // If no callback function or if callback is not a callable function
              if (!isCallable(callbackfn)) {
                  throw new TypeError('Array.prototype.reduce callback must be a function');
              }
  
              // no value to return if no initial value and an empty array
              if (length === 0 && arguments.length === 1) {
                  throw new TypeError('reduce of empty array with no initial value');
              }
  
              var i = 0;
              var result;
              if (arguments.length >= 2) {
                  result = arguments[1];
              } else {
                  do {
                      if (i in self) {
                          result = self[i++];
                          break;
                      }
  
                      // if array contains no values, no initial value to return
                      if (++i >= length) {
                          throw new TypeError('reduce of empty array with no initial value');
                      }
                  } while (true);
              }
  
              for (; i < length; i++) {
                  if (i in self) {
                      result = callbackfn(result, self[i], i, object);
                  }
              }
  
              return result;
          }
      }, !reduceCoercesToObject);
  
      // ES5 15.4.4.22
      // http://es5.github.com/#x15.4.4.22
      // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
      var reduceRightCoercesToObject = false;
      if (ArrayPrototype.reduceRight) {
          reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) {
              return list;
          }) === 'object';
      }
      defineProperties(ArrayPrototype, {
          reduceRight: function reduceRight(callbackfn/*, initial*/) {
              var object = ES.ToObject(this);
              var self = splitString && isString(this) ? strSplit(this, '') : object;
              var length = ES.ToUint32(self.length);
  
              // If no callback function or if callback is not a callable function
              if (!isCallable(callbackfn)) {
                  throw new TypeError('Array.prototype.reduceRight callback must be a function');
              }
  
              // no value to return if no initial value, empty array
              if (length === 0 && arguments.length === 1) {
                  throw new TypeError('reduceRight of empty array with no initial value');
              }
  
              var result;
              var i = length - 1;
              if (arguments.length >= 2) {
                  result = arguments[1];
              } else {
                  do {
                      if (i in self) {
                          result = self[i--];
                          break;
                      }
  
                      // if array contains no values, no initial value to return
                      if (--i < 0) {
                          throw new TypeError('reduceRight of empty array with no initial value');
                      }
                  } while (true);
              }
  
              if (i < 0) {
                  return result;
              }
  
              do {
                  if (i in self) {
                      result = callbackfn(result, self[i], i, object);
                  }
              } while (i--);
  
              return result;
          }
      }, !reduceRightCoercesToObject);
  
      // ES5 15.4.4.14
      // http://es5.github.com/#x15.4.4.14
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
      var hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
      defineProperties(ArrayPrototype, {
          indexOf: function indexOf(searchElement/*, fromIndex */) {
              var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
              var length = ES.ToUint32(self.length);
  
              if (length === 0) {
                  return -1;
              }
  
              var i = 0;
              if (arguments.length > 1) {
                  i = ES.ToInteger(arguments[1]);
              }
  
              // handle negative indices
              i = i >= 0 ? i : max(0, length + i);
              for (; i < length; i++) {
                  if (i in self && self[i] === searchElement) {
                      return i;
                  }
              }
              return -1;
          }
      }, hasFirefox2IndexOfBug);
  
      // ES5 15.4.4.15
      // http://es5.github.com/#x15.4.4.15
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
      var hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;
      defineProperties(ArrayPrototype, {
          lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {
              var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
              var length = ES.ToUint32(self.length);
  
              if (length === 0) {
                  return -1;
              }
              var i = length - 1;
              if (arguments.length > 1) {
                  i = min(i, ES.ToInteger(arguments[1]));
              }
              // handle negative indices
              i = i >= 0 ? i : length - Math.abs(i);
              for (; i >= 0; i--) {
                  if (i in self && searchElement === self[i]) {
                      return i;
                  }
              }
              return -1;
          }
      }, hasFirefox2LastIndexOfBug);
  
      // ES5 15.4.4.12
      // http://es5.github.com/#x15.4.4.12
      var spliceNoopReturnsEmptyArray = (function () {
          var a = [1, 2];
          var result = a.splice();
          return a.length === 2 && isArray(result) && result.length === 0;
      }());
      defineProperties(ArrayPrototype, {
          // Safari 5.0 bug where .splice() returns undefined
          splice: function splice(start, deleteCount) {
              if (arguments.length === 0) {
                  return [];
              } else {
                  return array_splice.apply(this, arguments);
              }
          }
      }, !spliceNoopReturnsEmptyArray);
  
      var spliceWorksWithEmptyObject = (function () {
          var obj = {};
          ArrayPrototype.splice.call(obj, 0, 0, 1);
          return obj.length === 1;
      }());
      defineProperties(ArrayPrototype, {
          splice: function splice(start, deleteCount) {
              if (arguments.length === 0) {
                  return [];
              }
              var args = arguments;
              this.length = max(ES.ToInteger(this.length), 0);
              if (arguments.length > 0 && typeof deleteCount !== 'number') {
                  args = arraySlice(arguments);
                  if (args.length < 2) {
                      pushCall(args, this.length - start);
                  } else {
                      args[1] = ES.ToInteger(deleteCount);
                  }
              }
              return array_splice.apply(this, args);
          }
      }, !spliceWorksWithEmptyObject);
      var spliceWorksWithLargeSparseArrays = (function () {
          // Per https://github.com/es-shims/es5-shim/issues/295
          // Safari 7/8 breaks with sparse arrays of size 1e5 or greater
          var arr = new $Array(1e5);
          // note: the index MUST be 8 or larger or the test will false pass
          arr[8] = 'x';
          arr.splice(1, 1);
          // note: this test must be defined *after* the indexOf shim
          // per https://github.com/es-shims/es5-shim/issues/313
          return arr.indexOf('x') === 7;
      }());
      var spliceWorksWithSmallSparseArrays = (function () {
          // Per https://github.com/es-shims/es5-shim/issues/295
          // Opera 12.15 breaks on this, no idea why.
          var n = 256;
          var arr = [];
          arr[n] = 'a';
          arr.splice(n + 1, 0, 'b');
          return arr[n] === 'a';
      }());
      defineProperties(ArrayPrototype, {
          splice: function splice(start, deleteCount) {
              var O = ES.ToObject(this);
              var A = [];
              var len = ES.ToUint32(O.length);
              var relativeStart = ES.ToInteger(start);
              var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);
              var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);
  
              var k = 0;
              var from;
              while (k < actualDeleteCount) {
                  from = $String(actualStart + k);
                  if (owns(O, from)) {
                      A[k] = O[from];
                  }
                  k += 1;
              }
  
              var items = arraySlice(arguments, 2);
              var itemCount = items.length;
              var to;
              if (itemCount < actualDeleteCount) {
                  k = actualStart;
                  var maxK = len - actualDeleteCount;
                  while (k < maxK) {
                      from = $String(k + actualDeleteCount);
                      to = $String(k + itemCount);
                      if (owns(O, from)) {
                          O[to] = O[from];
                      } else {
                          delete O[to];
                      }
                      k += 1;
                  }
                  k = len;
                  var minK = len - actualDeleteCount + itemCount;
                  while (k > minK) {
                      delete O[k - 1];
                      k -= 1;
                  }
              } else if (itemCount > actualDeleteCount) {
                  k = len - actualDeleteCount;
                  while (k > actualStart) {
                      from = $String(k + actualDeleteCount - 1);
                      to = $String(k + itemCount - 1);
                      if (owns(O, from)) {
                          O[to] = O[from];
                      } else {
                          delete O[to];
                      }
                      k -= 1;
                  }
              }
              k = actualStart;
              for (var i = 0; i < items.length; ++i) {
                  O[k] = items[i];
                  k += 1;
              }
              O.length = len - actualDeleteCount + itemCount;
  
              return A;
          }
      }, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);
  
      var originalJoin = ArrayPrototype.join;
      var hasStringJoinBug;
      try {
          hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3';
      } catch (e) {
          hasStringJoinBug = true;
      }
      if (hasStringJoinBug) {
          defineProperties(ArrayPrototype, {
              join: function join(separator) {
                  var sep = typeof separator === 'undefined' ? ',' : separator;
                  return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep);
              }
          }, hasStringJoinBug);
      }
  
      var hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';
      if (hasJoinUndefinedBug) {
          defineProperties(ArrayPrototype, {
              join: function join(separator) {
                  var sep = typeof separator === 'undefined' ? ',' : separator;
                  return originalJoin.call(this, sep);
              }
          }, hasJoinUndefinedBug);
      }
  
      var pushShim = function push(item) {
          var O = ES.ToObject(this);
          var n = ES.ToUint32(O.length);
          var i = 0;
          while (i < arguments.length) {
              O[n + i] = arguments[i];
              i += 1;
          }
          O.length = n + i;
          return n + i;
      };
  
      var pushIsNotGeneric = (function () {
          var obj = {};
          var result = Array.prototype.push.call(obj, undefined);
          return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);
      }());
      defineProperties(ArrayPrototype, {
          push: function push(item) {
              if (isArray(this)) {
                  return array_push.apply(this, arguments);
              }
              return pushShim.apply(this, arguments);
          }
      }, pushIsNotGeneric);
  
      // This fixes a very weird bug in Opera 10.6 when pushing `undefined
      var pushUndefinedIsWeird = (function () {
          var arr = [];
          var result = arr.push(undefined);
          return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);
      }());
      defineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);
  
      // ES5 15.2.3.14
      // http://es5.github.io/#x15.4.4.10
      // Fix boxed string bug
      defineProperties(ArrayPrototype, {
          slice: function (start, end) {
              var arr = isString(this) ? strSplit(this, '') : this;
              return arraySliceApply(arr, arguments);
          }
      }, splitString);
  
      var sortIgnoresNonFunctions = (function () {
          try {
              [1, 2].sort(null);
              [1, 2].sort({});
              return true;
          } catch (e) {}
          return false;
      }());
      var sortThrowsOnRegex = (function () {
          // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`
          try {
              [1, 2].sort(/a/);
              return false;
          } catch (e) {}
          return true;
      }());
      var sortIgnoresUndefined = (function () {
          // applies in IE 8, for one.
          try {
              [1, 2].sort(undefined);
              return true;
          } catch (e) {}
          return false;
      }());
      defineProperties(ArrayPrototype, {
          sort: function sort(compareFn) {
              if (typeof compareFn === 'undefined') {
                  return arraySort(this);
              }
              if (!isCallable(compareFn)) {
                  throw new TypeError('Array.prototype.sort callback must be a function');
              }
              return arraySort(this, compareFn);
          }
      }, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex);
  
      //
      // Object
      // ======
      //
  
      // ES5 15.2.3.14
      // http://es5.github.com/#x15.2.3.14
  
      // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
      var hasDontEnumBug = !isEnum({ 'toString': null }, 'toString');
      var hasProtoEnumBug = isEnum(function () {}, 'prototype');
      var hasStringEnumBug = !owns('x', '0');
      var equalsConstructorPrototype = function (o) {
          var ctor = o.constructor;
          return ctor && ctor.prototype === o;
      };
      var blacklistedKeys = {
          $window: true,
          $console: true,
          $parent: true,
          $self: true,
          $frame: true,
          $frames: true,
          $frameElement: true,
          $webkitIndexedDB: true,
          $webkitStorageInfo: true,
          $external: true
      };
      var hasAutomationEqualityBug = (function () {
          /* globals window */
          if (typeof window === 'undefined') {
              return false;
          }
          for (var k in window) {
              try {
                  if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {
                      equalsConstructorPrototype(window[k]);
                  }
              } catch (e) {
                  return true;
              }
          }
          return false;
      }());
      var equalsConstructorPrototypeIfNotBuggy = function (object) {
          if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
              return equalsConstructorPrototype(object);
          }
          try {
              return equalsConstructorPrototype(object);
          } catch (e) {
              return false;
          }
      };
      var dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
      ];
      var dontEnumsLength = dontEnums.length;
  
      // taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js
      // can be replaced with require('is-arguments') if we ever use a build process instead
      var isStandardArguments = function isArguments(value) {
          return toStr(value) === '[object Arguments]';
      };
      var isLegacyArguments = function isArguments(value) {
          return value !== null &&
              typeof value === 'object' &&
              typeof value.length === 'number' &&
              value.length >= 0 &&
              !isArray(value) &&
              isCallable(value.callee);
      };
      var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;
  
      defineProperties($Object, {
          keys: function keys(object) {
              var isFn = isCallable(object);
              var isArgs = isArguments(object);
              var isObject = object !== null && typeof object === 'object';
              var isStr = isObject && isString(object);
  
              if (!isObject && !isFn && !isArgs) {
                  throw new TypeError('Object.keys called on a non-object');
              }
  
              var theKeys = [];
              var skipProto = hasProtoEnumBug && isFn;
              if ((isStr && hasStringEnumBug) || isArgs) {
                  for (var i = 0; i < object.length; ++i) {
                      pushCall(theKeys, $String(i));
                  }
              }
  
              if (!isArgs) {
                  for (var name in object) {
                      if (!(skipProto && name === 'prototype') && owns(object, name)) {
                          pushCall(theKeys, $String(name));
                      }
                  }
              }
  
              if (hasDontEnumBug) {
                  var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                  for (var j = 0; j < dontEnumsLength; j++) {
                      var dontEnum = dontEnums[j];
                      if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {
                          pushCall(theKeys, dontEnum);
                      }
                  }
              }
              return theKeys;
          }
      });
  
      var keysWorksWithArguments = $Object.keys && (function () {
          // Safari 5.0 bug
          return $Object.keys(arguments).length === 2;
      }(1, 2));
      var keysHasArgumentsLengthBug = $Object.keys && (function () {
          var argKeys = $Object.keys(arguments);
          return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;
      }(1));
      var originalKeys = $Object.keys;
      defineProperties($Object, {
          keys: function keys(object) {
              if (isArguments(object)) {
                  return originalKeys(arraySlice(object));
              } else {
                  return originalKeys(object);
              }
          }
      }, !keysWorksWithArguments || keysHasArgumentsLengthBug);
  
      //
      // Date
      // ====
      //
  
      var hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0;
      var aNegativeTestDate = new Date(-1509842289600292);
      var aPositiveTestDate = new Date(1449662400000);
      var hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT';
      var hasToDateStringFormatBug;
      var hasToStringFormatBug;
      var timeZoneOffset = aNegativeTestDate.getTimezoneOffset();
      if (timeZoneOffset < -720) {
          hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875';
          hasToStringFormatBug = !(/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
      } else {
          hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875';
          hasToStringFormatBug = !(/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
      }
  
      var originalGetFullYear = call.bind(Date.prototype.getFullYear);
      var originalGetMonth = call.bind(Date.prototype.getMonth);
      var originalGetDate = call.bind(Date.prototype.getDate);
      var originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear);
      var originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth);
      var originalGetUTCDate = call.bind(Date.prototype.getUTCDate);
      var originalGetUTCDay = call.bind(Date.prototype.getUTCDay);
      var originalGetUTCHours = call.bind(Date.prototype.getUTCHours);
      var originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes);
      var originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds);
      var originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds);
      var dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      var daysInMonth = function daysInMonth(month, year) {
          return originalGetDate(new Date(year, month, 0));
      };
  
      defineProperties(Date.prototype, {
          getFullYear: function getFullYear() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var year = originalGetFullYear(this);
              if (year < 0 && originalGetMonth(this) > 11) {
                  return year + 1;
              }
              return year;
          },
          getMonth: function getMonth() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var year = originalGetFullYear(this);
              var month = originalGetMonth(this);
              if (year < 0 && month > 11) {
                  return 0;
              }
              return month;
          },
          getDate: function getDate() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var year = originalGetFullYear(this);
              var month = originalGetMonth(this);
              var date = originalGetDate(this);
              if (year < 0 && month > 11) {
                  if (month === 12) {
                      return date;
                  }
                  var days = daysInMonth(0, year + 1);
                  return (days - date) + 1;
              }
              return date;
          },
          getUTCFullYear: function getUTCFullYear() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var year = originalGetUTCFullYear(this);
              if (year < 0 && originalGetUTCMonth(this) > 11) {
                  return year + 1;
              }
              return year;
          },
          getUTCMonth: function getUTCMonth() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var year = originalGetUTCFullYear(this);
              var month = originalGetUTCMonth(this);
              if (year < 0 && month > 11) {
                  return 0;
              }
              return month;
          },
          getUTCDate: function getUTCDate() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var year = originalGetUTCFullYear(this);
              var month = originalGetUTCMonth(this);
              var date = originalGetUTCDate(this);
              if (year < 0 && month > 11) {
                  if (month === 12) {
                      return date;
                  }
                  var days = daysInMonth(0, year + 1);
                  return (days - date) + 1;
              }
              return date;
          }
      }, hasNegativeMonthYearBug);
  
      defineProperties(Date.prototype, {
          toUTCString: function toUTCString() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var day = originalGetUTCDay(this);
              var date = originalGetUTCDate(this);
              var month = originalGetUTCMonth(this);
              var year = originalGetUTCFullYear(this);
              var hour = originalGetUTCHours(this);
              var minute = originalGetUTCMinutes(this);
              var second = originalGetUTCSeconds(this);
              return dayName[day] + ', ' +
                  (date < 10 ? '0' + date : date) + ' ' +
                  monthName[month] + ' ' +
                  year + ' ' +
                  (hour < 10 ? '0' + hour : hour) + ':' +
                  (minute < 10 ? '0' + minute : minute) + ':' +
                  (second < 10 ? '0' + second : second) + ' GMT';
          }
      }, hasNegativeMonthYearBug || hasToUTCStringFormatBug);
  
      // Opera 12 has `,`
      defineProperties(Date.prototype, {
          toDateString: function toDateString() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var day = this.getDay();
              var date = this.getDate();
              var month = this.getMonth();
              var year = this.getFullYear();
              return dayName[day] + ' ' +
                  monthName[month] + ' ' +
                  (date < 10 ? '0' + date : date) + ' ' +
                  year;
          }
      }, hasNegativeMonthYearBug || hasToDateStringFormatBug);
  
      // can't use defineProperties here because of toString enumeration issue in IE <= 8
      if (hasNegativeMonthYearBug || hasToStringFormatBug) {
          Date.prototype.toString = function toString() {
              if (!this || !(this instanceof Date)) {
                  throw new TypeError('this is not a Date object.');
              }
              var day = this.getDay();
              var date = this.getDate();
              var month = this.getMonth();
              var year = this.getFullYear();
              var hour = this.getHours();
              var minute = this.getMinutes();
              var second = this.getSeconds();
              var timezoneOffset = this.getTimezoneOffset();
              var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60);
              var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60);
              return dayName[day] + ' ' +
                  monthName[month] + ' ' +
                  (date < 10 ? '0' + date : date) + ' ' +
                  year + ' ' +
                  (hour < 10 ? '0' + hour : hour) + ':' +
                  (minute < 10 ? '0' + minute : minute) + ':' +
                  (second < 10 ? '0' + second : second) + ' GMT' +
                  (timezoneOffset > 0 ? '-' : '+') +
                  (hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) +
                  (minutesOffset < 10 ? '0' + minutesOffset : minutesOffset);
          };
          if (supportsDescriptors) {
              $Object.defineProperty(Date.prototype, 'toString', {
                  configurable: true,
                  enumerable: false,
                  writable: true
              });
          }
      }
  
      // ES5 15.9.5.43
      // http://es5.github.com/#x15.9.5.43
      // This function returns a String value represent the instance in time
      // represented by this Date object. The format of the String is the Date Time
      // string format defined in 15.9.1.15. All fields are present in the String.
      // The time zone is always UTC, denoted by the suffix Z. If the time value of
      // this object is not a finite Number a RangeError exception is thrown.
      var negativeDate = -62198755200000;
      var negativeYearString = '-000001';
      var hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;
      var hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';
  
      var getTime = call.bind(Date.prototype.getTime);
  
      defineProperties(Date.prototype, {
          toISOString: function toISOString() {
              if (!isFinite(this) || !isFinite(getTime(this))) {
                  // Adope Photoshop requires the second check.
                  throw new RangeError('Date.prototype.toISOString called on non-finite value.');
              }
  
              var year = originalGetUTCFullYear(this);
  
              var month = originalGetUTCMonth(this);
              // see https://github.com/es-shims/es5-shim/issues/111
              year += Math.floor(month / 12);
              month = (month % 12 + 12) % 12;
  
              // the date time string format is specified in 15.9.1.15.
              var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];
              year = (
                  (year < 0 ? '-' : (year > 9999 ? '+' : '')) +
                  strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)
              );
  
              for (var i = 0; i < result.length; ++i) {
                  // pad months, days, hours, minutes, and seconds to have two digits.
                  result[i] = strSlice('00' + result[i], -2);
              }
              // pad milliseconds to have three digits.
              return (
                  year + '-' + arraySlice(result, 0, 2).join('-') +
                  'T' + arraySlice(result, 2).join(':') + '.' +
                  strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z'
              );
          }
      }, hasNegativeDateBug || hasSafari51DateBug);
  
      // ES5 15.9.5.44
      // http://es5.github.com/#x15.9.5.44
      // This function provides a String representation of a Date object for use by
      // JSON.stringify (15.12.3).
      var dateToJSONIsSupported = (function () {
          try {
              return Date.prototype.toJSON &&
                  new Date(NaN).toJSON() === null &&
                  new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&
                  Date.prototype.toJSON.call({ // generic
                      toISOString: function () { return true; }
                  });
          } catch (e) {
              return false;
          }
      }());
      if (!dateToJSONIsSupported) {
          Date.prototype.toJSON = function toJSON(key) {
              // When the toJSON method is called with argument key, the following
              // steps are taken:
  
              // 1.  Let O be the result of calling ToObject, giving it the this
              // value as its argument.
              // 2. Let tv be ES.ToPrimitive(O, hint Number).
              var O = $Object(this);
              var tv = ES.ToPrimitive(O);
              // 3. If tv is a Number and is not finite, return null.
              if (typeof tv === 'number' && !isFinite(tv)) {
                  return null;
              }
              // 4. Let toISO be the result of calling the [[Get]] internal method of
              // O with argument "toISOString".
              var toISO = O.toISOString;
              // 5. If IsCallable(toISO) is false, throw a TypeError exception.
              if (!isCallable(toISO)) {
                  throw new TypeError('toISOString property is not callable');
              }
              // 6. Return the result of calling the [[Call]] internal method of
              //  toISO with O as the this value and an empty argument list.
              return toISO.call(O);
  
              // NOTE 1 The argument is ignored.
  
              // NOTE 2 The toJSON function is intentionally generic; it does not
              // require that its this value be a Date object. Therefore, it can be
              // transferred to other kinds of objects for use as a method. However,
              // it does require that any such object have a toISOString method. An
              // object is free to use the argument key to filter its
              // stringification.
          };
      }
  
      // ES5 15.9.4.2
      // http://es5.github.com/#x15.9.4.2
      // based on work shared by Daniel Friesen (dantman)
      // http://gist.github.com/303249
      var supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;
      var acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));
      var doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));
      if (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {
          // XXX global assignment won't work in embeddings that use
          // an alternate object for the context.
          /* global Date: true */
          /* eslint-disable no-undef */
          var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;
          var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());
          /* eslint-disable no-implicit-globals */
          Date = (function (NativeDate) {
          /* eslint-enable no-implicit-globals */
          /* eslint-enable no-undef */
              // Date.length === 7
              var DateShim = function Date(Y, M, D, h, m, s, ms) {
                  var length = arguments.length;
                  var date;
                  if (this instanceof NativeDate) {
                      var seconds = s;
                      var millis = ms;
                      if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {
                          // work around a Safari 8/9 bug where it treats the seconds as signed
                          var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                          var sToShift = Math.floor(msToShift / 1e3);
                          seconds += sToShift;
                          millis -= sToShift * 1e3;
                      }
                      date = length === 1 && $String(Y) === Y ? // isString(Y)
                          // We explicitly pass it through parse:
                          new NativeDate(DateShim.parse(Y)) :
                          // We have to manually make calls depending on argument
                          // length here
                          length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :
                          length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :
                          length >= 5 ? new NativeDate(Y, M, D, h, m) :
                          length >= 4 ? new NativeDate(Y, M, D, h) :
                          length >= 3 ? new NativeDate(Y, M, D) :
                          length >= 2 ? new NativeDate(Y, M) :
                          length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) :
                                        new NativeDate();
                  } else {
                      date = NativeDate.apply(this, arguments);
                  }
                  if (!isPrimitive(date)) {
                      // Prevent mixups with unfixed Date object
                      defineProperties(date, { constructor: DateShim }, true);
                  }
                  return date;
              };
  
              // 15.9.1.15 Date Time String Format.
              var isoDateExpression = new RegExp('^' +
                  '(\\d{4}|[+-]\\d{6})' + // four-digit year capture or sign +
                                            // 6-digit extended year
                  '(?:-(\\d{2})' + // optional month capture
                  '(?:-(\\d{2})' + // optional day capture
                  '(?:' + // capture hours:minutes:seconds.milliseconds
                      'T(\\d{2})' + // hours capture
                      ':(\\d{2})' + // minutes capture
                      '(?:' + // optional :seconds.milliseconds
                          ':(\\d{2})' + // seconds capture
                          '(?:(\\.\\d{1,}))?' + // milliseconds capture
                      ')?' +
                  '(' + // capture UTC offset component
                      'Z|' + // UTC capture
                      '(?:' + // offset specifier +/-hours:minutes
                          '([-+])' + // sign capture
                          '(\\d{2})' + // hours offset capture
                          ':(\\d{2})' + // minutes offset capture
                      ')' +
                  ')?)?)?)?' +
              '$');
  
              var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
  
              var dayFromMonth = function dayFromMonth(year, month) {
                  var t = month > 1 ? 1 : 0;
                  return (
                      months[month] +
                      Math.floor((year - 1969 + t) / 4) -
                      Math.floor((year - 1901 + t) / 100) +
                      Math.floor((year - 1601 + t) / 400) +
                      365 * (year - 1970)
                  );
              };
  
              var toUTC = function toUTC(t) {
                  var s = 0;
                  var ms = t;
                  if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {
                      // work around a Safari 8/9 bug where it treats the seconds as signed
                      var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                      var sToShift = Math.floor(msToShift / 1e3);
                      s += sToShift;
                      ms -= sToShift * 1e3;
                  }
                  return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));
              };
  
              // Copy any custom methods a 3rd party library may have added
              for (var key in NativeDate) {
                  if (owns(NativeDate, key)) {
                      DateShim[key] = NativeDate[key];
                  }
              }
  
              // Copy "native" methods explicitly; they may be non-enumerable
              defineProperties(DateShim, {
                  now: NativeDate.now,
                  UTC: NativeDate.UTC
              }, true);
              DateShim.prototype = NativeDate.prototype;
              defineProperties(DateShim.prototype, {
                  constructor: DateShim
              }, true);
  
              // Upgrade Date.parse to handle simplified ISO 8601 strings
              var parseShim = function parse(string) {
                  var match = isoDateExpression.exec(string);
                  if (match) {
                      // parse months, days, hours, minutes, seconds, and milliseconds
                      // provide default values if necessary
                      // parse the UTC offset component
                      var year = $Number(match[1]),
                          month = $Number(match[2] || 1) - 1,
                          day = $Number(match[3] || 1) - 1,
                          hour = $Number(match[4] || 0),
                          minute = $Number(match[5] || 0),
                          second = $Number(match[6] || 0),
                          millisecond = Math.floor($Number(match[7] || 0) * 1000),
                          // When time zone is missed, local offset should be used
                          // (ES 5.1 bug)
                          // see https://bugs.ecmascript.org/show_bug.cgi?id=112
                          isLocalTime = Boolean(match[4] && !match[8]),
                          signOffset = match[9] === '-' ? 1 : -1,
                          hourOffset = $Number(match[10] || 0),
                          minuteOffset = $Number(match[11] || 0),
                          result;
                      var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;
                      if (
                          hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&
                          minute < 60 && second < 60 && millisecond < 1000 &&
                          month > -1 && month < 12 && hourOffset < 24 &&
                          minuteOffset < 60 && // detect invalid offsets
                          day > -1 &&
                          day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))
                      ) {
                          result = (
                              (dayFromMonth(year, month) + day) * 24 +
                              hour +
                              hourOffset * signOffset
                          ) * 60;
                          result = (
                              (result + minute + minuteOffset * signOffset) * 60 +
                              second
                          ) * 1000 + millisecond;
                          if (isLocalTime) {
                              result = toUTC(result);
                          }
                          if (-8.64e15 <= result && result <= 8.64e15) {
                              return result;
                          }
                      }
                      return NaN;
                  }
                  return NativeDate.parse.apply(this, arguments);
              };
              defineProperties(DateShim, { parse: parseShim });
  
              return DateShim;
          }(Date));
          /* global Date: false */
      }
  
      // ES5 15.9.4.4
      // http://es5.github.com/#x15.9.4.4
      if (!Date.now) {
          Date.now = function now() {
              return new Date().getTime();
          };
      }
  
      //
      // Number
      // ======
      //
  
      // ES5.1 15.7.4.5
      // http://es5.github.com/#x15.7.4.5
      var hasToFixedBugs = NumberPrototype.toFixed && (
        (0.00008).toFixed(3) !== '0.000' ||
        (0.9).toFixed(0) !== '1' ||
        (1.255).toFixed(2) !== '1.25' ||
        (1000000000000000128).toFixed(0) !== '1000000000000000128'
      );
  
      var toFixedHelpers = {
          base: 1e7,
          size: 6,
          data: [0, 0, 0, 0, 0, 0],
          multiply: function multiply(n, c) {
              var i = -1;
              var c2 = c;
              while (++i < toFixedHelpers.size) {
                  c2 += n * toFixedHelpers.data[i];
                  toFixedHelpers.data[i] = c2 % toFixedHelpers.base;
                  c2 = Math.floor(c2 / toFixedHelpers.base);
              }
          },
          divide: function divide(n) {
              var i = toFixedHelpers.size;
              var c = 0;
              while (--i >= 0) {
                  c += toFixedHelpers.data[i];
                  toFixedHelpers.data[i] = Math.floor(c / n);
                  c = (c % n) * toFixedHelpers.base;
              }
          },
          numToString: function numToString() {
              var i = toFixedHelpers.size;
              var s = '';
              while (--i >= 0) {
                  if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {
                      var t = $String(toFixedHelpers.data[i]);
                      if (s === '') {
                          s = t;
                      } else {
                          s += strSlice('0000000', 0, 7 - t.length) + t;
                      }
                  }
              }
              return s;
          },
          pow: function pow(x, n, acc) {
              return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));
          },
          log: function log(x) {
              var n = 0;
              var x2 = x;
              while (x2 >= 4096) {
                  n += 12;
                  x2 /= 4096;
              }
              while (x2 >= 2) {
                  n += 1;
                  x2 /= 2;
              }
              return n;
          }
      };
  
      var toFixedShim = function toFixed(fractionDigits) {
          var f, x, s, m, e, z, j, k;
  
          // Test for NaN and round fractionDigits down
          f = $Number(fractionDigits);
          f = isActualNaN(f) ? 0 : Math.floor(f);
  
          if (f < 0 || f > 20) {
              throw new RangeError('Number.toFixed called with invalid number of decimals');
          }
  
          x = $Number(this);
  
          if (isActualNaN(x)) {
              return 'NaN';
          }
  
          // If it is too big or small, return the string value of the number
          if (x <= -1e21 || x >= 1e21) {
              return $String(x);
          }
  
          s = '';
  
          if (x < 0) {
              s = '-';
              x = -x;
          }
  
          m = '0';
  
          if (x > 1e-21) {
              // 1e-21 < x < 1e21
              // -70 < log2(x) < 70
              e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;
              z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));
              z *= 0x10000000000000; // Math.pow(2, 52);
              e = 52 - e;
  
              // -18 < e < 122
              // x = z / 2 ^ e
              if (e > 0) {
                  toFixedHelpers.multiply(0, z);
                  j = f;
  
                  while (j >= 7) {
                      toFixedHelpers.multiply(1e7, 0);
                      j -= 7;
                  }
  
                  toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);
                  j = e - 1;
  
                  while (j >= 23) {
                      toFixedHelpers.divide(1 << 23);
                      j -= 23;
                  }
  
                  toFixedHelpers.divide(1 << j);
                  toFixedHelpers.multiply(1, 1);
                  toFixedHelpers.divide(2);
                  m = toFixedHelpers.numToString();
              } else {
                  toFixedHelpers.multiply(0, z);
                  toFixedHelpers.multiply(1 << (-e), 0);
                  m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);
              }
          }
  
          if (f > 0) {
              k = m.length;
  
              if (k <= f) {
                  m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;
              } else {
                  m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);
              }
          } else {
              m = s + m;
          }
  
          return m;
      };
      defineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);
  
      var hasToPrecisionUndefinedBug = (function () {
          try {
              return 1.0.toPrecision(undefined) === '1';
          } catch (e) {
              return true;
          }
      }());
      var originalToPrecision = NumberPrototype.toPrecision;
      defineProperties(NumberPrototype, {
          toPrecision: function toPrecision(precision) {
              return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);
          }
      }, hasToPrecisionUndefinedBug);
  
      //
      // String
      // ======
      //
  
      // ES5 15.5.4.14
      // http://es5.github.com/#x15.5.4.14
  
      // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
      // Many browsers do not split properly with regular expressions or they
      // do not perform the split correctly under obscure conditions.
      // See http://blog.stevenlevithan.com/archives/cross-browser-split
      // I've tested in many browsers and this seems to cover the deviant ones:
      //    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
      //    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
      //    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
      //       [undefined, "t", undefined, "e", ...]
      //    ''.split(/.?/) should be [], not [""]
      //    '.'.split(/()()/) should be ["."], not ["", "", "."]
  
      if (
          'ab'.split(/(?:ab)*/).length !== 2 ||
          '.'.split(/(.?)(.?)/).length !== 4 ||
          'tesst'.split(/(s)*/)[1] === 't' ||
          'test'.split(/(?:)/, -1).length !== 4 ||
          ''.split(/.?/).length ||
          '.'.split(/()()/).length > 1
      ) {
          (function () {
              var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group
              var maxSafe32BitInt = Math.pow(2, 32) - 1;
  
              StringPrototype.split = function (separator, limit) {
                  var string = String(this);
                  if (typeof separator === 'undefined' && limit === 0) {
                      return [];
                  }
  
                  // If `separator` is not a regex, use native split
                  if (!isRegex(separator)) {
                      return strSplit(this, separator, limit);
                  }
  
                  var output = [];
                  var flags = (separator.ignoreCase ? 'i' : '') +
                              (separator.multiline ? 'm' : '') +
                              (separator.unicode ? 'u' : '') + // in ES6
                              (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6
                      lastLastIndex = 0,
                      // Make `global` and avoid `lastIndex` issues by working with a copy
                      separator2, match, lastIndex, lastLength;
                  var separatorCopy = new RegExp(separator.source, flags + 'g');
                  if (!compliantExecNpcg) {
                      // Doesn't need flags gy, but they don't hurt
                      separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
                  }
                  /* Values for `limit`, per the spec:
                   * If undefined: 4294967295 // maxSafe32BitInt
                   * If 0, Infinity, or NaN: 0
                   * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
                   * If negative number: 4294967296 - Math.floor(Math.abs(limit))
                   * If other: Type-convert, then use the above rules
                   */
                  var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);
                  match = separatorCopy.exec(string);
                  while (match) {
                      // `separatorCopy.lastIndex` is not reliable cross-browser
                      lastIndex = match.index + match[0].length;
                      if (lastIndex > lastLastIndex) {
                          pushCall(output, strSlice(string, lastLastIndex, match.index));
                          // Fix browsers whose `exec` methods don't consistently return `undefined` for
                          // nonparticipating capturing groups
                          if (!compliantExecNpcg && match.length > 1) {
                              /* eslint-disable no-loop-func */
                              match[0].replace(separator2, function () {
                                  for (var i = 1; i < arguments.length - 2; i++) {
                                      if (typeof arguments[i] === 'undefined') {
                                          match[i] = void 0;
                                      }
                                  }
                              });
                              /* eslint-enable no-loop-func */
                          }
                          if (match.length > 1 && match.index < string.length) {
                              array_push.apply(output, arraySlice(match, 1));
                          }
                          lastLength = match[0].length;
                          lastLastIndex = lastIndex;
                          if (output.length >= splitLimit) {
                              break;
                          }
                      }
                      if (separatorCopy.lastIndex === match.index) {
                          separatorCopy.lastIndex++; // Avoid an infinite loop
                      }
                      match = separatorCopy.exec(string);
                  }
                  if (lastLastIndex === string.length) {
                      if (lastLength || !separatorCopy.test('')) {
                          pushCall(output, '');
                      }
                  } else {
                      pushCall(output, strSlice(string, lastLastIndex));
                  }
                  return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output;
              };
          }());
  
      // [bugfix, chrome]
      // If separator is undefined, then the result array contains just one String,
      // which is the this value (converted to a String). If limit is not undefined,
      // then the output array is truncated so that it contains no more than limit
      // elements.
      // "0".split(undefined, 0) -> []
      } else if ('0'.split(void 0, 0).length) {
          StringPrototype.split = function split(separator, limit) {
              if (typeof separator === 'undefined' && limit === 0) {
                  return [];
              }
              return strSplit(this, separator, limit);
          };
      }
  
      var str_replace = StringPrototype.replace;
      var replaceReportsGroupsCorrectly = (function () {
          var groups = [];
          'x'.replace(/x(.)?/g, function (match, group) {
              pushCall(groups, group);
          });
          return groups.length === 1 && typeof groups[0] === 'undefined';
      }());
  
      if (!replaceReportsGroupsCorrectly) {
          StringPrototype.replace = function replace(searchValue, replaceValue) {
              var isFn = isCallable(replaceValue);
              var hasCapturingGroups = isRegex(searchValue) && (/\)[*?]/).test(searchValue.source);
              if (!isFn || !hasCapturingGroups) {
                  return str_replace.call(this, searchValue, replaceValue);
              } else {
                  var wrappedReplaceValue = function (match) {
                      var length = arguments.length;
                      var originalLastIndex = searchValue.lastIndex;
                      searchValue.lastIndex = 0;
                      var args = searchValue.exec(match) || [];
                      searchValue.lastIndex = originalLastIndex;
                      pushCall(args, arguments[length - 2], arguments[length - 1]);
                      return replaceValue.apply(this, args);
                  };
                  return str_replace.call(this, searchValue, wrappedReplaceValue);
              }
          };
      }
  
      // ECMA-262, 3rd B.2.3
      // Not an ECMAScript standard, although ECMAScript 3rd Edition has a
      // non-normative section suggesting uniform semantics and it should be
      // normalized across all browsers
      // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
      var string_substr = StringPrototype.substr;
      var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
      defineProperties(StringPrototype, {
          substr: function substr(start, length) {
              var normalizedStart = start;
              if (start < 0) {
                  normalizedStart = max(this.length + start, 0);
              }
              return string_substr.call(this, normalizedStart, length);
          }
      }, hasNegativeSubstrBug);
  
      // ES5 15.5.4.20
      // whitespace from: http://es5.github.io/#x15.5.4.20
      var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
          '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
          '\u2029\uFEFF';
      var zeroWidth = '\u200b';
      var wsRegexChars = '[' + ws + ']';
      var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
      var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
      var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
      defineProperties(StringPrototype, {
          // http://blog.stevenlevithan.com/archives/faster-trim-javascript
          // http://perfectionkills.com/whitespace-deviations/
          trim: function trim() {
              if (typeof this === 'undefined' || this === null) {
                  throw new TypeError("can't convert " + this + ' to object');
              }
              return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
          }
      }, hasTrimWhitespaceBug);
      var trim = call.bind(String.prototype.trim);
  
      var hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;
      defineProperties(StringPrototype, {
          lastIndexOf: function lastIndexOf(searchString) {
              if (typeof this === 'undefined' || this === null) {
                  throw new TypeError("can't convert " + this + ' to object');
              }
              var S = $String(this);
              var searchStr = $String(searchString);
              var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;
              var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);
              var start = min(max(pos, 0), S.length);
              var searchLen = searchStr.length;
              var k = start + searchLen;
              while (k > 0) {
                  k = max(0, k - searchLen);
                  var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);
                  if (index !== -1) {
                      return k + index;
                  }
              }
              return -1;
          }
      }, hasLastIndexBug);
  
      var originalLastIndexOf = StringPrototype.lastIndexOf;
      defineProperties(StringPrototype, {
          lastIndexOf: function lastIndexOf(searchString) {
              return originalLastIndexOf.apply(this, arguments);
          }
      }, StringPrototype.lastIndexOf.length !== 1);
  
      // ES-5 15.1.2.2
      /* eslint-disable radix */
      if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
      /* eslint-enable radix */
          /* global parseInt: true */
          parseInt = (function (origParseInt) {
              var hexRegex = /^[\-+]?0[xX]/;
              return function parseInt(str, radix) {
                  var string = trim(String(str));
                  var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);
                  return origParseInt(string, defaultedRadix);
              };
          }(parseInt));
      }
  
      // https://es5.github.io/#x15.1.2.3
      if (1 / parseFloat('-0') !== -Infinity) {
          /* global parseFloat: true */
          parseFloat = (function (origParseFloat) {
              return function parseFloat(string) {
                  var inputString = trim(String(string));
                  var result = origParseFloat(inputString);
                  return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result;
              };
          }(parseFloat));
      }
  
      if (String(new RangeError('test')) !== 'RangeError: test') {
          var errorToStringShim = function toString() {
              if (typeof this === 'undefined' || this === null) {
                  throw new TypeError("can't convert " + this + ' to object');
              }
              var name = this.name;
              if (typeof name === 'undefined') {
                  name = 'Error';
              } else if (typeof name !== 'string') {
                  name = $String(name);
              }
              var msg = this.message;
              if (typeof msg === 'undefined') {
                  msg = '';
              } else if (typeof msg !== 'string') {
                  msg = $String(msg);
              }
              if (!name) {
                  return msg;
              }
              if (!msg) {
                  return name;
              }
              return name + ': ' + msg;
          };
          // can't use defineProperties here because of toString enumeration issue in IE <= 8
          Error.prototype.toString = errorToStringShim;
      }
  
      if (supportsDescriptors) {
          var ensureNonEnumerable = function (obj, prop) {
              if (isEnum(obj, prop)) {
                  var desc = Object.getOwnPropertyDescriptor(obj, prop);
                  if (desc.configurable) {
                      desc.enumerable = false;
                      Object.defineProperty(obj, prop, desc);
                  }
              }
          };
          ensureNonEnumerable(Error.prototype, 'message');
          if (Error.prototype.message !== '') {
              Error.prototype.message = '';
          }
          ensureNonEnumerable(Error.prototype, 'name');
      }
  
      if (String(/a/mig) !== '/a/gim') {
          var regexToString = function toString() {
              var str = '/' + this.source + '/';
              if (this.global) {
                  str += 'g';
              }
              if (this.ignoreCase) {
                  str += 'i';
              }
              if (this.multiline) {
                  str += 'm';
              }
              return str;
          };
          // can't use defineProperties here because of toString enumeration issue in IE <= 8
          RegExp.prototype.toString = regexToString;
      }
  }));
  

});

;/*!/node_modules/es5-shim/es5-sham.js*/
define('common:node_modules/es5-shim/es5-sham', function(require, exports, module) {

  /*!
   * https://github.com/es-shims/es5-shim
   * @license es5-shim Copyright 2009-2015 by contributors, MIT License
   * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
   */
  
  // vim: ts=4 sts=4 sw=4 expandtab
  
  // Add semicolon to prevent IIFE from being passed as argument to concatenated code.
  ;
  
  // UMD (Universal Module Definition)
  // see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
  (function (root, factory) {
      'use strict';
  
      /* global define, exports, module */
      if (typeof define === 'function' && define.amd) {
          // AMD. Register as an anonymous module.
          define(factory);
      } else if (typeof exports === 'object') {
          // Node. Does not work with strict CommonJS, but
          // only CommonJS-like enviroments that support module.exports,
          // like Node.
          module.exports = factory();
      } else {
          // Browser globals (root is window)
          root.returnExports = factory();
      }
  }(this, function () {
  
      var call = Function.call;
      var prototypeOfObject = Object.prototype;
      var owns = call.bind(prototypeOfObject.hasOwnProperty);
      var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);
      var toStr = call.bind(prototypeOfObject.toString);
  
      // If JS engine supports accessors creating shortcuts.
      var defineGetter;
      var defineSetter;
      var lookupGetter;
      var lookupSetter;
      var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
      if (supportsAccessors) {
          /* eslint-disable no-underscore-dangle */
          defineGetter = call.bind(prototypeOfObject.__defineGetter__);
          defineSetter = call.bind(prototypeOfObject.__defineSetter__);
          lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
          lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
          /* eslint-enable no-underscore-dangle */
      }
  
      var isPrimitive = function isPrimitive(o) {
          return o == null || (typeof o !== 'object' && typeof o !== 'function');
      };
  
      // ES5 15.2.3.2
      // http://es5.github.com/#x15.2.3.2
      if (!Object.getPrototypeOf) {
          // https://github.com/es-shims/es5-shim/issues#issue/2
          // http://ejohn.org/blog/objectgetprototypeof/
          // recommended by fschaefer on github
          //
          // sure, and webreflection says ^_^
          // ... this will nerever possibly return null
          // ... Opera Mini breaks here with infinite loops
          Object.getPrototypeOf = function getPrototypeOf(object) {
              /* eslint-disable no-proto */
              var proto = object.__proto__;
              /* eslint-enable no-proto */
              if (proto || proto === null) {
                  return proto;
              } else if (toStr(object.constructor) === '[object Function]') {
                  return object.constructor.prototype;
              } else if (object instanceof Object) {
                  return prototypeOfObject;
              } else {
                  // Correctly return null for Objects created with `Object.create(null)`
                  // (shammed or native) or `{ __proto__: null}`.  Also returns null for
                  // cross-realm objects on browsers that lack `__proto__` support (like
                  // IE <11), but that's the best we can do.
                  return null;
              }
          };
      }
  
      // ES5 15.2.3.3
      // http://es5.github.com/#x15.2.3.3
  
      var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {
          try {
              object.sentinel = 0;
              return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;
          } catch (exception) {
              return false;
          }
      };
  
      // check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
      if (Object.defineProperty) {
          var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});
          var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||
          doesGetOwnPropertyDescriptorWork(document.createElement('div'));
          if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {
              var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;
          }
      }
  
      if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {
          var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';
  
          /* eslint-disable no-proto */
          Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
              if (isPrimitive(object)) {
                  throw new TypeError(ERR_NON_OBJECT + object);
              }
  
              // make a valiant attempt to use the real getOwnPropertyDescriptor
              // for I8's DOM elements.
              if (getOwnPropertyDescriptorFallback) {
                  try {
                      return getOwnPropertyDescriptorFallback.call(Object, object, property);
                  } catch (exception) {
                      // try the shim if the real one doesn't work
                  }
              }
  
              var descriptor;
  
              // If object does not owns property return undefined immediately.
              if (!owns(object, property)) {
                  return descriptor;
              }
  
              // If object has a property then it's for sure `configurable`, and
              // probably `enumerable`. Detect enumerability though.
              descriptor = {
                  enumerable: isEnumerable(object, property),
                  configurable: true
              };
  
              // If JS engine supports accessor properties then property may be a
              // getter or setter.
              if (supportsAccessors) {
                  // Unfortunately `__lookupGetter__` will return a getter even
                  // if object has own non getter property along with a same named
                  // inherited getter. To avoid misbehavior we temporary remove
                  // `__proto__` so that `__lookupGetter__` will return getter only
                  // if it's owned by an object.
                  var prototype = object.__proto__;
                  var notPrototypeOfObject = object !== prototypeOfObject;
                  // avoid recursion problem, breaking in Opera Mini when
                  // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
                  // or any other Object.prototype accessor
                  if (notPrototypeOfObject) {
                      object.__proto__ = prototypeOfObject;
                  }
  
                  var getter = lookupGetter(object, property);
                  var setter = lookupSetter(object, property);
  
                  if (notPrototypeOfObject) {
                      // Once we have getter and setter we can put values back.
                      object.__proto__ = prototype;
                  }
  
                  if (getter || setter) {
                      if (getter) {
                          descriptor.get = getter;
                      }
                      if (setter) {
                          descriptor.set = setter;
                      }
                      // If it was accessor property we're done and return here
                      // in order to avoid adding `value` to the descriptor.
                      return descriptor;
                  }
              }
  
              // If we got this far we know that object has an own property that is
              // not an accessor so we set it as a value and return descriptor.
              descriptor.value = object[property];
              descriptor.writable = true;
              return descriptor;
          };
          /* eslint-enable no-proto */
      }
  
      // ES5 15.2.3.4
      // http://es5.github.com/#x15.2.3.4
      if (!Object.getOwnPropertyNames) {
          Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
              return Object.keys(object);
          };
      }
  
      // ES5 15.2.3.5
      // http://es5.github.com/#x15.2.3.5
      if (!Object.create) {
  
          // Contributed by Brandon Benvie, October, 2012
          var createEmpty;
          var supportsProto = !({ __proto__: null } instanceof Object);
                              // the following produces false positives
                              // in Opera Mini => not a reliable check
                              // Object.prototype.__proto__ === null
  
          // Check for document.domain and active x support
          // No need to use active x approach when document.domain is not set
          // see https://github.com/es-shims/es5-shim/issues/150
          // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
          /* global ActiveXObject */
          var shouldUseActiveX = function shouldUseActiveX() {
              // return early if document.domain not set
              if (!document.domain) {
                  return false;
              }
  
              try {
                  return !!new ActiveXObject('htmlfile');
              } catch (exception) {
                  return false;
              }
          };
  
          // This supports IE8 when document.domain is used
          // see https://github.com/es-shims/es5-shim/issues/150
          // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
          var getEmptyViaActiveX = function getEmptyViaActiveX() {
              var empty;
              var xDoc;
  
              xDoc = new ActiveXObject('htmlfile');
  
              var script = 'script';
              xDoc.write('<' + script + '></' + script + '>');
              xDoc.close();
  
              empty = xDoc.parentWindow.Object.prototype;
              xDoc = null;
  
              return empty;
          };
  
          // The original implementation using an iframe
          // before the activex approach was added
          // see https://github.com/es-shims/es5-shim/issues/150
          var getEmptyViaIFrame = function getEmptyViaIFrame() {
              var iframe = document.createElement('iframe');
              var parent = document.body || document.documentElement;
              var empty;
  
              iframe.style.display = 'none';
              parent.appendChild(iframe);
              /* eslint-disable no-script-url */
              iframe.src = 'javascript:';
              /* eslint-enable no-script-url */
  
              empty = iframe.contentWindow.Object.prototype;
              parent.removeChild(iframe);
              iframe = null;
  
              return empty;
          };
  
          /* global document */
          if (supportsProto || typeof document === 'undefined') {
              createEmpty = function () {
                  return { __proto__: null };
              };
          } else {
              // In old IE __proto__ can't be used to manually set `null`, nor does
              // any other method exist to make an object that inherits from nothing,
              // aside from Object.prototype itself. Instead, create a new global
              // object and *steal* its Object.prototype and strip it bare. This is
              // used as the prototype to create nullary objects.
              createEmpty = function () {
                  // Determine which approach to use
                  // see https://github.com/es-shims/es5-shim/issues/150
                  var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();
  
                  delete empty.constructor;
                  delete empty.hasOwnProperty;
                  delete empty.propertyIsEnumerable;
                  delete empty.isPrototypeOf;
                  delete empty.toLocaleString;
                  delete empty.toString;
                  delete empty.valueOf;
  
                  var Empty = function Empty() {};
                  Empty.prototype = empty;
                  // short-circuit future calls
                  createEmpty = function () {
                      return new Empty();
                  };
                  return new Empty();
              };
          }
  
          Object.create = function create(prototype, properties) {
  
              var object;
              var Type = function Type() {}; // An empty constructor.
  
              if (prototype === null) {
                  object = createEmpty();
              } else {
                  if (prototype !== null && isPrimitive(prototype)) {
                      // In the native implementation `parent` can be `null`
                      // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)
                      // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`
                      // like they are in modern browsers. Using `Object.create` on DOM elements
                      // is...err...probably inappropriate, but the native version allows for it.
                      throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome
                  }
                  Type.prototype = prototype;
                  object = new Type();
                  // IE has no built-in implementation of `Object.getPrototypeOf`
                  // neither `__proto__`, but this manually setting `__proto__` will
                  // guarantee that `Object.getPrototypeOf` will work as expected with
                  // objects created using `Object.create`
                  /* eslint-disable no-proto */
                  object.__proto__ = prototype;
                  /* eslint-enable no-proto */
              }
  
              if (properties !== void 0) {
                  Object.defineProperties(object, properties);
              }
  
              return object;
          };
      }
  
      // ES5 15.2.3.6
      // http://es5.github.com/#x15.2.3.6
  
      // Patch for WebKit and IE8 standard mode
      // Designed by hax <hax.github.com>
      // related issue: https://github.com/es-shims/es5-shim/issues#issue/5
      // IE8 Reference:
      //     http://msdn.microsoft.com/en-us/library/dd282900.aspx
      //     http://msdn.microsoft.com/en-us/library/dd229916.aspx
      // WebKit Bugs:
      //     https://bugs.webkit.org/show_bug.cgi?id=36423
  
      var doesDefinePropertyWork = function doesDefinePropertyWork(object) {
          try {
              Object.defineProperty(object, 'sentinel', {});
              return 'sentinel' in object;
          } catch (exception) {
              return false;
          }
      };
  
      // check whether defineProperty works if it's given. Otherwise,
      // shim partially.
      if (Object.defineProperty) {
          var definePropertyWorksOnObject = doesDefinePropertyWork({});
          var definePropertyWorksOnDom = typeof document === 'undefined' ||
              doesDefinePropertyWork(document.createElement('div'));
          if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
              var definePropertyFallback = Object.defineProperty,
                  definePropertiesFallback = Object.defineProperties;
          }
      }
  
      if (!Object.defineProperty || definePropertyFallback) {
          var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
          var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
          var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';
  
          Object.defineProperty = function defineProperty(object, property, descriptor) {
              if (isPrimitive(object)) {
                  throw new TypeError(ERR_NON_OBJECT_TARGET + object);
              }
              if (isPrimitive(descriptor)) {
                  throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
              }
              // make a valiant attempt to use the real defineProperty
              // for I8's DOM elements.
              if (definePropertyFallback) {
                  try {
                      return definePropertyFallback.call(Object, object, property, descriptor);
                  } catch (exception) {
                      // try the shim if the real one doesn't work
                  }
              }
  
              // If it's a data property.
              if ('value' in descriptor) {
                  // fail silently if 'writable', 'enumerable', or 'configurable'
                  // are requested but not supported
                  /*
                  // alternate approach:
                  if ( // can't implement these features; allow false but not true
                      ('writable' in descriptor && !descriptor.writable) ||
                      ('enumerable' in descriptor && !descriptor.enumerable) ||
                      ('configurable' in descriptor && !descriptor.configurable)
                  ))
                      throw new RangeError(
                          'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
                      );
                  */
  
                  if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
                      // As accessors are supported only on engines implementing
                      // `__proto__` we can safely override `__proto__` while defining
                      // a property to make sure that we don't hit an inherited
                      // accessor.
                      /* eslint-disable no-proto */
                      var prototype = object.__proto__;
                      object.__proto__ = prototypeOfObject;
                      // Deleting a property anyway since getter / setter may be
                      // defined on object itself.
                      delete object[property];
                      object[property] = descriptor.value;
                      // Setting original `__proto__` back now.
                      object.__proto__ = prototype;
                      /* eslint-enable no-proto */
                  } else {
                      object[property] = descriptor.value;
                  }
              } else {
                  var hasGetter = 'get' in descriptor;
                  var hasSetter = 'set' in descriptor;
                  if (!supportsAccessors && (hasGetter || hasSetter)) {
                      throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
                  }
                  // If we got that far then getters and setters can be defined !!
                  if (hasGetter) {
                      defineGetter(object, property, descriptor.get);
                  }
                  if (hasSetter) {
                      defineSetter(object, property, descriptor.set);
                  }
              }
              return object;
          };
      }
  
      // ES5 15.2.3.7
      // http://es5.github.com/#x15.2.3.7
      if (!Object.defineProperties || definePropertiesFallback) {
          Object.defineProperties = function defineProperties(object, properties) {
              // make a valiant attempt to use the real defineProperties
              if (definePropertiesFallback) {
                  try {
                      return definePropertiesFallback.call(Object, object, properties);
                  } catch (exception) {
                      // try the shim if the real one doesn't work
                  }
              }
  
              Object.keys(properties).forEach(function (property) {
                  if (property !== '__proto__') {
                      Object.defineProperty(object, property, properties[property]);
                  }
              });
              return object;
          };
      }
  
      // ES5 15.2.3.8
      // http://es5.github.com/#x15.2.3.8
      if (!Object.seal) {
          Object.seal = function seal(object) {
              if (Object(object) !== object) {
                  throw new TypeError('Object.seal can only be called on Objects.');
              }
              // this is misleading and breaks feature-detection, but
              // allows "securable" code to "gracefully" degrade to working
              // but insecure code.
              return object;
          };
      }
  
      // ES5 15.2.3.9
      // http://es5.github.com/#x15.2.3.9
      if (!Object.freeze) {
          Object.freeze = function freeze(object) {
              if (Object(object) !== object) {
                  throw new TypeError('Object.freeze can only be called on Objects.');
              }
              // this is misleading and breaks feature-detection, but
              // allows "securable" code to "gracefully" degrade to working
              // but insecure code.
              return object;
          };
      }
  
      // detect a Rhino bug and patch it
      try {
          Object.freeze(function () {});
      } catch (exception) {
          Object.freeze = (function (freezeObject) {
              return function freeze(object) {
                  if (typeof object === 'function') {
                      return object;
                  } else {
                      return freezeObject(object);
                  }
              };
          }(Object.freeze));
      }
  
      // ES5 15.2.3.10
      // http://es5.github.com/#x15.2.3.10
      if (!Object.preventExtensions) {
          Object.preventExtensions = function preventExtensions(object) {
              if (Object(object) !== object) {
                  throw new TypeError('Object.preventExtensions can only be called on Objects.');
              }
              // this is misleading and breaks feature-detection, but
              // allows "securable" code to "gracefully" degrade to working
              // but insecure code.
              return object;
          };
      }
  
      // ES5 15.2.3.11
      // http://es5.github.com/#x15.2.3.11
      if (!Object.isSealed) {
          Object.isSealed = function isSealed(object) {
              if (Object(object) !== object) {
                  throw new TypeError('Object.isSealed can only be called on Objects.');
              }
              return false;
          };
      }
  
      // ES5 15.2.3.12
      // http://es5.github.com/#x15.2.3.12
      if (!Object.isFrozen) {
          Object.isFrozen = function isFrozen(object) {
              if (Object(object) !== object) {
                  throw new TypeError('Object.isFrozen can only be called on Objects.');
              }
              return false;
          };
      }
  
      // ES5 15.2.3.13
      // http://es5.github.com/#x15.2.3.13
      if (!Object.isExtensible) {
          Object.isExtensible = function isExtensible(object) {
              // 1. If Type(O) is not Object throw a TypeError exception.
              if (Object(object) !== object) {
                  throw new TypeError('Object.isExtensible can only be called on Objects.');
              }
              // 2. Return the Boolean value of the [[Extensible]] internal property of O.
              var name = '';
              while (owns(object, name)) {
                  name += '?';
              }
              object[name] = true;
              var returnValue = owns(object, name);
              delete object[name];
              return returnValue;
          };
      }
  
  }));
  

});

;/*!/node_modules/matchmedia-polyfill/matchMedia.js*/
define('common:node_modules/matchmedia-polyfill/matchMedia', function(require, exports, module) {

  /*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */
  
  window.matchMedia || (window.matchMedia = function() {
      "use strict";
  
      // For browsers that support matchMedium api such as IE 9 and webkit
      var styleMedia = (window.styleMedia || window.media);
  
      // For those that don't support matchMedium
      if (!styleMedia) {
          var style       = document.createElement('style'),
              script      = document.getElementsByTagName('script')[0],
              info        = null;
  
          style.type  = 'text/css';
          style.id    = 'matchmediajs-test';
  
          script.parentNode.insertBefore(style, script);
  
          // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
          info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;
  
          styleMedia = {
              matchMedium: function(media) {
                  var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';
  
                  // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                  if (style.styleSheet) {
                      style.styleSheet.cssText = text;
                  } else {
                      style.textContent = text;
                  }
  
                  // Test if media query is true or false
                  return info.width === '1px';
              }
          };
      }
  
      return function(media) {
          return {
              matches: styleMedia.matchMedium(media || 'all'),
              media: media || 'all'
          };
      };
  }());
  

});

;/*!/node_modules/process/browser.js*/
define('common:node_modules/process/browser', function(require, exports, module) {

  // shim for using process in browser
  var process = module.exports = {};
  
  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.
  
  var cachedSetTimeout;
  var cachedClearTimeout;
  
  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  (function () {
      try {
          if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
          } else {
              cachedSetTimeout = defaultSetTimout;
          }
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
          } else {
              cachedClearTimeout = defaultClearTimeout;
          }
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  } ())
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }
  
  
  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }
  
  
  
  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  
  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }
  
  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
  
      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  
  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  };
  
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};
  
  function noop() {}
  
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.prependListener = noop;
  process.prependOnceListener = noop;
  
  process.listeners = function (name) { return [] }
  
  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };
  
  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };
  

});

;/*!/node_modules/bluebird/js/browser/bluebird.js*/
define('common:node_modules/bluebird/js/browser/bluebird', function(require, exports, module) {

  var process = require('common:node_modules/process/browser');
  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  /* @preserve
   * The MIT License (MIT)
   * 
   * Copyright (c) 2013-2017 Petka Antonov
   * 
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * 
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   * 
   */
  /**
   * bluebird build version 3.5.0
   * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
  */
  !function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  var SomePromiseArray = Promise._SomePromiseArray;
  function any(promises) {
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(1);
      ret.setUnwrap();
      ret.init();
      return promise;
  }
  
  Promise.any = function (promises) {
      return any(promises);
  };
  
  Promise.prototype.any = function () {
      return any(this);
  };
  
  };
  
  },{}],2:[function(_dereq_,module,exports){
  "use strict";
  var firstLineError;
  try {throw new Error(); } catch (e) {firstLineError = e;}
  var schedule = _dereq_("./schedule");
  var Queue = _dereq_("./queue");
  var util = _dereq_("./util");
  
  function Async() {
      this._customScheduler = false;
      this._isTickUsed = false;
      this._lateQueue = new Queue(16);
      this._normalQueue = new Queue(16);
      this._haveDrainedQueues = false;
      this._trampolineEnabled = true;
      var self = this;
      this.drainQueues = function () {
          self._drainQueues();
      };
      this._schedule = schedule;
  }
  
  Async.prototype.setScheduler = function(fn) {
      var prev = this._schedule;
      this._schedule = fn;
      this._customScheduler = true;
      return prev;
  };
  
  Async.prototype.hasCustomScheduler = function() {
      return this._customScheduler;
  };
  
  Async.prototype.enableTrampoline = function() {
      this._trampolineEnabled = true;
  };
  
  Async.prototype.disableTrampolineIfNecessary = function() {
      if (util.hasDevTools) {
          this._trampolineEnabled = false;
      }
  };
  
  Async.prototype.haveItemsQueued = function () {
      return this._isTickUsed || this._haveDrainedQueues;
  };
  
  
  Async.prototype.fatalError = function(e, isNode) {
      if (isNode) {
          process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
              "\n");
          process.exit(2);
      } else {
          this.throwLater(e);
      }
  };
  
  Async.prototype.throwLater = function(fn, arg) {
      if (arguments.length === 1) {
          arg = fn;
          fn = function () { throw arg; };
      }
      if (typeof setTimeout !== "undefined") {
          setTimeout(function() {
              fn(arg);
          }, 0);
      } else try {
          this._schedule(function() {
              fn(arg);
          });
      } catch (e) {
          throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
  };
  
  function AsyncInvokeLater(fn, receiver, arg) {
      this._lateQueue.push(fn, receiver, arg);
      this._queueTick();
  }
  
  function AsyncInvoke(fn, receiver, arg) {
      this._normalQueue.push(fn, receiver, arg);
      this._queueTick();
  }
  
  function AsyncSettlePromises(promise) {
      this._normalQueue._pushOne(promise);
      this._queueTick();
  }
  
  if (!util.hasDevTools) {
      Async.prototype.invokeLater = AsyncInvokeLater;
      Async.prototype.invoke = AsyncInvoke;
      Async.prototype.settlePromises = AsyncSettlePromises;
  } else {
      Async.prototype.invokeLater = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvokeLater.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  setTimeout(function() {
                      fn.call(receiver, arg);
                  }, 100);
              });
          }
      };
  
      Async.prototype.invoke = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvoke.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  fn.call(receiver, arg);
              });
          }
      };
  
      Async.prototype.settlePromises = function(promise) {
          if (this._trampolineEnabled) {
              AsyncSettlePromises.call(this, promise);
          } else {
              this._schedule(function() {
                  promise._settlePromises();
              });
          }
      };
  }
  
  Async.prototype._drainQueue = function(queue) {
      while (queue.length() > 0) {
          var fn = queue.shift();
          if (typeof fn !== "function") {
              fn._settlePromises();
              continue;
          }
          var receiver = queue.shift();
          var arg = queue.shift();
          fn.call(receiver, arg);
      }
  };
  
  Async.prototype._drainQueues = function () {
      this._drainQueue(this._normalQueue);
      this._reset();
      this._haveDrainedQueues = true;
      this._drainQueue(this._lateQueue);
  };
  
  Async.prototype._queueTick = function () {
      if (!this._isTickUsed) {
          this._isTickUsed = true;
          this._schedule(this.drainQueues);
      }
  };
  
  Async.prototype._reset = function () {
      this._isTickUsed = false;
  };
  
  module.exports = Async;
  module.exports.firstLineError = firstLineError;
  
  },{"./queue":26,"./schedule":29,"./util":36}],3:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
  var calledBind = false;
  var rejectThis = function(_, e) {
      this._reject(e);
  };
  
  var targetRejected = function(e, context) {
      context.promiseRejectionQueued = true;
      context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
  };
  
  var bindingResolved = function(thisArg, context) {
      if (((this._bitField & 50397184) === 0)) {
          this._resolveCallback(context.target);
      }
  };
  
  var bindingRejected = function(e, context) {
      if (!context.promiseRejectionQueued) this._reject(e);
  };
  
  Promise.prototype.bind = function (thisArg) {
      if (!calledBind) {
          calledBind = true;
          Promise.prototype._propagateFrom = debug.propagateFromFunction();
          Promise.prototype._boundValue = debug.boundValueFunction();
      }
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);
      ret._propagateFrom(this, 1);
      var target = this._target();
      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          var context = {
              promiseRejectionQueued: false,
              promise: ret,
              target: target,
              bindingPromise: maybePromise
          };
          target._then(INTERNAL, targetRejected, undefined, ret, context);
          maybePromise._then(
              bindingResolved, bindingRejected, undefined, ret, context);
          ret._setOnCancel(maybePromise);
      } else {
          ret._resolveCallback(target);
      }
      return ret;
  };
  
  Promise.prototype._setBoundTo = function (obj) {
      if (obj !== undefined) {
          this._bitField = this._bitField | 2097152;
          this._boundTo = obj;
      } else {
          this._bitField = this._bitField & (~2097152);
      }
  };
  
  Promise.prototype._isBound = function () {
      return (this._bitField & 2097152) === 2097152;
  };
  
  Promise.bind = function (thisArg, value) {
      return Promise.resolve(value).bind(thisArg);
  };
  };
  
  },{}],4:[function(_dereq_,module,exports){
  "use strict";
  var old;
  if (typeof Promise !== "undefined") old = Promise;
  function noConflict() {
      try { if (Promise === bluebird) Promise = old; }
      catch (e) {}
      return bluebird;
  }
  var bluebird = _dereq_("./promise")();
  bluebird.noConflict = noConflict;
  module.exports = bluebird;
  
  },{"./promise":22}],5:[function(_dereq_,module,exports){
  "use strict";
  var cr = Object.create;
  if (cr) {
      var callerCache = cr(null);
      var getterCache = cr(null);
      callerCache[" size"] = getterCache[" size"] = 0;
  }
  
  module.exports = function(Promise) {
  var util = _dereq_("./util");
  var canEvaluate = util.canEvaluate;
  var isIdentifier = util.isIdentifier;
  
  var getMethodCaller;
  var getGetter;
  if (!true) {
  var makeMethodCaller = function (methodName) {
      return new Function("ensureMethod", "                                    \n\
          return function(obj) {                                               \n\
              'use strict'                                                     \n\
              var len = this.length;                                           \n\
              ensureMethod(obj, 'methodName');                                 \n\
              switch(len) {                                                    \n\
                  case 1: return obj.methodName(this[0]);                      \n\
                  case 2: return obj.methodName(this[0], this[1]);             \n\
                  case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                  case 0: return obj.methodName();                             \n\
                  default:                                                     \n\
                      return obj.methodName.apply(obj, this);                  \n\
              }                                                                \n\
          };                                                                   \n\
          ".replace(/methodName/g, methodName))(ensureMethod);
  };
  
  var makeGetter = function (propertyName) {
      return new Function("obj", "                                             \n\
          'use strict';                                                        \n\
          return obj.propertyName;                                             \n\
          ".replace("propertyName", propertyName));
  };
  
  var getCompiled = function(name, compiler, cache) {
      var ret = cache[name];
      if (typeof ret !== "function") {
          if (!isIdentifier(name)) {
              return null;
          }
          ret = compiler(name);
          cache[name] = ret;
          cache[" size"]++;
          if (cache[" size"] > 512) {
              var keys = Object.keys(cache);
              for (var i = 0; i < 256; ++i) delete cache[keys[i]];
              cache[" size"] = keys.length - 256;
          }
      }
      return ret;
  };
  
  getMethodCaller = function(name) {
      return getCompiled(name, makeMethodCaller, callerCache);
  };
  
  getGetter = function(name) {
      return getCompiled(name, makeGetter, getterCache);
  };
  }
  
  function ensureMethod(obj, methodName) {
      var fn;
      if (obj != null) fn = obj[methodName];
      if (typeof fn !== "function") {
          var message = "Object " + util.classString(obj) + " has no method '" +
              util.toString(methodName) + "'";
          throw new Promise.TypeError(message);
      }
      return fn;
  }
  
  function caller(obj) {
      var methodName = this.pop();
      var fn = ensureMethod(obj, methodName);
      return fn.apply(obj, this);
  }
  Promise.prototype.call = function (methodName) {
      var args = [].slice.call(arguments, 1);;
      if (!true) {
          if (canEvaluate) {
              var maybeCaller = getMethodCaller(methodName);
              if (maybeCaller !== null) {
                  return this._then(
                      maybeCaller, undefined, undefined, args, undefined);
              }
          }
      }
      args.push(methodName);
      return this._then(caller, undefined, undefined, args, undefined);
  };
  
  function namedGetter(obj) {
      return obj[this];
  }
  function indexedGetter(obj) {
      var index = +this;
      if (index < 0) index = Math.max(0, index + obj.length);
      return obj[index];
  }
  Promise.prototype.get = function (propertyName) {
      var isIndex = (typeof propertyName === "number");
      var getter;
      if (!isIndex) {
          if (canEvaluate) {
              var maybeGetter = getGetter(propertyName);
              getter = maybeGetter !== null ? maybeGetter : namedGetter;
          } else {
              getter = namedGetter;
          }
      } else {
          getter = indexedGetter;
      }
      return this._then(getter, undefined, undefined, propertyName, undefined);
  };
  };
  
  },{"./util":36}],6:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, PromiseArray, apiRejection, debug) {
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var async = Promise._async;
  
  Promise.prototype["break"] = Promise.prototype.cancel = function() {
      if (!debug.cancellation()) return this._warn("cancellation is disabled");
  
      var promise = this;
      var child = promise;
      while (promise._isCancellable()) {
          if (!promise._cancelBy(child)) {
              if (child._isFollowing()) {
                  child._followee().cancel();
              } else {
                  child._cancelBranched();
              }
              break;
          }
  
          var parent = promise._cancellationParent;
          if (parent == null || !parent._isCancellable()) {
              if (promise._isFollowing()) {
                  promise._followee().cancel();
              } else {
                  promise._cancelBranched();
              }
              break;
          } else {
              if (promise._isFollowing()) promise._followee().cancel();
              promise._setWillBeCancelled();
              child = promise;
              promise = parent;
          }
      }
  };
  
  Promise.prototype._branchHasCancelled = function() {
      this._branchesRemainingToCancel--;
  };
  
  Promise.prototype._enoughBranchesHaveCancelled = function() {
      return this._branchesRemainingToCancel === undefined ||
             this._branchesRemainingToCancel <= 0;
  };
  
  Promise.prototype._cancelBy = function(canceller) {
      if (canceller === this) {
          this._branchesRemainingToCancel = 0;
          this._invokeOnCancel();
          return true;
      } else {
          this._branchHasCancelled();
          if (this._enoughBranchesHaveCancelled()) {
              this._invokeOnCancel();
              return true;
          }
      }
      return false;
  };
  
  Promise.prototype._cancelBranched = function() {
      if (this._enoughBranchesHaveCancelled()) {
          this._cancel();
      }
  };
  
  Promise.prototype._cancel = function() {
      if (!this._isCancellable()) return;
      this._setCancelled();
      async.invoke(this._cancelPromises, this, undefined);
  };
  
  Promise.prototype._cancelPromises = function() {
      if (this._length() > 0) this._settlePromises();
  };
  
  Promise.prototype._unsetOnCancel = function() {
      this._onCancelField = undefined;
  };
  
  Promise.prototype._isCancellable = function() {
      return this.isPending() && !this._isCancelled();
  };
  
  Promise.prototype.isCancellable = function() {
      return this.isPending() && !this.isCancelled();
  };
  
  Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
      if (util.isArray(onCancelCallback)) {
          for (var i = 0; i < onCancelCallback.length; ++i) {
              this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
          }
      } else if (onCancelCallback !== undefined) {
          if (typeof onCancelCallback === "function") {
              if (!internalOnly) {
                  var e = tryCatch(onCancelCallback).call(this._boundValue());
                  if (e === errorObj) {
                      this._attachExtraTrace(e.e);
                      async.throwLater(e.e);
                  }
              }
          } else {
              onCancelCallback._resultCancelled(this);
          }
      }
  };
  
  Promise.prototype._invokeOnCancel = function() {
      var onCancelCallback = this._onCancel();
      this._unsetOnCancel();
      async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
  };
  
  Promise.prototype._invokeInternalOnCancel = function() {
      if (this._isCancellable()) {
          this._doInvokeOnCancel(this._onCancel(), true);
          this._unsetOnCancel();
      }
  };
  
  Promise.prototype._resultCancelled = function() {
      this.cancel();
  };
  
  };
  
  },{"./util":36}],7:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(NEXT_FILTER) {
  var util = _dereq_("./util");
  var getKeys = _dereq_("./es5").keys;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  
  function catchFilter(instances, cb, promise) {
      return function(e) {
          var boundTo = promise._boundValue();
          predicateLoop: for (var i = 0; i < instances.length; ++i) {
              var item = instances[i];
  
              if (item === Error ||
                  (item != null && item.prototype instanceof Error)) {
                  if (e instanceof item) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (typeof item === "function") {
                  var matchesPredicate = tryCatch(item).call(boundTo, e);
                  if (matchesPredicate === errorObj) {
                      return matchesPredicate;
                  } else if (matchesPredicate) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (util.isObject(e)) {
                  var keys = getKeys(item);
                  for (var j = 0; j < keys.length; ++j) {
                      var key = keys[j];
                      if (item[key] != e[key]) {
                          continue predicateLoop;
                      }
                  }
                  return tryCatch(cb).call(boundTo, e);
              }
          }
          return NEXT_FILTER;
      };
  }
  
  return catchFilter;
  };
  
  },{"./es5":13,"./util":36}],8:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  var longStackTraces = false;
  var contextStack = [];
  
  Promise.prototype._promiseCreated = function() {};
  Promise.prototype._pushContext = function() {};
  Promise.prototype._popContext = function() {return null;};
  Promise._peekContext = Promise.prototype._peekContext = function() {};
  
  function Context() {
      this._trace = new Context.CapturedTrace(peekContext());
  }
  Context.prototype._pushContext = function () {
      if (this._trace !== undefined) {
          this._trace._promiseCreated = null;
          contextStack.push(this._trace);
      }
  };
  
  Context.prototype._popContext = function () {
      if (this._trace !== undefined) {
          var trace = contextStack.pop();
          var ret = trace._promiseCreated;
          trace._promiseCreated = null;
          return ret;
      }
      return null;
  };
  
  function createContext() {
      if (longStackTraces) return new Context();
  }
  
  function peekContext() {
      var lastIndex = contextStack.length - 1;
      if (lastIndex >= 0) {
          return contextStack[lastIndex];
      }
      return undefined;
  }
  Context.CapturedTrace = null;
  Context.create = createContext;
  Context.deactivateLongStackTraces = function() {};
  Context.activateLongStackTraces = function() {
      var Promise_pushContext = Promise.prototype._pushContext;
      var Promise_popContext = Promise.prototype._popContext;
      var Promise_PeekContext = Promise._peekContext;
      var Promise_peekContext = Promise.prototype._peekContext;
      var Promise_promiseCreated = Promise.prototype._promiseCreated;
      Context.deactivateLongStackTraces = function() {
          Promise.prototype._pushContext = Promise_pushContext;
          Promise.prototype._popContext = Promise_popContext;
          Promise._peekContext = Promise_PeekContext;
          Promise.prototype._peekContext = Promise_peekContext;
          Promise.prototype._promiseCreated = Promise_promiseCreated;
          longStackTraces = false;
      };
      longStackTraces = true;
      Promise.prototype._pushContext = Context.prototype._pushContext;
      Promise.prototype._popContext = Context.prototype._popContext;
      Promise._peekContext = Promise.prototype._peekContext = peekContext;
      Promise.prototype._promiseCreated = function() {
          var ctx = this._peekContext();
          if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
      };
  };
  return Context;
  };
  
  },{}],9:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, Context) {
  var getDomain = Promise._getDomain;
  var async = Promise._async;
  var Warning = _dereq_("./errors").Warning;
  var util = _dereq_("./util");
  var canAttachTrace = util.canAttachTrace;
  var unhandledRejectionHandled;
  var possiblyUnhandledRejection;
  var bluebirdFramePattern =
      /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
  var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
  var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
  var stackFramePattern = null;
  var formatStack = null;
  var indentStackFrames = false;
  var printWarning;
  var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                          (true ||
                           util.env("BLUEBIRD_DEBUG") ||
                           util.env("NODE_ENV") === "development"));
  
  var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
      (debugging || util.env("BLUEBIRD_WARNINGS")));
  
  var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
      (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));
  
  var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
      (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
  
  Promise.prototype.suppressUnhandledRejections = function() {
      var target = this._target();
      target._bitField = ((target._bitField & (~1048576)) |
                        524288);
  };
  
  Promise.prototype._ensurePossibleRejectionHandled = function () {
      if ((this._bitField & 524288) !== 0) return;
      this._setRejectionIsUnhandled();
      async.invokeLater(this._notifyUnhandledRejection, this, undefined);
  };
  
  Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
      fireRejectionEvent("rejectionHandled",
                                    unhandledRejectionHandled, undefined, this);
  };
  
  Promise.prototype._setReturnedNonUndefined = function() {
      this._bitField = this._bitField | 268435456;
  };
  
  Promise.prototype._returnedNonUndefined = function() {
      return (this._bitField & 268435456) !== 0;
  };
  
  Promise.prototype._notifyUnhandledRejection = function () {
      if (this._isRejectionUnhandled()) {
          var reason = this._settledValue();
          this._setUnhandledRejectionIsNotified();
          fireRejectionEvent("unhandledRejection",
                                        possiblyUnhandledRejection, reason, this);
      }
  };
  
  Promise.prototype._setUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField | 262144;
  };
  
  Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField & (~262144);
  };
  
  Promise.prototype._isUnhandledRejectionNotified = function () {
      return (this._bitField & 262144) > 0;
  };
  
  Promise.prototype._setRejectionIsUnhandled = function () {
      this._bitField = this._bitField | 1048576;
  };
  
  Promise.prototype._unsetRejectionIsUnhandled = function () {
      this._bitField = this._bitField & (~1048576);
      if (this._isUnhandledRejectionNotified()) {
          this._unsetUnhandledRejectionIsNotified();
          this._notifyUnhandledRejectionIsHandled();
      }
  };
  
  Promise.prototype._isRejectionUnhandled = function () {
      return (this._bitField & 1048576) > 0;
  };
  
  Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
      return warn(message, shouldUseOwnTrace, promise || this);
  };
  
  Promise.onPossiblyUnhandledRejection = function (fn) {
      var domain = getDomain();
      possiblyUnhandledRejection =
          typeof fn === "function" ? (domain === null ?
                                              fn : util.domainBind(domain, fn))
                                   : undefined;
  };
  
  Promise.onUnhandledRejectionHandled = function (fn) {
      var domain = getDomain();
      unhandledRejectionHandled =
          typeof fn === "function" ? (domain === null ?
                                              fn : util.domainBind(domain, fn))
                                   : undefined;
  };
  
  var disableLongStackTraces = function() {};
  Promise.longStackTraces = function () {
      if (async.haveItemsQueued() && !config.longStackTraces) {
          throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      if (!config.longStackTraces && longStackTracesIsSupported()) {
          var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
          var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
          config.longStackTraces = true;
          disableLongStackTraces = function() {
              if (async.haveItemsQueued() && !config.longStackTraces) {
                  throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
              }
              Promise.prototype._captureStackTrace = Promise_captureStackTrace;
              Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
              Context.deactivateLongStackTraces();
              async.enableTrampoline();
              config.longStackTraces = false;
          };
          Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
          Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
          Context.activateLongStackTraces();
          async.disableTrampolineIfNecessary();
      }
  };
  
  Promise.hasLongStackTraces = function () {
      return config.longStackTraces && longStackTracesIsSupported();
  };
  
  var fireDomEvent = (function() {
      try {
          if (typeof CustomEvent === "function") {
              var event = new CustomEvent("CustomEvent");
              util.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = new CustomEvent(name.toLowerCase(), {
                      detail: event,
                      cancelable: true
                  });
                  return !util.global.dispatchEvent(domEvent);
              };
          } else if (typeof Event === "function") {
              var event = new Event("CustomEvent");
              util.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = new Event(name.toLowerCase(), {
                      cancelable: true
                  });
                  domEvent.detail = event;
                  return !util.global.dispatchEvent(domEvent);
              };
          } else {
              var event = document.createEvent("CustomEvent");
              event.initCustomEvent("testingtheevent", false, true, {});
              util.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = document.createEvent("CustomEvent");
                  domEvent.initCustomEvent(name.toLowerCase(), false, true,
                      event);
                  return !util.global.dispatchEvent(domEvent);
              };
          }
      } catch (e) {}
      return function() {
          return false;
      };
  })();
  
  var fireGlobalEvent = (function() {
      if (util.isNode) {
          return function() {
              return process.emit.apply(process, arguments);
          };
      } else {
          if (!util.global) {
              return function() {
                  return false;
              };
          }
          return function(name) {
              var methodName = "on" + name.toLowerCase();
              var method = util.global[methodName];
              if (!method) return false;
              method.apply(util.global, [].slice.call(arguments, 1));
              return true;
          };
      }
  })();
  
  function generatePromiseLifecycleEventObject(name, promise) {
      return {promise: promise};
  }
  
  var eventToObjectGenerator = {
      promiseCreated: generatePromiseLifecycleEventObject,
      promiseFulfilled: generatePromiseLifecycleEventObject,
      promiseRejected: generatePromiseLifecycleEventObject,
      promiseResolved: generatePromiseLifecycleEventObject,
      promiseCancelled: generatePromiseLifecycleEventObject,
      promiseChained: function(name, promise, child) {
          return {promise: promise, child: child};
      },
      warning: function(name, warning) {
          return {warning: warning};
      },
      unhandledRejection: function (name, reason, promise) {
          return {reason: reason, promise: promise};
      },
      rejectionHandled: generatePromiseLifecycleEventObject
  };
  
  var activeFireEvent = function (name) {
      var globalEventFired = false;
      try {
          globalEventFired = fireGlobalEvent.apply(null, arguments);
      } catch (e) {
          async.throwLater(e);
          globalEventFired = true;
      }
  
      var domEventFired = false;
      try {
          domEventFired = fireDomEvent(name,
                      eventToObjectGenerator[name].apply(null, arguments));
      } catch (e) {
          async.throwLater(e);
          domEventFired = true;
      }
  
      return domEventFired || globalEventFired;
  };
  
  Promise.config = function(opts) {
      opts = Object(opts);
      if ("longStackTraces" in opts) {
          if (opts.longStackTraces) {
              Promise.longStackTraces();
          } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
              disableLongStackTraces();
          }
      }
      if ("warnings" in opts) {
          var warningsOption = opts.warnings;
          config.warnings = !!warningsOption;
          wForgottenReturn = config.warnings;
  
          if (util.isObject(warningsOption)) {
              if ("wForgottenReturn" in warningsOption) {
                  wForgottenReturn = !!warningsOption.wForgottenReturn;
              }
          }
      }
      if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
          if (async.haveItemsQueued()) {
              throw new Error(
                  "cannot enable cancellation after promises are in use");
          }
          Promise.prototype._clearCancellationData =
              cancellationClearCancellationData;
          Promise.prototype._propagateFrom = cancellationPropagateFrom;
          Promise.prototype._onCancel = cancellationOnCancel;
          Promise.prototype._setOnCancel = cancellationSetOnCancel;
          Promise.prototype._attachCancellationCallback =
              cancellationAttachCancellationCallback;
          Promise.prototype._execute = cancellationExecute;
          propagateFromFunction = cancellationPropagateFrom;
          config.cancellation = true;
      }
      if ("monitoring" in opts) {
          if (opts.monitoring && !config.monitoring) {
              config.monitoring = true;
              Promise.prototype._fireEvent = activeFireEvent;
          } else if (!opts.monitoring && config.monitoring) {
              config.monitoring = false;
              Promise.prototype._fireEvent = defaultFireEvent;
          }
      }
      return Promise;
  };
  
  function defaultFireEvent() { return false; }
  
  Promise.prototype._fireEvent = defaultFireEvent;
  Promise.prototype._execute = function(executor, resolve, reject) {
      try {
          executor(resolve, reject);
      } catch (e) {
          return e;
      }
  };
  Promise.prototype._onCancel = function () {};
  Promise.prototype._setOnCancel = function (handler) { ; };
  Promise.prototype._attachCancellationCallback = function(onCancel) {
      ;
  };
  Promise.prototype._captureStackTrace = function () {};
  Promise.prototype._attachExtraTrace = function () {};
  Promise.prototype._clearCancellationData = function() {};
  Promise.prototype._propagateFrom = function (parent, flags) {
      ;
      ;
  };
  
  function cancellationExecute(executor, resolve, reject) {
      var promise = this;
      try {
          executor(resolve, reject, function(onCancel) {
              if (typeof onCancel !== "function") {
                  throw new TypeError("onCancel must be a function, got: " +
                                      util.toString(onCancel));
              }
              promise._attachCancellationCallback(onCancel);
          });
      } catch (e) {
          return e;
      }
  }
  
  function cancellationAttachCancellationCallback(onCancel) {
      if (!this._isCancellable()) return this;
  
      var previousOnCancel = this._onCancel();
      if (previousOnCancel !== undefined) {
          if (util.isArray(previousOnCancel)) {
              previousOnCancel.push(onCancel);
          } else {
              this._setOnCancel([previousOnCancel, onCancel]);
          }
      } else {
          this._setOnCancel(onCancel);
      }
  }
  
  function cancellationOnCancel() {
      return this._onCancelField;
  }
  
  function cancellationSetOnCancel(onCancel) {
      this._onCancelField = onCancel;
  }
  
  function cancellationClearCancellationData() {
      this._cancellationParent = undefined;
      this._onCancelField = undefined;
  }
  
  function cancellationPropagateFrom(parent, flags) {
      if ((flags & 1) !== 0) {
          this._cancellationParent = parent;
          var branchesRemainingToCancel = parent._branchesRemainingToCancel;
          if (branchesRemainingToCancel === undefined) {
              branchesRemainingToCancel = 0;
          }
          parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
      }
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }
  
  function bindingPropagateFrom(parent, flags) {
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }
  var propagateFromFunction = bindingPropagateFrom;
  
  function boundValueFunction() {
      var ret = this._boundTo;
      if (ret !== undefined) {
          if (ret instanceof Promise) {
              if (ret.isFulfilled()) {
                  return ret.value();
              } else {
                  return undefined;
              }
          }
      }
      return ret;
  }
  
  function longStackTracesCaptureStackTrace() {
      this._trace = new CapturedTrace(this._peekContext());
  }
  
  function longStackTracesAttachExtraTrace(error, ignoreSelf) {
      if (canAttachTrace(error)) {
          var trace = this._trace;
          if (trace !== undefined) {
              if (ignoreSelf) trace = trace._parent;
          }
          if (trace !== undefined) {
              trace.attachExtraTrace(error);
          } else if (!error.__stackCleaned__) {
              var parsed = parseStackAndMessage(error);
              util.notEnumerableProp(error, "stack",
                  parsed.message + "\n" + parsed.stack.join("\n"));
              util.notEnumerableProp(error, "__stackCleaned__", true);
          }
      }
  }
  
  function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                                 parent) {
      if (returnValue === undefined && promiseCreated !== null &&
          wForgottenReturn) {
          if (parent !== undefined && parent._returnedNonUndefined()) return;
          if ((promise._bitField & 65535) === 0) return;
  
          if (name) name = name + " ";
          var handlerLine = "";
          var creatorLine = "";
          if (promiseCreated._trace) {
              var traceLines = promiseCreated._trace.stack.split("\n");
              var stack = cleanStack(traceLines);
              for (var i = stack.length - 1; i >= 0; --i) {
                  var line = stack[i];
                  if (!nodeFramePattern.test(line)) {
                      var lineMatches = line.match(parseLinePattern);
                      if (lineMatches) {
                          handlerLine  = "at " + lineMatches[1] +
                              ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                      }
                      break;
                  }
              }
  
              if (stack.length > 0) {
                  var firstUserLine = stack[0];
                  for (var i = 0; i < traceLines.length; ++i) {
  
                      if (traceLines[i] === firstUserLine) {
                          if (i > 0) {
                              creatorLine = "\n" + traceLines[i - 1];
                          }
                          break;
                      }
                  }
  
              }
          }
          var msg = "a promise was created in a " + name +
              "handler " + handlerLine + "but was not returned from it, " +
              "see http://goo.gl/rRqMUw" +
              creatorLine;
          promise._warn(msg, true, promiseCreated);
      }
  }
  
  function deprecated(name, replacement) {
      var message = name +
          " is deprecated and will be removed in a future version.";
      if (replacement) message += " Use " + replacement + " instead.";
      return warn(message);
  }
  
  function warn(message, shouldUseOwnTrace, promise) {
      if (!config.warnings) return;
      var warning = new Warning(message);
      var ctx;
      if (shouldUseOwnTrace) {
          promise._attachExtraTrace(warning);
      } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
          ctx.attachExtraTrace(warning);
      } else {
          var parsed = parseStackAndMessage(warning);
          warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
      }
  
      if (!activeFireEvent("warning", warning)) {
          formatAndLogError(warning, "", true);
      }
  }
  
  function reconstructStack(message, stacks) {
      for (var i = 0; i < stacks.length - 1; ++i) {
          stacks[i].push("From previous event:");
          stacks[i] = stacks[i].join("\n");
      }
      if (i < stacks.length) {
          stacks[i] = stacks[i].join("\n");
      }
      return message + "\n" + stacks.join("\n");
  }
  
  function removeDuplicateOrEmptyJumps(stacks) {
      for (var i = 0; i < stacks.length; ++i) {
          if (stacks[i].length === 0 ||
              ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
              stacks.splice(i, 1);
              i--;
          }
      }
  }
  
  function removeCommonRoots(stacks) {
      var current = stacks[0];
      for (var i = 1; i < stacks.length; ++i) {
          var prev = stacks[i];
          var currentLastIndex = current.length - 1;
          var currentLastLine = current[currentLastIndex];
          var commonRootMeetPoint = -1;
  
          for (var j = prev.length - 1; j >= 0; --j) {
              if (prev[j] === currentLastLine) {
                  commonRootMeetPoint = j;
                  break;
              }
          }
  
          for (var j = commonRootMeetPoint; j >= 0; --j) {
              var line = prev[j];
              if (current[currentLastIndex] === line) {
                  current.pop();
                  currentLastIndex--;
              } else {
                  break;
              }
          }
          current = prev;
      }
  }
  
  function cleanStack(stack) {
      var ret = [];
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          var isTraceLine = "    (No stack trace)" === line ||
              stackFramePattern.test(line);
          var isInternalFrame = isTraceLine && shouldIgnore(line);
          if (isTraceLine && !isInternalFrame) {
              if (indentStackFrames && line.charAt(0) !== " ") {
                  line = "    " + line;
              }
              ret.push(line);
          }
      }
      return ret;
  }
  
  function stackFramesAsArray(error) {
      var stack = error.stack.replace(/\s+$/g, "").split("\n");
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
              break;
          }
      }
      if (i > 0 && error.name != "SyntaxError") {
          stack = stack.slice(i);
      }
      return stack;
  }
  
  function parseStackAndMessage(error) {
      var stack = error.stack;
      var message = error.toString();
      stack = typeof stack === "string" && stack.length > 0
                  ? stackFramesAsArray(error) : ["    (No stack trace)"];
      return {
          message: message,
          stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
      };
  }
  
  function formatAndLogError(error, title, isSoft) {
      if (typeof console !== "undefined") {
          var message;
          if (util.isObject(error)) {
              var stack = error.stack;
              message = title + formatStack(stack, error);
          } else {
              message = title + String(error);
          }
          if (typeof printWarning === "function") {
              printWarning(message, isSoft);
          } else if (typeof console.log === "function" ||
              typeof console.log === "object") {
              console.log(message);
          }
      }
  }
  
  function fireRejectionEvent(name, localHandler, reason, promise) {
      var localEventFired = false;
      try {
          if (typeof localHandler === "function") {
              localEventFired = true;
              if (name === "rejectionHandled") {
                  localHandler(promise);
              } else {
                  localHandler(reason, promise);
              }
          }
      } catch (e) {
          async.throwLater(e);
      }
  
      if (name === "unhandledRejection") {
          if (!activeFireEvent(name, reason, promise) && !localEventFired) {
              formatAndLogError(reason, "Unhandled rejection ");
          }
      } else {
          activeFireEvent(name, promise);
      }
  }
  
  function formatNonError(obj) {
      var str;
      if (typeof obj === "function") {
          str = "[function " +
              (obj.name || "anonymous") +
              "]";
      } else {
          str = obj && typeof obj.toString === "function"
              ? obj.toString() : util.toString(obj);
          var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
          if (ruselessToString.test(str)) {
              try {
                  var newStr = JSON.stringify(obj);
                  str = newStr;
              }
              catch(e) {
  
              }
          }
          if (str.length === 0) {
              str = "(empty array)";
          }
      }
      return ("(<" + snip(str) + ">, no stack trace)");
  }
  
  function snip(str) {
      var maxChars = 41;
      if (str.length < maxChars) {
          return str;
      }
      return str.substr(0, maxChars - 3) + "...";
  }
  
  function longStackTracesIsSupported() {
      return typeof captureStackTrace === "function";
  }
  
  var shouldIgnore = function() { return false; };
  var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
  function parseLineInfo(line) {
      var matches = line.match(parseLineInfoRegex);
      if (matches) {
          return {
              fileName: matches[1],
              line: parseInt(matches[2], 10)
          };
      }
  }
  
  function setBounds(firstLineError, lastLineError) {
      if (!longStackTracesIsSupported()) return;
      var firstStackLines = firstLineError.stack.split("\n");
      var lastStackLines = lastLineError.stack.split("\n");
      var firstIndex = -1;
      var lastIndex = -1;
      var firstFileName;
      var lastFileName;
      for (var i = 0; i < firstStackLines.length; ++i) {
          var result = parseLineInfo(firstStackLines[i]);
          if (result) {
              firstFileName = result.fileName;
              firstIndex = result.line;
              break;
          }
      }
      for (var i = 0; i < lastStackLines.length; ++i) {
          var result = parseLineInfo(lastStackLines[i]);
          if (result) {
              lastFileName = result.fileName;
              lastIndex = result.line;
              break;
          }
      }
      if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
          firstFileName !== lastFileName || firstIndex >= lastIndex) {
          return;
      }
  
      shouldIgnore = function(line) {
          if (bluebirdFramePattern.test(line)) return true;
          var info = parseLineInfo(line);
          if (info) {
              if (info.fileName === firstFileName &&
                  (firstIndex <= info.line && info.line <= lastIndex)) {
                  return true;
              }
          }
          return false;
      };
  }
  
  function CapturedTrace(parent) {
      this._parent = parent;
      this._promisesCreated = 0;
      var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
      captureStackTrace(this, CapturedTrace);
      if (length > 32) this.uncycle();
  }
  util.inherits(CapturedTrace, Error);
  Context.CapturedTrace = CapturedTrace;
  
  CapturedTrace.prototype.uncycle = function() {
      var length = this._length;
      if (length < 2) return;
      var nodes = [];
      var stackToIndex = {};
  
      for (var i = 0, node = this; node !== undefined; ++i) {
          nodes.push(node);
          node = node._parent;
      }
      length = this._length = i;
      for (var i = length - 1; i >= 0; --i) {
          var stack = nodes[i].stack;
          if (stackToIndex[stack] === undefined) {
              stackToIndex[stack] = i;
          }
      }
      for (var i = 0; i < length; ++i) {
          var currentStack = nodes[i].stack;
          var index = stackToIndex[currentStack];
          if (index !== undefined && index !== i) {
              if (index > 0) {
                  nodes[index - 1]._parent = undefined;
                  nodes[index - 1]._length = 1;
              }
              nodes[i]._parent = undefined;
              nodes[i]._length = 1;
              var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
  
              if (index < length - 1) {
                  cycleEdgeNode._parent = nodes[index + 1];
                  cycleEdgeNode._parent.uncycle();
                  cycleEdgeNode._length =
                      cycleEdgeNode._parent._length + 1;
              } else {
                  cycleEdgeNode._parent = undefined;
                  cycleEdgeNode._length = 1;
              }
              var currentChildLength = cycleEdgeNode._length + 1;
              for (var j = i - 2; j >= 0; --j) {
                  nodes[j]._length = currentChildLength;
                  currentChildLength++;
              }
              return;
          }
      }
  };
  
  CapturedTrace.prototype.attachExtraTrace = function(error) {
      if (error.__stackCleaned__) return;
      this.uncycle();
      var parsed = parseStackAndMessage(error);
      var message = parsed.message;
      var stacks = [parsed.stack];
  
      var trace = this;
      while (trace !== undefined) {
          stacks.push(cleanStack(trace.stack.split("\n")));
          trace = trace._parent;
      }
      removeCommonRoots(stacks);
      removeDuplicateOrEmptyJumps(stacks);
      util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
      util.notEnumerableProp(error, "__stackCleaned__", true);
  };
  
  var captureStackTrace = (function stackDetection() {
      var v8stackFramePattern = /^\s*at\s*/;
      var v8stackFormatter = function(stack, error) {
          if (typeof stack === "string") return stack;
  
          if (error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };
  
      if (typeof Error.stackTraceLimit === "number" &&
          typeof Error.captureStackTrace === "function") {
          Error.stackTraceLimit += 6;
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          var captureStackTrace = Error.captureStackTrace;
  
          shouldIgnore = function(line) {
              return bluebirdFramePattern.test(line);
          };
          return function(receiver, ignoreUntil) {
              Error.stackTraceLimit += 6;
              captureStackTrace(receiver, ignoreUntil);
              Error.stackTraceLimit -= 6;
          };
      }
      var err = new Error();
  
      if (typeof err.stack === "string" &&
          err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
          stackFramePattern = /@/;
          formatStack = v8stackFormatter;
          indentStackFrames = true;
          return function captureStackTrace(o) {
              o.stack = new Error().stack;
          };
      }
  
      var hasStackAfterThrow;
      try { throw new Error(); }
      catch(e) {
          hasStackAfterThrow = ("stack" in e);
      }
      if (!("stack" in err) && hasStackAfterThrow &&
          typeof Error.stackTraceLimit === "number") {
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          return function captureStackTrace(o) {
              Error.stackTraceLimit += 6;
              try { throw new Error(); }
              catch(e) { o.stack = e.stack; }
              Error.stackTraceLimit -= 6;
          };
      }
  
      formatStack = function(stack, error) {
          if (typeof stack === "string") return stack;
  
          if ((typeof error === "object" ||
              typeof error === "function") &&
              error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };
  
      return null;
  
  })([]);
  
  if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
      printWarning = function (message) {
          console.warn(message);
      };
      if (util.isNode && process.stderr.isTTY) {
          printWarning = function(message, isSoft) {
              var color = isSoft ? "\u001b[33m" : "\u001b[31m";
              console.warn(color + message + "\u001b[0m\n");
          };
      } else if (!util.isNode && typeof (new Error().stack) === "string") {
          printWarning = function(message, isSoft) {
              console.warn("%c" + message,
                          isSoft ? "color: darkorange" : "color: red");
          };
      }
  }
  
  var config = {
      warnings: warnings,
      longStackTraces: false,
      cancellation: false,
      monitoring: false
  };
  
  if (longStackTraces) Promise.longStackTraces();
  
  return {
      longStackTraces: function() {
          return config.longStackTraces;
      },
      warnings: function() {
          return config.warnings;
      },
      cancellation: function() {
          return config.cancellation;
      },
      monitoring: function() {
          return config.monitoring;
      },
      propagateFromFunction: function() {
          return propagateFromFunction;
      },
      boundValueFunction: function() {
          return boundValueFunction;
      },
      checkForgottenReturns: checkForgottenReturns,
      setBounds: setBounds,
      warn: warn,
      deprecated: deprecated,
      CapturedTrace: CapturedTrace,
      fireDomEvent: fireDomEvent,
      fireGlobalEvent: fireGlobalEvent
  };
  };
  
  },{"./errors":12,"./util":36}],10:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  function returner() {
      return this.value;
  }
  function thrower() {
      throw this.reason;
  }
  
  Promise.prototype["return"] =
  Promise.prototype.thenReturn = function (value) {
      if (value instanceof Promise) value.suppressUnhandledRejections();
      return this._then(
          returner, undefined, undefined, {value: value}, undefined);
  };
  
  Promise.prototype["throw"] =
  Promise.prototype.thenThrow = function (reason) {
      return this._then(
          thrower, undefined, undefined, {reason: reason}, undefined);
  };
  
  Promise.prototype.catchThrow = function (reason) {
      if (arguments.length <= 1) {
          return this._then(
              undefined, thrower, undefined, {reason: reason}, undefined);
      } else {
          var _reason = arguments[1];
          var handler = function() {throw _reason;};
          return this.caught(reason, handler);
      }
  };
  
  Promise.prototype.catchReturn = function (value) {
      if (arguments.length <= 1) {
          if (value instanceof Promise) value.suppressUnhandledRejections();
          return this._then(
              undefined, returner, undefined, {value: value}, undefined);
      } else {
          var _value = arguments[1];
          if (_value instanceof Promise) _value.suppressUnhandledRejections();
          var handler = function() {return _value;};
          return this.caught(value, handler);
      }
  };
  };
  
  },{}],11:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var PromiseReduce = Promise.reduce;
  var PromiseAll = Promise.all;
  
  function promiseAllThis() {
      return PromiseAll(this);
  }
  
  function PromiseMapSeries(promises, fn) {
      return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
  }
  
  Promise.prototype.each = function (fn) {
      return PromiseReduce(this, fn, INTERNAL, 0)
                ._then(promiseAllThis, undefined, undefined, this, undefined);
  };
  
  Promise.prototype.mapSeries = function (fn) {
      return PromiseReduce(this, fn, INTERNAL, INTERNAL);
  };
  
  Promise.each = function (promises, fn) {
      return PromiseReduce(promises, fn, INTERNAL, 0)
                ._then(promiseAllThis, undefined, undefined, promises, undefined);
  };
  
  Promise.mapSeries = PromiseMapSeries;
  };
  
  
  },{}],12:[function(_dereq_,module,exports){
  "use strict";
  var es5 = _dereq_("./es5");
  var Objectfreeze = es5.freeze;
  var util = _dereq_("./util");
  var inherits = util.inherits;
  var notEnumerableProp = util.notEnumerableProp;
  
  function subError(nameProperty, defaultMessage) {
      function SubError(message) {
          if (!(this instanceof SubError)) return new SubError(message);
          notEnumerableProp(this, "message",
              typeof message === "string" ? message : defaultMessage);
          notEnumerableProp(this, "name", nameProperty);
          if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
          } else {
              Error.call(this);
          }
      }
      inherits(SubError, Error);
      return SubError;
  }
  
  var _TypeError, _RangeError;
  var Warning = subError("Warning", "warning");
  var CancellationError = subError("CancellationError", "cancellation error");
  var TimeoutError = subError("TimeoutError", "timeout error");
  var AggregateError = subError("AggregateError", "aggregate error");
  try {
      _TypeError = TypeError;
      _RangeError = RangeError;
  } catch(e) {
      _TypeError = subError("TypeError", "type error");
      _RangeError = subError("RangeError", "range error");
  }
  
  var methods = ("join pop push shift unshift slice filter forEach some " +
      "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");
  
  for (var i = 0; i < methods.length; ++i) {
      if (typeof Array.prototype[methods[i]] === "function") {
          AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
      }
  }
  
  es5.defineProperty(AggregateError.prototype, "length", {
      value: 0,
      configurable: false,
      writable: true,
      enumerable: true
  });
  AggregateError.prototype["isOperational"] = true;
  var level = 0;
  AggregateError.prototype.toString = function() {
      var indent = Array(level * 4 + 1).join(" ");
      var ret = "\n" + indent + "AggregateError of:" + "\n";
      level++;
      indent = Array(level * 4 + 1).join(" ");
      for (var i = 0; i < this.length; ++i) {
          var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
          var lines = str.split("\n");
          for (var j = 0; j < lines.length; ++j) {
              lines[j] = indent + lines[j];
          }
          str = lines.join("\n");
          ret += str + "\n";
      }
      level--;
      return ret;
  };
  
  function OperationalError(message) {
      if (!(this instanceof OperationalError))
          return new OperationalError(message);
      notEnumerableProp(this, "name", "OperationalError");
      notEnumerableProp(this, "message", message);
      this.cause = message;
      this["isOperational"] = true;
  
      if (message instanceof Error) {
          notEnumerableProp(this, "message", message.message);
          notEnumerableProp(this, "stack", message.stack);
      } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
      }
  
  }
  inherits(OperationalError, Error);
  
  var errorTypes = Error["__BluebirdErrorTypes__"];
  if (!errorTypes) {
      errorTypes = Objectfreeze({
          CancellationError: CancellationError,
          TimeoutError: TimeoutError,
          OperationalError: OperationalError,
          RejectionError: OperationalError,
          AggregateError: AggregateError
      });
      es5.defineProperty(Error, "__BluebirdErrorTypes__", {
          value: errorTypes,
          writable: false,
          enumerable: false,
          configurable: false
      });
  }
  
  module.exports = {
      Error: Error,
      TypeError: _TypeError,
      RangeError: _RangeError,
      CancellationError: errorTypes.CancellationError,
      OperationalError: errorTypes.OperationalError,
      TimeoutError: errorTypes.TimeoutError,
      AggregateError: errorTypes.AggregateError,
      Warning: Warning
  };
  
  },{"./es5":13,"./util":36}],13:[function(_dereq_,module,exports){
  var isES5 = (function(){
      "use strict";
      return this === undefined;
  })();
  
  if (isES5) {
      module.exports = {
          freeze: Object.freeze,
          defineProperty: Object.defineProperty,
          getDescriptor: Object.getOwnPropertyDescriptor,
          keys: Object.keys,
          names: Object.getOwnPropertyNames,
          getPrototypeOf: Object.getPrototypeOf,
          isArray: Array.isArray,
          isES5: isES5,
          propertyIsWritable: function(obj, prop) {
              var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
              return !!(!descriptor || descriptor.writable || descriptor.set);
          }
      };
  } else {
      var has = {}.hasOwnProperty;
      var str = {}.toString;
      var proto = {}.constructor.prototype;
  
      var ObjectKeys = function (o) {
          var ret = [];
          for (var key in o) {
              if (has.call(o, key)) {
                  ret.push(key);
              }
          }
          return ret;
      };
  
      var ObjectGetDescriptor = function(o, key) {
          return {value: o[key]};
      };
  
      var ObjectDefineProperty = function (o, key, desc) {
          o[key] = desc.value;
          return o;
      };
  
      var ObjectFreeze = function (obj) {
          return obj;
      };
  
      var ObjectGetPrototypeOf = function (obj) {
          try {
              return Object(obj).constructor.prototype;
          }
          catch (e) {
              return proto;
          }
      };
  
      var ArrayIsArray = function (obj) {
          try {
              return str.call(obj) === "[object Array]";
          }
          catch(e) {
              return false;
          }
      };
  
      module.exports = {
          isArray: ArrayIsArray,
          keys: ObjectKeys,
          names: ObjectKeys,
          defineProperty: ObjectDefineProperty,
          getDescriptor: ObjectGetDescriptor,
          freeze: ObjectFreeze,
          getPrototypeOf: ObjectGetPrototypeOf,
          isES5: isES5,
          propertyIsWritable: function() {
              return true;
          }
      };
  }
  
  },{}],14:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var PromiseMap = Promise.map;
  
  Promise.prototype.filter = function (fn, options) {
      return PromiseMap(this, fn, options, INTERNAL);
  };
  
  Promise.filter = function (promises, fn, options) {
      return PromiseMap(promises, fn, options, INTERNAL);
  };
  };
  
  },{}],15:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, tryConvertToPromise, NEXT_FILTER) {
  var util = _dereq_("./util");
  var CancellationError = Promise.CancellationError;
  var errorObj = util.errorObj;
  var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
  
  function PassThroughHandlerContext(promise, type, handler) {
      this.promise = promise;
      this.type = type;
      this.handler = handler;
      this.called = false;
      this.cancelPromise = null;
  }
  
  PassThroughHandlerContext.prototype.isFinallyHandler = function() {
      return this.type === 0;
  };
  
  function FinallyHandlerCancelReaction(finallyHandler) {
      this.finallyHandler = finallyHandler;
  }
  
  FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
      checkCancel(this.finallyHandler);
  };
  
  function checkCancel(ctx, reason) {
      if (ctx.cancelPromise != null) {
          if (arguments.length > 1) {
              ctx.cancelPromise._reject(reason);
          } else {
              ctx.cancelPromise._cancel();
          }
          ctx.cancelPromise = null;
          return true;
      }
      return false;
  }
  
  function succeed() {
      return finallyHandler.call(this, this.promise._target()._settledValue());
  }
  function fail(reason) {
      if (checkCancel(this, reason)) return;
      errorObj.e = reason;
      return errorObj;
  }
  function finallyHandler(reasonOrValue) {
      var promise = this.promise;
      var handler = this.handler;
  
      if (!this.called) {
          this.called = true;
          var ret = this.isFinallyHandler()
              ? handler.call(promise._boundValue())
              : handler.call(promise._boundValue(), reasonOrValue);
          if (ret === NEXT_FILTER) {
              return ret;
          } else if (ret !== undefined) {
              promise._setReturnedNonUndefined();
              var maybePromise = tryConvertToPromise(ret, promise);
              if (maybePromise instanceof Promise) {
                  if (this.cancelPromise != null) {
                      if (maybePromise._isCancelled()) {
                          var reason =
                              new CancellationError("late cancellation observer");
                          promise._attachExtraTrace(reason);
                          errorObj.e = reason;
                          return errorObj;
                      } else if (maybePromise.isPending()) {
                          maybePromise._attachCancellationCallback(
                              new FinallyHandlerCancelReaction(this));
                      }
                  }
                  return maybePromise._then(
                      succeed, fail, undefined, this, undefined);
              }
          }
      }
  
      if (promise.isRejected()) {
          checkCancel(this);
          errorObj.e = reasonOrValue;
          return errorObj;
      } else {
          checkCancel(this);
          return reasonOrValue;
      }
  }
  
  Promise.prototype._passThrough = function(handler, type, success, fail) {
      if (typeof handler !== "function") return this.then();
      return this._then(success,
                        fail,
                        undefined,
                        new PassThroughHandlerContext(this, type, handler),
                        undefined);
  };
  
  Promise.prototype.lastly =
  Promise.prototype["finally"] = function (handler) {
      return this._passThrough(handler,
                               0,
                               finallyHandler,
                               finallyHandler);
  };
  
  
  Promise.prototype.tap = function (handler) {
      return this._passThrough(handler, 1, finallyHandler);
  };
  
  Promise.prototype.tapCatch = function (handlerOrPredicate) {
      var len = arguments.length;
      if(len === 1) {
          return this._passThrough(handlerOrPredicate,
                                   1,
                                   undefined,
                                   finallyHandler);
      } else {
           var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments[i];
              if (util.isObject(item)) {
                  catchInstances[j++] = item;
              } else {
                  return Promise.reject(new TypeError(
                      "tapCatch statement predicate: "
                      + "expecting an object but got " + util.classString(item)
                  ));
              }
          }
          catchInstances.length = j;
          var handler = arguments[i];
          return this._passThrough(catchFilter(catchInstances, handler, this),
                                   1,
                                   undefined,
                                   finallyHandler);
      }
  
  };
  
  return PassThroughHandlerContext;
  };
  
  },{"./catch_filter":7,"./util":36}],16:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise,
                            apiRejection,
                            INTERNAL,
                            tryConvertToPromise,
                            Proxyable,
                            debug) {
  var errors = _dereq_("./errors");
  var TypeError = errors.TypeError;
  var util = _dereq_("./util");
  var errorObj = util.errorObj;
  var tryCatch = util.tryCatch;
  var yieldHandlers = [];
  
  function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
      for (var i = 0; i < yieldHandlers.length; ++i) {
          traceParent._pushContext();
          var result = tryCatch(yieldHandlers[i])(value);
          traceParent._popContext();
          if (result === errorObj) {
              traceParent._pushContext();
              var ret = Promise.reject(errorObj.e);
              traceParent._popContext();
              return ret;
          }
          var maybePromise = tryConvertToPromise(result, traceParent);
          if (maybePromise instanceof Promise) return maybePromise;
      }
      return null;
  }
  
  function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
      if (debug.cancellation()) {
          var internal = new Promise(INTERNAL);
          var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
          this._promise = internal.lastly(function() {
              return _finallyPromise;
          });
          internal._captureStackTrace();
          internal._setOnCancel(this);
      } else {
          var promise = this._promise = new Promise(INTERNAL);
          promise._captureStackTrace();
      }
      this._stack = stack;
      this._generatorFunction = generatorFunction;
      this._receiver = receiver;
      this._generator = undefined;
      this._yieldHandlers = typeof yieldHandler === "function"
          ? [yieldHandler].concat(yieldHandlers)
          : yieldHandlers;
      this._yieldedPromise = null;
      this._cancellationPhase = false;
  }
  util.inherits(PromiseSpawn, Proxyable);
  
  PromiseSpawn.prototype._isResolved = function() {
      return this._promise === null;
  };
  
  PromiseSpawn.prototype._cleanup = function() {
      this._promise = this._generator = null;
      if (debug.cancellation() && this._finallyPromise !== null) {
          this._finallyPromise._fulfill();
          this._finallyPromise = null;
      }
  };
  
  PromiseSpawn.prototype._promiseCancelled = function() {
      if (this._isResolved()) return;
      var implementsReturn = typeof this._generator["return"] !== "undefined";
  
      var result;
      if (!implementsReturn) {
          var reason = new Promise.CancellationError(
              "generator .return() sentinel");
          Promise.coroutine.returnSentinel = reason;
          this._promise._attachExtraTrace(reason);
          this._promise._pushContext();
          result = tryCatch(this._generator["throw"]).call(this._generator,
                                                           reason);
          this._promise._popContext();
      } else {
          this._promise._pushContext();
          result = tryCatch(this._generator["return"]).call(this._generator,
                                                            undefined);
          this._promise._popContext();
      }
      this._cancellationPhase = true;
      this._yieldedPromise = null;
      this._continue(result);
  };
  
  PromiseSpawn.prototype._promiseFulfilled = function(value) {
      this._yieldedPromise = null;
      this._promise._pushContext();
      var result = tryCatch(this._generator.next).call(this._generator, value);
      this._promise._popContext();
      this._continue(result);
  };
  
  PromiseSpawn.prototype._promiseRejected = function(reason) {
      this._yieldedPromise = null;
      this._promise._attachExtraTrace(reason);
      this._promise._pushContext();
      var result = tryCatch(this._generator["throw"])
          .call(this._generator, reason);
      this._promise._popContext();
      this._continue(result);
  };
  
  PromiseSpawn.prototype._resultCancelled = function() {
      if (this._yieldedPromise instanceof Promise) {
          var promise = this._yieldedPromise;
          this._yieldedPromise = null;
          promise.cancel();
      }
  };
  
  PromiseSpawn.prototype.promise = function () {
      return this._promise;
  };
  
  PromiseSpawn.prototype._run = function () {
      this._generator = this._generatorFunction.call(this._receiver);
      this._receiver =
          this._generatorFunction = undefined;
      this._promiseFulfilled(undefined);
  };
  
  PromiseSpawn.prototype._continue = function (result) {
      var promise = this._promise;
      if (result === errorObj) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._rejectCallback(result.e, false);
          }
      }
  
      var value = result.value;
      if (result.done === true) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._resolveCallback(value);
          }
      } else {
          var maybePromise = tryConvertToPromise(value, this._promise);
          if (!(maybePromise instanceof Promise)) {
              maybePromise =
                  promiseFromYieldHandler(maybePromise,
                                          this._yieldHandlers,
                                          this._promise);
              if (maybePromise === null) {
                  this._promiseRejected(
                      new TypeError(
                          "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", String(value)) +
                          "From coroutine:\u000a" +
                          this._stack.split("\n").slice(1, -7).join("\n")
                      )
                  );
                  return;
              }
          }
          maybePromise = maybePromise._target();
          var bitField = maybePromise._bitField;
          ;
          if (((bitField & 50397184) === 0)) {
              this._yieldedPromise = maybePromise;
              maybePromise._proxy(this, null);
          } else if (((bitField & 33554432) !== 0)) {
              Promise._async.invoke(
                  this._promiseFulfilled, this, maybePromise._value()
              );
          } else if (((bitField & 16777216) !== 0)) {
              Promise._async.invoke(
                  this._promiseRejected, this, maybePromise._reason()
              );
          } else {
              this._promiseCancelled();
          }
      }
  };
  
  Promise.coroutine = function (generatorFunction, options) {
      if (typeof generatorFunction !== "function") {
          throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var yieldHandler = Object(options).yieldHandler;
      var PromiseSpawn$ = PromiseSpawn;
      var stack = new Error().stack;
      return function () {
          var generator = generatorFunction.apply(this, arguments);
          var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                        stack);
          var ret = spawn.promise();
          spawn._generator = generator;
          spawn._promiseFulfilled(undefined);
          return ret;
      };
  };
  
  Promise.coroutine.addYieldHandler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      yieldHandlers.push(fn);
  };
  
  Promise.spawn = function (generatorFunction) {
      debug.deprecated("Promise.spawn()", "Promise.coroutine()");
      if (typeof generatorFunction !== "function") {
          return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var spawn = new PromiseSpawn(generatorFunction, this);
      var ret = spawn.promise();
      spawn._run(Promise.spawn);
      return ret;
  };
  };
  
  },{"./errors":12,"./util":36}],17:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
  function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
           getDomain) {
  var util = _dereq_("./util");
  var canEvaluate = util.canEvaluate;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var reject;
  
  if (!true) {
  if (canEvaluate) {
      var thenCallback = function(i) {
          return new Function("value", "holder", "                             \n\
              'use strict';                                                    \n\
              holder.pIndex = value;                                           \n\
              holder.checkFulfillment(this);                                   \n\
              ".replace(/Index/g, i));
      };
  
      var promiseSetter = function(i) {
          return new Function("promise", "holder", "                           \n\
              'use strict';                                                    \n\
              holder.pIndex = promise;                                         \n\
              ".replace(/Index/g, i));
      };
  
      var generateHolderClass = function(total) {
          var props = new Array(total);
          for (var i = 0; i < props.length; ++i) {
              props[i] = "this.p" + (i+1);
          }
          var assignment = props.join(" = ") + " = null;";
          var cancellationCode= "var promise;\n" + props.map(function(prop) {
              return "                                                         \n\
                  promise = " + prop + ";                                      \n\
                  if (promise instanceof Promise) {                            \n\
                      promise.cancel();                                        \n\
                  }                                                            \n\
              ";
          }).join("\n");
          var passedArguments = props.join(", ");
          var name = "Holder$" + total;
  
  
          var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
              'use strict';                                                    \n\
              function [TheName](fn) {                                         \n\
                  [TheProperties]                                              \n\
                  this.fn = fn;                                                \n\
                  this.asyncNeeded = true;                                     \n\
                  this.now = 0;                                                \n\
              }                                                                \n\
                                                                               \n\
              [TheName].prototype._callFunction = function(promise) {          \n\
                  promise._pushContext();                                      \n\
                  var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                  promise._popContext();                                       \n\
                  if (ret === errorObj) {                                      \n\
                      promise._rejectCallback(ret.e, false);                   \n\
                  } else {                                                     \n\
                      promise._resolveCallback(ret);                           \n\
                  }                                                            \n\
              };                                                               \n\
                                                                               \n\
              [TheName].prototype.checkFulfillment = function(promise) {       \n\
                  var now = ++this.now;                                        \n\
                  if (now === [TheTotal]) {                                    \n\
                      if (this.asyncNeeded) {                                  \n\
                          async.invoke(this._callFunction, this, promise);     \n\
                      } else {                                                 \n\
                          this._callFunction(promise);                         \n\
                      }                                                        \n\
                                                                               \n\
                  }                                                            \n\
              };                                                               \n\
                                                                               \n\
              [TheName].prototype._resultCancelled = function() {              \n\
                  [CancellationCode]                                           \n\
              };                                                               \n\
                                                                               \n\
              return [TheName];                                                \n\
          }(tryCatch, errorObj, Promise, async);                               \n\
          ";
  
          code = code.replace(/\[TheName\]/g, name)
              .replace(/\[TheTotal\]/g, total)
              .replace(/\[ThePassedArguments\]/g, passedArguments)
              .replace(/\[TheProperties\]/g, assignment)
              .replace(/\[CancellationCode\]/g, cancellationCode);
  
          return new Function("tryCatch", "errorObj", "Promise", "async", code)
                             (tryCatch, errorObj, Promise, async);
      };
  
      var holderClasses = [];
      var thenCallbacks = [];
      var promiseSetters = [];
  
      for (var i = 0; i < 8; ++i) {
          holderClasses.push(generateHolderClass(i + 1));
          thenCallbacks.push(thenCallback(i + 1));
          promiseSetters.push(promiseSetter(i + 1));
      }
  
      reject = function (reason) {
          this._reject(reason);
      };
  }}
  
  Promise.join = function () {
      var last = arguments.length - 1;
      var fn;
      if (last > 0 && typeof arguments[last] === "function") {
          fn = arguments[last];
          if (!true) {
              if (last <= 8 && canEvaluate) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  var HolderClass = holderClasses[last - 1];
                  var holder = new HolderClass(fn);
                  var callbacks = thenCallbacks;
  
                  for (var i = 0; i < last; ++i) {
                      var maybePromise = tryConvertToPromise(arguments[i], ret);
                      if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          var bitField = maybePromise._bitField;
                          ;
                          if (((bitField & 50397184) === 0)) {
                              maybePromise._then(callbacks[i], reject,
                                                 undefined, ret, holder);
                              promiseSetters[i](maybePromise, holder);
                              holder.asyncNeeded = false;
                          } else if (((bitField & 33554432) !== 0)) {
                              callbacks[i].call(ret,
                                                maybePromise._value(), holder);
                          } else if (((bitField & 16777216) !== 0)) {
                              ret._reject(maybePromise._reason());
                          } else {
                              ret._cancel();
                          }
                      } else {
                          callbacks[i].call(ret, maybePromise, holder);
                      }
                  }
  
                  if (!ret._isFateSealed()) {
                      if (holder.asyncNeeded) {
                          var domain = getDomain();
                          if (domain !== null) {
                              holder.fn = util.domainBind(domain, holder.fn);
                          }
                      }
                      ret._setAsyncGuaranteed();
                      ret._setOnCancel(holder);
                  }
                  return ret;
              }
          }
      }
      var args = [].slice.call(arguments);;
      if (fn) args.pop();
      var ret = new PromiseArray(args).promise();
      return fn !== undefined ? ret.spread(fn) : ret;
  };
  
  };
  
  },{"./util":36}],18:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var async = Promise._async;
  
  function MappingPromiseArray(promises, fn, limit, _filter) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      var domain = getDomain();
      this._callback = domain === null ? fn : util.domainBind(domain, fn);
      this._preservedValues = _filter === INTERNAL
          ? new Array(this.length())
          : null;
      this._limit = limit;
      this._inFlight = 0;
      this._queue = [];
      async.invoke(this._asyncInit, this, undefined);
  }
  util.inherits(MappingPromiseArray, PromiseArray);
  
  MappingPromiseArray.prototype._asyncInit = function() {
      this._init$(undefined, -2);
  };
  
  MappingPromiseArray.prototype._init = function () {};
  
  MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var limit = this._limit;
  
      if (index < 0) {
          index = (index * -1) - 1;
          values[index] = value;
          if (limit >= 1) {
              this._inFlight--;
              this._drainQueue();
              if (this._isResolved()) return true;
          }
      } else {
          if (limit >= 1 && this._inFlight >= limit) {
              values[index] = value;
              this._queue.push(index);
              return false;
          }
          if (preservedValues !== null) preservedValues[index] = value;
  
          var promise = this._promise;
          var callback = this._callback;
          var receiver = promise._boundValue();
          promise._pushContext();
          var ret = tryCatch(callback).call(receiver, value, index, length);
          var promiseCreated = promise._popContext();
          debug.checkForgottenReturns(
              ret,
              promiseCreated,
              preservedValues !== null ? "Promise.filter" : "Promise.map",
              promise
          );
          if (ret === errorObj) {
              this._reject(ret.e);
              return true;
          }
  
          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              var bitField = maybePromise._bitField;
              ;
              if (((bitField & 50397184) === 0)) {
                  if (limit >= 1) this._inFlight++;
                  values[index] = maybePromise;
                  maybePromise._proxy(this, (index + 1) * -1);
                  return false;
              } else if (((bitField & 33554432) !== 0)) {
                  ret = maybePromise._value();
              } else if (((bitField & 16777216) !== 0)) {
                  this._reject(maybePromise._reason());
                  return true;
              } else {
                  this._cancel();
                  return true;
              }
          }
          values[index] = ret;
      }
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= length) {
          if (preservedValues !== null) {
              this._filter(values, preservedValues);
          } else {
              this._resolve(values);
          }
          return true;
      }
      return false;
  };
  
  MappingPromiseArray.prototype._drainQueue = function () {
      var queue = this._queue;
      var limit = this._limit;
      var values = this._values;
      while (queue.length > 0 && this._inFlight < limit) {
          if (this._isResolved()) return;
          var index = queue.pop();
          this._promiseFulfilled(values[index], index);
      }
  };
  
  MappingPromiseArray.prototype._filter = function (booleans, values) {
      var len = values.length;
      var ret = new Array(len);
      var j = 0;
      for (var i = 0; i < len; ++i) {
          if (booleans[i]) ret[j++] = values[i];
      }
      ret.length = j;
      this._resolve(ret);
  };
  
  MappingPromiseArray.prototype.preservedValues = function () {
      return this._preservedValues;
  };
  
  function map(promises, fn, options, _filter) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
  
      var limit = 0;
      if (options !== undefined) {
          if (typeof options === "object" && options !== null) {
              if (typeof options.concurrency !== "number") {
                  return Promise.reject(
                      new TypeError("'concurrency' must be a number but it is " +
                                      util.classString(options.concurrency)));
              }
              limit = options.concurrency;
          } else {
              return Promise.reject(new TypeError(
                              "options argument must be an object but it is " +
                               util.classString(options)));
          }
      }
      limit = typeof limit === "number" &&
          isFinite(limit) && limit >= 1 ? limit : 0;
      return new MappingPromiseArray(promises, fn, limit, _filter).promise();
  }
  
  Promise.prototype.map = function (fn, options) {
      return map(this, fn, options, null);
  };
  
  Promise.map = function (promises, fn, options, _filter) {
      return map(promises, fn, options, _filter);
  };
  
  
  };
  
  },{"./util":36}],19:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
  function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;
  
  Promise.method = function (fn) {
      if (typeof fn !== "function") {
          throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
      }
      return function () {
          var ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._pushContext();
          var value = tryCatch(fn).apply(this, arguments);
          var promiseCreated = ret._popContext();
          debug.checkForgottenReturns(
              value, promiseCreated, "Promise.method", ret);
          ret._resolveFromSyncValue(value);
          return ret;
      };
  };
  
  Promise.attempt = Promise["try"] = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._pushContext();
      var value;
      if (arguments.length > 1) {
          debug.deprecated("calling Promise.try with more than 1 argument");
          var arg = arguments[1];
          var ctx = arguments[2];
          value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                    : tryCatch(fn).call(ctx, arg);
      } else {
          value = tryCatch(fn)();
      }
      var promiseCreated = ret._popContext();
      debug.checkForgottenReturns(
          value, promiseCreated, "Promise.try", ret);
      ret._resolveFromSyncValue(value);
      return ret;
  };
  
  Promise.prototype._resolveFromSyncValue = function (value) {
      if (value === util.errorObj) {
          this._rejectCallback(value.e, false);
      } else {
          this._resolveCallback(value, true);
      }
  };
  };
  
  },{"./util":36}],20:[function(_dereq_,module,exports){
  "use strict";
  var util = _dereq_("./util");
  var maybeWrapAsError = util.maybeWrapAsError;
  var errors = _dereq_("./errors");
  var OperationalError = errors.OperationalError;
  var es5 = _dereq_("./es5");
  
  function isUntypedError(obj) {
      return obj instanceof Error &&
          es5.getPrototypeOf(obj) === Error.prototype;
  }
  
  var rErrorKey = /^(?:name|message|stack|cause)$/;
  function wrapAsOperationalError(obj) {
      var ret;
      if (isUntypedError(obj)) {
          ret = new OperationalError(obj);
          ret.name = obj.name;
          ret.message = obj.message;
          ret.stack = obj.stack;
          var keys = es5.keys(obj);
          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!rErrorKey.test(key)) {
                  ret[key] = obj[key];
              }
          }
          return ret;
      }
      util.markAsOriginatingFromRejection(obj);
      return obj;
  }
  
  function nodebackForPromise(promise, multiArgs) {
      return function(err, value) {
          if (promise === null) return;
          if (err) {
              var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
              promise._attachExtraTrace(wrapped);
              promise._reject(wrapped);
          } else if (!multiArgs) {
              promise._fulfill(value);
          } else {
              var args = [].slice.call(arguments, 1);;
              promise._fulfill(args);
          }
          promise = null;
      };
  }
  
  module.exports = nodebackForPromise;
  
  },{"./errors":12,"./es5":13,"./util":36}],21:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  var util = _dereq_("./util");
  var async = Promise._async;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  
  function spreadAdapter(val, nodeback) {
      var promise = this;
      if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
      var ret =
          tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }
  
  function successAdapter(val, nodeback) {
      var promise = this;
      var receiver = promise._boundValue();
      var ret = val === undefined
          ? tryCatch(nodeback).call(receiver, null)
          : tryCatch(nodeback).call(receiver, null, val);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }
  function errorAdapter(reason, nodeback) {
      var promise = this;
      if (!reason) {
          var newReason = new Error(reason + "");
          newReason.cause = reason;
          reason = newReason;
      }
      var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }
  
  Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                       options) {
      if (typeof nodeback == "function") {
          var adapter = successAdapter;
          if (options !== undefined && Object(options).spread) {
              adapter = spreadAdapter;
          }
          this._then(
              adapter,
              errorAdapter,
              undefined,
              this,
              nodeback
          );
      }
      return this;
  };
  };
  
  },{"./util":36}],22:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function() {
  var makeSelfResolutionError = function () {
      return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var reflectHandler = function() {
      return new Promise.PromiseInspection(this._target());
  };
  var apiRejection = function(msg) {
      return Promise.reject(new TypeError(msg));
  };
  function Proxyable() {}
  var UNDEFINED_BINDING = {};
  var util = _dereq_("./util");
  
  var getDomain;
  if (util.isNode) {
      getDomain = function() {
          var ret = process.domain;
          if (ret === undefined) ret = null;
          return ret;
      };
  } else {
      getDomain = function() {
          return null;
      };
  }
  util.notEnumerableProp(Promise, "_getDomain", getDomain);
  
  var es5 = _dereq_("./es5");
  var Async = _dereq_("./async");
  var async = new Async();
  es5.defineProperty(Promise, "_async", {value: async});
  var errors = _dereq_("./errors");
  var TypeError = Promise.TypeError = errors.TypeError;
  Promise.RangeError = errors.RangeError;
  var CancellationError = Promise.CancellationError = errors.CancellationError;
  Promise.TimeoutError = errors.TimeoutError;
  Promise.OperationalError = errors.OperationalError;
  Promise.RejectionError = errors.OperationalError;
  Promise.AggregateError = errors.AggregateError;
  var INTERNAL = function(){};
  var APPLY = {};
  var NEXT_FILTER = {};
  var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
  var PromiseArray =
      _dereq_("./promise_array")(Promise, INTERNAL,
                                 tryConvertToPromise, apiRejection, Proxyable);
  var Context = _dereq_("./context")(Promise);
   /*jshint unused:false*/
  var createContext = Context.create;
  var debug = _dereq_("./debuggability")(Promise, Context);
  var CapturedTrace = debug.CapturedTrace;
  var PassThroughHandlerContext =
      _dereq_("./finally")(Promise, tryConvertToPromise, NEXT_FILTER);
  var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
  var nodebackForPromise = _dereq_("./nodeback");
  var errorObj = util.errorObj;
  var tryCatch = util.tryCatch;
  function check(self, executor) {
      if (self == null || self.constructor !== Promise) {
          throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      if (typeof executor !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(executor));
      }
  
  }
  
  function Promise(executor) {
      if (executor !== INTERNAL) {
          check(this, executor);
      }
      this._bitField = 0;
      this._fulfillmentHandler0 = undefined;
      this._rejectionHandler0 = undefined;
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._resolveFromExecutor(executor);
      this._promiseCreated();
      this._fireEvent("promiseCreated", this);
  }
  
  Promise.prototype.toString = function () {
      return "[object Promise]";
  };
  
  Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
      var len = arguments.length;
      if (len > 1) {
          var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments[i];
              if (util.isObject(item)) {
                  catchInstances[j++] = item;
              } else {
                  return apiRejection("Catch statement predicate: " +
                      "expecting an object but got " + util.classString(item));
              }
          }
          catchInstances.length = j;
          fn = arguments[i];
          return this.then(undefined, catchFilter(catchInstances, fn, this));
      }
      return this.then(undefined, fn);
  };
  
  Promise.prototype.reflect = function () {
      return this._then(reflectHandler,
          reflectHandler, undefined, this, undefined);
  };
  
  Promise.prototype.then = function (didFulfill, didReject) {
      if (debug.warnings() && arguments.length > 0 &&
          typeof didFulfill !== "function" &&
          typeof didReject !== "function") {
          var msg = ".then() only accepts functions but was passed: " +
                  util.classString(didFulfill);
          if (arguments.length > 1) {
              msg += ", " + util.classString(didReject);
          }
          this._warn(msg);
      }
      return this._then(didFulfill, didReject, undefined, undefined, undefined);
  };
  
  Promise.prototype.done = function (didFulfill, didReject) {
      var promise =
          this._then(didFulfill, didReject, undefined, undefined, undefined);
      promise._setIsFinal();
  };
  
  Promise.prototype.spread = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      return this.all()._then(fn, undefined, undefined, APPLY, undefined);
  };
  
  Promise.prototype.toJSON = function () {
      var ret = {
          isFulfilled: false,
          isRejected: false,
          fulfillmentValue: undefined,
          rejectionReason: undefined
      };
      if (this.isFulfilled()) {
          ret.fulfillmentValue = this.value();
          ret.isFulfilled = true;
      } else if (this.isRejected()) {
          ret.rejectionReason = this.reason();
          ret.isRejected = true;
      }
      return ret;
  };
  
  Promise.prototype.all = function () {
      if (arguments.length > 0) {
          this._warn(".all() was passed arguments but it does not take any");
      }
      return new PromiseArray(this).promise();
  };
  
  Promise.prototype.error = function (fn) {
      return this.caught(util.originatesFromRejection, fn);
  };
  
  Promise.getNewLibraryCopy = module.exports;
  
  Promise.is = function (val) {
      return val instanceof Promise;
  };
  
  Promise.fromNode = Promise.fromCallback = function(fn) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                           : false;
      var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
      if (result === errorObj) {
          ret._rejectCallback(result.e, true);
      }
      if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
      return ret;
  };
  
  Promise.all = function (promises) {
      return new PromiseArray(promises).promise();
  };
  
  Promise.cast = function (obj) {
      var ret = tryConvertToPromise(obj);
      if (!(ret instanceof Promise)) {
          ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._setFulfilled();
          ret._rejectionHandler0 = obj;
      }
      return ret;
  };
  
  Promise.resolve = Promise.fulfilled = Promise.cast;
  
  Promise.reject = Promise.rejected = function (reason) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._rejectCallback(reason, true);
      return ret;
  };
  
  Promise.setScheduler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      return async.setScheduler(fn);
  };
  
  Promise.prototype._then = function (
      didFulfill,
      didReject,
      _,    receiver,
      internalData
  ) {
      var haveInternalData = internalData !== undefined;
      var promise = haveInternalData ? internalData : new Promise(INTERNAL);
      var target = this._target();
      var bitField = target._bitField;
  
      if (!haveInternalData) {
          promise._propagateFrom(this, 3);
          promise._captureStackTrace();
          if (receiver === undefined &&
              ((this._bitField & 2097152) !== 0)) {
              if (!((bitField & 50397184) === 0)) {
                  receiver = this._boundValue();
              } else {
                  receiver = target === this ? undefined : this._boundTo;
              }
          }
          this._fireEvent("promiseChained", this, promise);
      }
  
      var domain = getDomain();
      if (!((bitField & 50397184) === 0)) {
          var handler, value, settler = target._settlePromiseCtx;
          if (((bitField & 33554432) !== 0)) {
              value = target._rejectionHandler0;
              handler = didFulfill;
          } else if (((bitField & 16777216) !== 0)) {
              value = target._fulfillmentHandler0;
              handler = didReject;
              target._unsetRejectionIsUnhandled();
          } else {
              settler = target._settlePromiseLateCancellationObserver;
              value = new CancellationError("late cancellation observer");
              target._attachExtraTrace(value);
              handler = didReject;
          }
  
          async.invoke(settler, target, {
              handler: domain === null ? handler
                  : (typeof handler === "function" &&
                      util.domainBind(domain, handler)),
              promise: promise,
              receiver: receiver,
              value: value
          });
      } else {
          target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
      }
  
      return promise;
  };
  
  Promise.prototype._length = function () {
      return this._bitField & 65535;
  };
  
  Promise.prototype._isFateSealed = function () {
      return (this._bitField & 117506048) !== 0;
  };
  
  Promise.prototype._isFollowing = function () {
      return (this._bitField & 67108864) === 67108864;
  };
  
  Promise.prototype._setLength = function (len) {
      this._bitField = (this._bitField & -65536) |
          (len & 65535);
  };
  
  Promise.prototype._setFulfilled = function () {
      this._bitField = this._bitField | 33554432;
      this._fireEvent("promiseFulfilled", this);
  };
  
  Promise.prototype._setRejected = function () {
      this._bitField = this._bitField | 16777216;
      this._fireEvent("promiseRejected", this);
  };
  
  Promise.prototype._setFollowing = function () {
      this._bitField = this._bitField | 67108864;
      this._fireEvent("promiseResolved", this);
  };
  
  Promise.prototype._setIsFinal = function () {
      this._bitField = this._bitField | 4194304;
  };
  
  Promise.prototype._isFinal = function () {
      return (this._bitField & 4194304) > 0;
  };
  
  Promise.prototype._unsetCancelled = function() {
      this._bitField = this._bitField & (~65536);
  };
  
  Promise.prototype._setCancelled = function() {
      this._bitField = this._bitField | 65536;
      this._fireEvent("promiseCancelled", this);
  };
  
  Promise.prototype._setWillBeCancelled = function() {
      this._bitField = this._bitField | 8388608;
  };
  
  Promise.prototype._setAsyncGuaranteed = function() {
      if (async.hasCustomScheduler()) return;
      this._bitField = this._bitField | 134217728;
  };
  
  Promise.prototype._receiverAt = function (index) {
      var ret = index === 0 ? this._receiver0 : this[
              index * 4 - 4 + 3];
      if (ret === UNDEFINED_BINDING) {
          return undefined;
      } else if (ret === undefined && this._isBound()) {
          return this._boundValue();
      }
      return ret;
  };
  
  Promise.prototype._promiseAt = function (index) {
      return this[
              index * 4 - 4 + 2];
  };
  
  Promise.prototype._fulfillmentHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 0];
  };
  
  Promise.prototype._rejectionHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 1];
  };
  
  Promise.prototype._boundValue = function() {};
  
  Promise.prototype._migrateCallback0 = function (follower) {
      var bitField = follower._bitField;
      var fulfill = follower._fulfillmentHandler0;
      var reject = follower._rejectionHandler0;
      var promise = follower._promise0;
      var receiver = follower._receiverAt(0);
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };
  
  Promise.prototype._migrateCallbackAt = function (follower, index) {
      var fulfill = follower._fulfillmentHandlerAt(index);
      var reject = follower._rejectionHandlerAt(index);
      var promise = follower._promiseAt(index);
      var receiver = follower._receiverAt(index);
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };
  
  Promise.prototype._addCallbacks = function (
      fulfill,
      reject,
      promise,
      receiver,
      domain
  ) {
      var index = this._length();
  
      if (index >= 65535 - 4) {
          index = 0;
          this._setLength(0);
      }
  
      if (index === 0) {
          this._promise0 = promise;
          this._receiver0 = receiver;
          if (typeof fulfill === "function") {
              this._fulfillmentHandler0 =
                  domain === null ? fulfill : util.domainBind(domain, fulfill);
          }
          if (typeof reject === "function") {
              this._rejectionHandler0 =
                  domain === null ? reject : util.domainBind(domain, reject);
          }
      } else {
          var base = index * 4 - 4;
          this[base + 2] = promise;
          this[base + 3] = receiver;
          if (typeof fulfill === "function") {
              this[base + 0] =
                  domain === null ? fulfill : util.domainBind(domain, fulfill);
          }
          if (typeof reject === "function") {
              this[base + 1] =
                  domain === null ? reject : util.domainBind(domain, reject);
          }
      }
      this._setLength(index + 1);
      return index;
  };
  
  Promise.prototype._proxy = function (proxyable, arg) {
      this._addCallbacks(undefined, undefined, arg, proxyable, null);
  };
  
  Promise.prototype._resolveCallback = function(value, shouldBind) {
      if (((this._bitField & 117506048) !== 0)) return;
      if (value === this)
          return this._rejectCallback(makeSelfResolutionError(), false);
      var maybePromise = tryConvertToPromise(value, this);
      if (!(maybePromise instanceof Promise)) return this._fulfill(value);
  
      if (shouldBind) this._propagateFrom(maybePromise, 2);
  
      var promise = maybePromise._target();
  
      if (promise === this) {
          this._reject(makeSelfResolutionError());
          return;
      }
  
      var bitField = promise._bitField;
      if (((bitField & 50397184) === 0)) {
          var len = this._length();
          if (len > 0) promise._migrateCallback0(this);
          for (var i = 1; i < len; ++i) {
              promise._migrateCallbackAt(this, i);
          }
          this._setFollowing();
          this._setLength(0);
          this._setFollowee(promise);
      } else if (((bitField & 33554432) !== 0)) {
          this._fulfill(promise._value());
      } else if (((bitField & 16777216) !== 0)) {
          this._reject(promise._reason());
      } else {
          var reason = new CancellationError("late cancellation observer");
          promise._attachExtraTrace(reason);
          this._reject(reason);
      }
  };
  
  Promise.prototype._rejectCallback =
  function(reason, synchronous, ignoreNonErrorWarnings) {
      var trace = util.ensureErrorObject(reason);
      var hasStack = trace === reason;
      if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
          var message = "a promise was rejected with a non-error: " +
              util.classString(reason);
          this._warn(message, true);
      }
      this._attachExtraTrace(trace, synchronous ? hasStack : false);
      this._reject(reason);
  };
  
  Promise.prototype._resolveFromExecutor = function (executor) {
      if (executor === INTERNAL) return;
      var promise = this;
      this._captureStackTrace();
      this._pushContext();
      var synchronous = true;
      var r = this._execute(executor, function(value) {
          promise._resolveCallback(value);
      }, function (reason) {
          promise._rejectCallback(reason, synchronous);
      });
      synchronous = false;
      this._popContext();
  
      if (r !== undefined) {
          promise._rejectCallback(r, true);
      }
  };
  
  Promise.prototype._settlePromiseFromHandler = function (
      handler, receiver, value, promise
  ) {
      var bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) return;
      promise._pushContext();
      var x;
      if (receiver === APPLY) {
          if (!value || typeof value.length !== "number") {
              x = errorObj;
              x.e = new TypeError("cannot .spread() a non-array: " +
                                      util.classString(value));
          } else {
              x = tryCatch(handler).apply(this._boundValue(), value);
          }
      } else {
          x = tryCatch(handler).call(receiver, value);
      }
      var promiseCreated = promise._popContext();
      bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) return;
  
      if (x === NEXT_FILTER) {
          promise._reject(value);
      } else if (x === errorObj) {
          promise._rejectCallback(x.e, false);
      } else {
          debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
          promise._resolveCallback(x);
      }
  };
  
  Promise.prototype._target = function() {
      var ret = this;
      while (ret._isFollowing()) ret = ret._followee();
      return ret;
  };
  
  Promise.prototype._followee = function() {
      return this._rejectionHandler0;
  };
  
  Promise.prototype._setFollowee = function(promise) {
      this._rejectionHandler0 = promise;
  };
  
  Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
      var isPromise = promise instanceof Promise;
      var bitField = this._bitField;
      var asyncGuaranteed = ((bitField & 134217728) !== 0);
      if (((bitField & 65536) !== 0)) {
          if (isPromise) promise._invokeInternalOnCancel();
  
          if (receiver instanceof PassThroughHandlerContext &&
              receiver.isFinallyHandler()) {
              receiver.cancelPromise = promise;
              if (tryCatch(handler).call(receiver, value) === errorObj) {
                  promise._reject(errorObj.e);
              }
          } else if (handler === reflectHandler) {
              promise._fulfill(reflectHandler.call(receiver));
          } else if (receiver instanceof Proxyable) {
              receiver._promiseCancelled(promise);
          } else if (isPromise || promise instanceof PromiseArray) {
              promise._cancel();
          } else {
              receiver.cancel();
          }
      } else if (typeof handler === "function") {
          if (!isPromise) {
              handler.call(receiver, value, promise);
          } else {
              if (asyncGuaranteed) promise._setAsyncGuaranteed();
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (receiver instanceof Proxyable) {
          if (!receiver._isResolved()) {
              if (((bitField & 33554432) !== 0)) {
                  receiver._promiseFulfilled(value, promise);
              } else {
                  receiver._promiseRejected(value, promise);
              }
          }
      } else if (isPromise) {
          if (asyncGuaranteed) promise._setAsyncGuaranteed();
          if (((bitField & 33554432) !== 0)) {
              promise._fulfill(value);
          } else {
              promise._reject(value);
          }
      }
  };
  
  Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
      var handler = ctx.handler;
      var promise = ctx.promise;
      var receiver = ctx.receiver;
      var value = ctx.value;
      if (typeof handler === "function") {
          if (!(promise instanceof Promise)) {
              handler.call(receiver, value, promise);
          } else {
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (promise instanceof Promise) {
          promise._reject(value);
      }
  };
  
  Promise.prototype._settlePromiseCtx = function(ctx) {
      this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
  };
  
  Promise.prototype._settlePromise0 = function(handler, value, bitField) {
      var promise = this._promise0;
      var receiver = this._receiverAt(0);
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._settlePromise(promise, handler, receiver, value);
  };
  
  Promise.prototype._clearCallbackDataAtIndex = function(index) {
      var base = index * 4 - 4;
      this[base + 2] =
      this[base + 3] =
      this[base + 0] =
      this[base + 1] = undefined;
  };
  
  Promise.prototype._fulfill = function (value) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) return;
      if (value === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._reject(err);
      }
      this._setFulfilled();
      this._rejectionHandler0 = value;
  
      if ((bitField & 65535) > 0) {
          if (((bitField & 134217728) !== 0)) {
              this._settlePromises();
          } else {
              async.settlePromises(this);
          }
      }
  };
  
  Promise.prototype._reject = function (reason) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) return;
      this._setRejected();
      this._fulfillmentHandler0 = reason;
  
      if (this._isFinal()) {
          return async.fatalError(reason, util.isNode);
      }
  
      if ((bitField & 65535) > 0) {
          async.settlePromises(this);
      } else {
          this._ensurePossibleRejectionHandled();
      }
  };
  
  Promise.prototype._fulfillPromises = function (len, value) {
      for (var i = 1; i < len; i++) {
          var handler = this._fulfillmentHandlerAt(i);
          var promise = this._promiseAt(i);
          var receiver = this._receiverAt(i);
          this._clearCallbackDataAtIndex(i);
          this._settlePromise(promise, handler, receiver, value);
      }
  };
  
  Promise.prototype._rejectPromises = function (len, reason) {
      for (var i = 1; i < len; i++) {
          var handler = this._rejectionHandlerAt(i);
          var promise = this._promiseAt(i);
          var receiver = this._receiverAt(i);
          this._clearCallbackDataAtIndex(i);
          this._settlePromise(promise, handler, receiver, reason);
      }
  };
  
  Promise.prototype._settlePromises = function () {
      var bitField = this._bitField;
      var len = (bitField & 65535);
  
      if (len > 0) {
          if (((bitField & 16842752) !== 0)) {
              var reason = this._fulfillmentHandler0;
              this._settlePromise0(this._rejectionHandler0, reason, bitField);
              this._rejectPromises(len, reason);
          } else {
              var value = this._rejectionHandler0;
              this._settlePromise0(this._fulfillmentHandler0, value, bitField);
              this._fulfillPromises(len, value);
          }
          this._setLength(0);
      }
      this._clearCancellationData();
  };
  
  Promise.prototype._settledValue = function() {
      var bitField = this._bitField;
      if (((bitField & 33554432) !== 0)) {
          return this._rejectionHandler0;
      } else if (((bitField & 16777216) !== 0)) {
          return this._fulfillmentHandler0;
      }
  };
  
  function deferResolve(v) {this.promise._resolveCallback(v);}
  function deferReject(v) {this.promise._rejectCallback(v, false);}
  
  Promise.defer = Promise.pending = function() {
      debug.deprecated("Promise.defer", "new Promise");
      var promise = new Promise(INTERNAL);
      return {
          promise: promise,
          resolve: deferResolve,
          reject: deferReject
      };
  };
  
  util.notEnumerableProp(Promise,
                         "_makeSelfResolutionError",
                         makeSelfResolutionError);
  
  _dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
      debug);
  _dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
  _dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
  _dereq_("./direct_resolve")(Promise);
  _dereq_("./synchronous_inspection")(Promise);
  _dereq_("./join")(
      Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
  Promise.Promise = Promise;
  Promise.version = "3.5.0";
  _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  _dereq_('./call_get.js')(Promise);
  _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
  _dereq_('./timers.js')(Promise, INTERNAL, debug);
  _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
  _dereq_('./nodeify.js')(Promise);
  _dereq_('./promisify.js')(Promise, INTERNAL);
  _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
  _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  _dereq_('./settle.js')(Promise, PromiseArray, debug);
  _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
  _dereq_('./filter.js')(Promise, INTERNAL);
  _dereq_('./each.js')(Promise, INTERNAL);
  _dereq_('./any.js')(Promise);
                                                           
      util.toFastProperties(Promise);                                          
      util.toFastProperties(Promise.prototype);                                
      function fillTypes(value) {                                              
          var p = new Promise(INTERNAL);                                       
          p._fulfillmentHandler0 = value;                                      
          p._rejectionHandler0 = value;                                        
          p._promise0 = value;                                                 
          p._receiver0 = value;                                                
      }                                                                        
      // Complete slack tracking, opt out of field-type tracking and           
      // stabilize map                                                         
      fillTypes({a: 1});                                                       
      fillTypes({b: 2});                                                       
      fillTypes({c: 3});                                                       
      fillTypes(1);                                                            
      fillTypes(function(){});                                                 
      fillTypes(undefined);                                                    
      fillTypes(false);                                                        
      fillTypes(new Promise(INTERNAL));                                        
      debug.setBounds(Async.firstLineError, util.lastLineError);               
      return Promise;                                                          
  
  };
  
  },{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL, tryConvertToPromise,
      apiRejection, Proxyable) {
  var util = _dereq_("./util");
  var isArray = util.isArray;
  
  function toResolutionValue(val) {
      switch(val) {
      case -2: return [];
      case -3: return {};
      case -6: return new Map();
      }
  }
  
  function PromiseArray(values) {
      var promise = this._promise = new Promise(INTERNAL);
      if (values instanceof Promise) {
          promise._propagateFrom(values, 3);
      }
      promise._setOnCancel(this);
      this._values = values;
      this._length = 0;
      this._totalResolved = 0;
      this._init(undefined, -2);
  }
  util.inherits(PromiseArray, Proxyable);
  
  PromiseArray.prototype.length = function () {
      return this._length;
  };
  
  PromiseArray.prototype.promise = function () {
      return this._promise;
  };
  
  PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
      var values = tryConvertToPromise(this._values, this._promise);
      if (values instanceof Promise) {
          values = values._target();
          var bitField = values._bitField;
          ;
          this._values = values;
  
          if (((bitField & 50397184) === 0)) {
              this._promise._setAsyncGuaranteed();
              return values._then(
                  init,
                  this._reject,
                  undefined,
                  this,
                  resolveValueIfEmpty
             );
          } else if (((bitField & 33554432) !== 0)) {
              values = values._value();
          } else if (((bitField & 16777216) !== 0)) {
              return this._reject(values._reason());
          } else {
              return this._cancel();
          }
      }
      values = util.asArray(values);
      if (values === null) {
          var err = apiRejection(
              "expecting an array or an iterable object but got " + util.classString(values)).reason();
          this._promise._rejectCallback(err, false);
          return;
      }
  
      if (values.length === 0) {
          if (resolveValueIfEmpty === -5) {
              this._resolveEmptyArray();
          }
          else {
              this._resolve(toResolutionValue(resolveValueIfEmpty));
          }
          return;
      }
      this._iterate(values);
  };
  
  PromiseArray.prototype._iterate = function(values) {
      var len = this.getActualLength(values.length);
      this._length = len;
      this._values = this.shouldCopyValues() ? new Array(len) : this._values;
      var result = this._promise;
      var isResolved = false;
      var bitField = null;
      for (var i = 0; i < len; ++i) {
          var maybePromise = tryConvertToPromise(values[i], result);
  
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              bitField = maybePromise._bitField;
          } else {
              bitField = null;
          }
  
          if (isResolved) {
              if (bitField !== null) {
                  maybePromise.suppressUnhandledRejections();
              }
          } else if (bitField !== null) {
              if (((bitField & 50397184) === 0)) {
                  maybePromise._proxy(this, i);
                  this._values[i] = maybePromise;
              } else if (((bitField & 33554432) !== 0)) {
                  isResolved = this._promiseFulfilled(maybePromise._value(), i);
              } else if (((bitField & 16777216) !== 0)) {
                  isResolved = this._promiseRejected(maybePromise._reason(), i);
              } else {
                  isResolved = this._promiseCancelled(i);
              }
          } else {
              isResolved = this._promiseFulfilled(maybePromise, i);
          }
      }
      if (!isResolved) result._setAsyncGuaranteed();
  };
  
  PromiseArray.prototype._isResolved = function () {
      return this._values === null;
  };
  
  PromiseArray.prototype._resolve = function (value) {
      this._values = null;
      this._promise._fulfill(value);
  };
  
  PromiseArray.prototype._cancel = function() {
      if (this._isResolved() || !this._promise._isCancellable()) return;
      this._values = null;
      this._promise._cancel();
  };
  
  PromiseArray.prototype._reject = function (reason) {
      this._values = null;
      this._promise._rejectCallback(reason, false);
  };
  
  PromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };
  
  PromiseArray.prototype._promiseCancelled = function() {
      this._cancel();
      return true;
  };
  
  PromiseArray.prototype._promiseRejected = function (reason) {
      this._totalResolved++;
      this._reject(reason);
      return true;
  };
  
  PromiseArray.prototype._resultCancelled = function() {
      if (this._isResolved()) return;
      var values = this._values;
      this._cancel();
      if (values instanceof Promise) {
          values.cancel();
      } else {
          for (var i = 0; i < values.length; ++i) {
              if (values[i] instanceof Promise) {
                  values[i].cancel();
              }
          }
      }
  };
  
  PromiseArray.prototype.shouldCopyValues = function () {
      return true;
  };
  
  PromiseArray.prototype.getActualLength = function (len) {
      return len;
  };
  
  return PromiseArray;
  };
  
  },{"./util":36}],24:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var THIS = {};
  var util = _dereq_("./util");
  var nodebackForPromise = _dereq_("./nodeback");
  var withAppended = util.withAppended;
  var maybeWrapAsError = util.maybeWrapAsError;
  var canEvaluate = util.canEvaluate;
  var TypeError = _dereq_("./errors").TypeError;
  var defaultSuffix = "Async";
  var defaultPromisified = {__isPromisified__: true};
  var noCopyProps = [
      "arity",    "length",
      "name",
      "arguments",
      "caller",
      "callee",
      "prototype",
      "__isPromisified__"
  ];
  var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");
  
  var defaultFilter = function(name) {
      return util.isIdentifier(name) &&
          name.charAt(0) !== "_" &&
          name !== "constructor";
  };
  
  function propsFilter(key) {
      return !noCopyPropsPattern.test(key);
  }
  
  function isPromisified(fn) {
      try {
          return fn.__isPromisified__ === true;
      }
      catch (e) {
          return false;
      }
  }
  
  function hasPromisified(obj, key, suffix) {
      var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                              defaultPromisified);
      return val ? isPromisified(val) : false;
  }
  function checkValid(ret, suffix, suffixRegexp) {
      for (var i = 0; i < ret.length; i += 2) {
          var key = ret[i];
          if (suffixRegexp.test(key)) {
              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
              for (var j = 0; j < ret.length; j += 2) {
                  if (ret[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                          .replace("%s", suffix));
                  }
              }
          }
      }
  }
  
  function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
      var keys = util.inheritedDataKeys(obj);
      var ret = [];
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var value = obj[key];
          var passesDefaultFilter = filter === defaultFilter
              ? true : defaultFilter(key, value, obj);
          if (typeof value === "function" &&
              !isPromisified(value) &&
              !hasPromisified(obj, key, suffix) &&
              filter(key, value, obj, passesDefaultFilter)) {
              ret.push(key, value);
          }
      }
      checkValid(ret, suffix, suffixRegexp);
      return ret;
  }
  
  var escapeIdentRegex = function(str) {
      return str.replace(/([$])/, "\\$");
  };
  
  var makeNodePromisifiedEval;
  if (!true) {
  var switchCaseArgumentOrder = function(likelyArgumentCount) {
      var ret = [likelyArgumentCount];
      var min = Math.max(0, likelyArgumentCount - 1 - 3);
      for(var i = likelyArgumentCount - 1; i >= min; --i) {
          ret.push(i);
      }
      for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
          ret.push(i);
      }
      return ret;
  };
  
  var argumentSequence = function(argumentCount) {
      return util.filledRange(argumentCount, "_arg", "");
  };
  
  var parameterDeclaration = function(parameterCount) {
      return util.filledRange(
          Math.max(parameterCount, 3), "_arg", "");
  };
  
  var parameterCount = function(fn) {
      if (typeof fn.length === "number") {
          return Math.max(Math.min(fn.length, 1023 + 1), 0);
      }
      return 0;
  };
  
  makeNodePromisifiedEval =
  function(callback, receiver, originalName, fn, _, multiArgs) {
      var newParameterCount = Math.max(0, parameterCount(fn) - 1);
      var argumentOrder = switchCaseArgumentOrder(newParameterCount);
      var shouldProxyThis = typeof callback === "string" || receiver === THIS;
  
      function generateCallForArgumentCount(count) {
          var args = argumentSequence(count).join(", ");
          var comma = count > 0 ? ", " : "";
          var ret;
          if (shouldProxyThis) {
              ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
          } else {
              ret = receiver === undefined
                  ? "ret = callback({{args}}, nodeback); break;\n"
                  : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
          }
          return ret.replace("{{args}}", args).replace(", ", comma);
      }
  
      function generateArgumentSwitchCase() {
          var ret = "";
          for (var i = 0; i < argumentOrder.length; ++i) {
              ret += "case " + argumentOrder[i] +":" +
                  generateCallForArgumentCount(argumentOrder[i]);
          }
  
          ret += "                                                             \n\
          default:                                                             \n\
              var args = new Array(len + 1);                                   \n\
              var i = 0;                                                       \n\
              for (var i = 0; i < len; ++i) {                                  \n\
                 args[i] = arguments[i];                                       \n\
              }                                                                \n\
              args[i] = nodeback;                                              \n\
              [CodeForCall]                                                    \n\
              break;                                                           \n\
          ".replace("[CodeForCall]", (shouldProxyThis
                                  ? "ret = callback.apply(this, args);\n"
                                  : "ret = callback.apply(receiver, args);\n"));
          return ret;
      }
  
      var getFunctionCode = typeof callback === "string"
                                  ? ("this != null ? this['"+callback+"'] : fn")
                                  : "fn";
      var body = "'use strict';                                                \n\
          var ret = function (Parameters) {                                    \n\
              'use strict';                                                    \n\
              var len = arguments.length;                                      \n\
              var promise = new Promise(INTERNAL);                             \n\
              promise._captureStackTrace();                                    \n\
              var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
              var ret;                                                         \n\
              var callback = tryCatch([GetFunctionCode]);                      \n\
              switch(len) {                                                    \n\
                  [CodeForSwitchCase]                                          \n\
              }                                                                \n\
              if (ret === errorObj) {                                          \n\
                  promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
              }                                                                \n\
              if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
              return promise;                                                  \n\
          };                                                                   \n\
          notEnumerableProp(ret, '__isPromisified__', true);                   \n\
          return ret;                                                          \n\
      ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
          .replace("[GetFunctionCode]", getFunctionCode);
      body = body.replace("Parameters", parameterDeclaration(newParameterCount));
      return new Function("Promise",
                          "fn",
                          "receiver",
                          "withAppended",
                          "maybeWrapAsError",
                          "nodebackForPromise",
                          "tryCatch",
                          "errorObj",
                          "notEnumerableProp",
                          "INTERNAL",
                          body)(
                      Promise,
                      fn,
                      receiver,
                      withAppended,
                      maybeWrapAsError,
                      nodebackForPromise,
                      util.tryCatch,
                      util.errorObj,
                      util.notEnumerableProp,
                      INTERNAL);
  };
  }
  
  function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
      var defaultThis = (function() {return this;})();
      var method = callback;
      if (typeof method === "string") {
          callback = fn;
      }
      function promisified() {
          var _receiver = receiver;
          if (receiver === THIS) _receiver = this;
          var promise = new Promise(INTERNAL);
          promise._captureStackTrace();
          var cb = typeof method === "string" && this !== defaultThis
              ? this[method] : callback;
          var fn = nodebackForPromise(promise, multiArgs);
          try {
              cb.apply(_receiver, withAppended(arguments, fn));
          } catch(e) {
              promise._rejectCallback(maybeWrapAsError(e), true, true);
          }
          if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
          return promise;
      }
      util.notEnumerableProp(promisified, "__isPromisified__", true);
      return promisified;
  }
  
  var makeNodePromisified = canEvaluate
      ? makeNodePromisifiedEval
      : makeNodePromisifiedClosure;
  
  function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
      var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
      var methods =
          promisifiableMethods(obj, suffix, suffixRegexp, filter);
  
      for (var i = 0, len = methods.length; i < len; i+= 2) {
          var key = methods[i];
          var fn = methods[i+1];
          var promisifiedKey = key + suffix;
          if (promisifier === makeNodePromisified) {
              obj[promisifiedKey] =
                  makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
          } else {
              var promisified = promisifier(fn, function() {
                  return makeNodePromisified(key, THIS, key,
                                             fn, suffix, multiArgs);
              });
              util.notEnumerableProp(promisified, "__isPromisified__", true);
              obj[promisifiedKey] = promisified;
          }
      }
      util.toFastProperties(obj);
      return obj;
  }
  
  function promisify(callback, receiver, multiArgs) {
      return makeNodePromisified(callback, receiver, undefined,
                                  callback, null, multiArgs);
  }
  
  Promise.promisify = function (fn, options) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      if (isPromisified(fn)) {
          return fn;
      }
      options = Object(options);
      var receiver = options.context === undefined ? THIS : options.context;
      var multiArgs = !!options.multiArgs;
      var ret = promisify(fn, receiver, multiArgs);
      util.copyDescriptors(fn, ret, propsFilter);
      return ret;
  };
  
  Promise.promisifyAll = function (target, options) {
      if (typeof target !== "function" && typeof target !== "object") {
          throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      options = Object(options);
      var multiArgs = !!options.multiArgs;
      var suffix = options.suffix;
      if (typeof suffix !== "string") suffix = defaultSuffix;
      var filter = options.filter;
      if (typeof filter !== "function") filter = defaultFilter;
      var promisifier = options.promisifier;
      if (typeof promisifier !== "function") promisifier = makeNodePromisified;
  
      if (!util.isIdentifier(suffix)) {
          throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
  
      var keys = util.inheritedDataKeys(target);
      for (var i = 0; i < keys.length; ++i) {
          var value = target[keys[i]];
          if (keys[i] !== "constructor" &&
              util.isClass(value)) {
              promisifyAll(value.prototype, suffix, filter, promisifier,
                  multiArgs);
              promisifyAll(value, suffix, filter, promisifier, multiArgs);
          }
      }
  
      return promisifyAll(target, suffix, filter, promisifier, multiArgs);
  };
  };
  
  
  },{"./errors":12,"./nodeback":20,"./util":36}],25:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(
      Promise, PromiseArray, tryConvertToPromise, apiRejection) {
  var util = _dereq_("./util");
  var isObject = util.isObject;
  var es5 = _dereq_("./es5");
  var Es6Map;
  if (typeof Map === "function") Es6Map = Map;
  
  var mapToEntries = (function() {
      var index = 0;
      var size = 0;
  
      function extractEntry(value, key) {
          this[index] = value;
          this[index + size] = key;
          index++;
      }
  
      return function mapToEntries(map) {
          size = map.size;
          index = 0;
          var ret = new Array(map.size * 2);
          map.forEach(extractEntry, ret);
          return ret;
      };
  })();
  
  var entriesToMap = function(entries) {
      var ret = new Es6Map();
      var length = entries.length / 2 | 0;
      for (var i = 0; i < length; ++i) {
          var key = entries[length + i];
          var value = entries[i];
          ret.set(key, value);
      }
      return ret;
  };
  
  function PropertiesPromiseArray(obj) {
      var isMap = false;
      var entries;
      if (Es6Map !== undefined && obj instanceof Es6Map) {
          entries = mapToEntries(obj);
          isMap = true;
      } else {
          var keys = es5.keys(obj);
          var len = keys.length;
          entries = new Array(len * 2);
          for (var i = 0; i < len; ++i) {
              var key = keys[i];
              entries[i] = obj[key];
              entries[i + len] = key;
          }
      }
      this.constructor$(entries);
      this._isMap = isMap;
      this._init$(undefined, isMap ? -6 : -3);
  }
  util.inherits(PropertiesPromiseArray, PromiseArray);
  
  PropertiesPromiseArray.prototype._init = function () {};
  
  PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          var val;
          if (this._isMap) {
              val = entriesToMap(this._values);
          } else {
              val = {};
              var keyOffset = this.length();
              for (var i = 0, len = this.length(); i < len; ++i) {
                  val[this._values[i + keyOffset]] = this._values[i];
              }
          }
          this._resolve(val);
          return true;
      }
      return false;
  };
  
  PropertiesPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };
  
  PropertiesPromiseArray.prototype.getActualLength = function (len) {
      return len >> 1;
  };
  
  function props(promises) {
      var ret;
      var castValue = tryConvertToPromise(promises);
  
      if (!isObject(castValue)) {
          return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      } else if (castValue instanceof Promise) {
          ret = castValue._then(
              Promise.props, undefined, undefined, undefined, undefined);
      } else {
          ret = new PropertiesPromiseArray(castValue).promise();
      }
  
      if (castValue instanceof Promise) {
          ret._propagateFrom(castValue, 2);
      }
      return ret;
  }
  
  Promise.prototype.props = function () {
      return props(this);
  };
  
  Promise.props = function (promises) {
      return props(promises);
  };
  };
  
  },{"./es5":13,"./util":36}],26:[function(_dereq_,module,exports){
  "use strict";
  function arrayMove(src, srcIndex, dst, dstIndex, len) {
      for (var j = 0; j < len; ++j) {
          dst[j + dstIndex] = src[j + srcIndex];
          src[j + srcIndex] = void 0;
      }
  }
  
  function Queue(capacity) {
      this._capacity = capacity;
      this._length = 0;
      this._front = 0;
  }
  
  Queue.prototype._willBeOverCapacity = function (size) {
      return this._capacity < size;
  };
  
  Queue.prototype._pushOne = function (arg) {
      var length = this.length();
      this._checkCapacity(length + 1);
      var i = (this._front + length) & (this._capacity - 1);
      this[i] = arg;
      this._length = length + 1;
  };
  
  Queue.prototype.push = function (fn, receiver, arg) {
      var length = this.length() + 3;
      if (this._willBeOverCapacity(length)) {
          this._pushOne(fn);
          this._pushOne(receiver);
          this._pushOne(arg);
          return;
      }
      var j = this._front + length - 3;
      this._checkCapacity(length);
      var wrapMask = this._capacity - 1;
      this[(j + 0) & wrapMask] = fn;
      this[(j + 1) & wrapMask] = receiver;
      this[(j + 2) & wrapMask] = arg;
      this._length = length;
  };
  
  Queue.prototype.shift = function () {
      var front = this._front,
          ret = this[front];
  
      this[front] = undefined;
      this._front = (front + 1) & (this._capacity - 1);
      this._length--;
      return ret;
  };
  
  Queue.prototype.length = function () {
      return this._length;
  };
  
  Queue.prototype._checkCapacity = function (size) {
      if (this._capacity < size) {
          this._resizeTo(this._capacity << 1);
      }
  };
  
  Queue.prototype._resizeTo = function (capacity) {
      var oldCapacity = this._capacity;
      this._capacity = capacity;
      var front = this._front;
      var length = this._length;
      var moveItemsCount = (front + length) & (oldCapacity - 1);
      arrayMove(this, 0, this, oldCapacity, moveItemsCount);
  };
  
  module.exports = Queue;
  
  },{}],27:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(
      Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var util = _dereq_("./util");
  
  var raceLater = function (promise) {
      return promise.then(function(array) {
          return race(array, promise);
      });
  };
  
  function race(promises, parent) {
      var maybePromise = tryConvertToPromise(promises);
  
      if (maybePromise instanceof Promise) {
          return raceLater(maybePromise);
      } else {
          promises = util.asArray(promises);
          if (promises === null)
              return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
      }
  
      var ret = new Promise(INTERNAL);
      if (parent !== undefined) {
          ret._propagateFrom(parent, 3);
      }
      var fulfill = ret._fulfill;
      var reject = ret._reject;
      for (var i = 0, len = promises.length; i < len; ++i) {
          var val = promises[i];
  
          if (val === undefined && !(i in promises)) {
              continue;
          }
  
          Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
      }
      return ret;
  }
  
  Promise.race = function (promises) {
      return race(promises, undefined);
  };
  
  Promise.prototype.race = function () {
      return race(this, undefined);
  };
  
  };
  
  },{"./util":36}],28:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;
  
  function ReductionPromiseArray(promises, fn, initialValue, _each) {
      this.constructor$(promises);
      var domain = getDomain();
      this._fn = domain === null ? fn : util.domainBind(domain, fn);
      if (initialValue !== undefined) {
          initialValue = Promise.resolve(initialValue);
          initialValue._attachCancellationCallback(this);
      }
      this._initialValue = initialValue;
      this._currentCancellable = null;
      if(_each === INTERNAL) {
          this._eachValues = Array(this._length);
      } else if (_each === 0) {
          this._eachValues = null;
      } else {
          this._eachValues = undefined;
      }
      this._promise._captureStackTrace();
      this._init$(undefined, -5);
  }
  util.inherits(ReductionPromiseArray, PromiseArray);
  
  ReductionPromiseArray.prototype._gotAccum = function(accum) {
      if (this._eachValues !== undefined && 
          this._eachValues !== null && 
          accum !== INTERNAL) {
          this._eachValues.push(accum);
      }
  };
  
  ReductionPromiseArray.prototype._eachComplete = function(value) {
      if (this._eachValues !== null) {
          this._eachValues.push(value);
      }
      return this._eachValues;
  };
  
  ReductionPromiseArray.prototype._init = function() {};
  
  ReductionPromiseArray.prototype._resolveEmptyArray = function() {
      this._resolve(this._eachValues !== undefined ? this._eachValues
                                                   : this._initialValue);
  };
  
  ReductionPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };
  
  ReductionPromiseArray.prototype._resolve = function(value) {
      this._promise._resolveCallback(value);
      this._values = null;
  };
  
  ReductionPromiseArray.prototype._resultCancelled = function(sender) {
      if (sender === this._initialValue) return this._cancel();
      if (this._isResolved()) return;
      this._resultCancelled$();
      if (this._currentCancellable instanceof Promise) {
          this._currentCancellable.cancel();
      }
      if (this._initialValue instanceof Promise) {
          this._initialValue.cancel();
      }
  };
  
  ReductionPromiseArray.prototype._iterate = function (values) {
      this._values = values;
      var value;
      var i;
      var length = values.length;
      if (this._initialValue !== undefined) {
          value = this._initialValue;
          i = 0;
      } else {
          value = Promise.resolve(values[0]);
          i = 1;
      }
  
      this._currentCancellable = value;
  
      if (!value.isRejected()) {
          for (; i < length; ++i) {
              var ctx = {
                  accum: null,
                  value: values[i],
                  index: i,
                  length: length,
                  array: this
              };
              value = value._then(gotAccum, undefined, undefined, ctx, undefined);
          }
      }
  
      if (this._eachValues !== undefined) {
          value = value
              ._then(this._eachComplete, undefined, undefined, this, undefined);
      }
      value._then(completed, completed, undefined, value, this);
  };
  
  Promise.prototype.reduce = function (fn, initialValue) {
      return reduce(this, fn, initialValue, null);
  };
  
  Promise.reduce = function (promises, fn, initialValue, _each) {
      return reduce(promises, fn, initialValue, _each);
  };
  
  function completed(valueOrReason, array) {
      if (this.isFulfilled()) {
          array._resolve(valueOrReason);
      } else {
          array._reject(valueOrReason);
      }
  }
  
  function reduce(promises, fn, initialValue, _each) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
      return array.promise();
  }
  
  function gotAccum(accum) {
      this.accum = accum;
      this.array._gotAccum(accum);
      var value = tryConvertToPromise(this.value, this.array._promise);
      if (value instanceof Promise) {
          this.array._currentCancellable = value;
          return value._then(gotValue, undefined, undefined, this, undefined);
      } else {
          return gotValue.call(this, value);
      }
  }
  
  function gotValue(value) {
      var array = this.array;
      var promise = array._promise;
      var fn = tryCatch(array._fn);
      promise._pushContext();
      var ret;
      if (array._eachValues !== undefined) {
          ret = fn.call(promise._boundValue(), value, this.index, this.length);
      } else {
          ret = fn.call(promise._boundValue(),
                                this.accum, value, this.index, this.length);
      }
      if (ret instanceof Promise) {
          array._currentCancellable = ret;
      }
      var promiseCreated = promise._popContext();
      debug.checkForgottenReturns(
          ret,
          promiseCreated,
          array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
          promise
      );
      return ret;
  }
  };
  
  },{"./util":36}],29:[function(_dereq_,module,exports){
  "use strict";
  var util = _dereq_("./util");
  var schedule;
  var noAsyncScheduler = function() {
      throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var NativePromise = util.getNativePromise();
  if (util.isNode && typeof MutationObserver === "undefined") {
      var GlobalSetImmediate = global.setImmediate;
      var ProcessNextTick = process.nextTick;
      schedule = util.isRecentNode
                  ? function(fn) { GlobalSetImmediate.call(global, fn); }
                  : function(fn) { ProcessNextTick.call(process, fn); };
  } else if (typeof NativePromise === "function" &&
             typeof NativePromise.resolve === "function") {
      var nativePromise = NativePromise.resolve();
      schedule = function(fn) {
          nativePromise.then(fn);
      };
  } else if ((typeof MutationObserver !== "undefined") &&
            !(typeof window !== "undefined" &&
              window.navigator &&
              (window.navigator.standalone || window.cordova))) {
      schedule = (function() {
          var div = document.createElement("div");
          var opts = {attributes: true};
          var toggleScheduled = false;
          var div2 = document.createElement("div");
          var o2 = new MutationObserver(function() {
              div.classList.toggle("foo");
              toggleScheduled = false;
          });
          o2.observe(div2, opts);
  
          var scheduleToggle = function() {
              if (toggleScheduled) return;
              toggleScheduled = true;
              div2.classList.toggle("foo");
          };
  
          return function schedule(fn) {
              var o = new MutationObserver(function() {
                  o.disconnect();
                  fn();
              });
              o.observe(div, opts);
              scheduleToggle();
          };
      })();
  } else if (typeof setImmediate !== "undefined") {
      schedule = function (fn) {
          setImmediate(fn);
      };
  } else if (typeof setTimeout !== "undefined") {
      schedule = function (fn) {
          setTimeout(fn, 0);
      };
  } else {
      schedule = noAsyncScheduler;
  }
  module.exports = schedule;
  
  },{"./util":36}],30:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
      function(Promise, PromiseArray, debug) {
  var PromiseInspection = Promise.PromiseInspection;
  var util = _dereq_("./util");
  
  function SettledPromiseArray(values) {
      this.constructor$(values);
  }
  util.inherits(SettledPromiseArray, PromiseArray);
  
  SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
      this._values[index] = inspection;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };
  
  SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var ret = new PromiseInspection();
      ret._bitField = 33554432;
      ret._settledValueField = value;
      return this._promiseResolved(index, ret);
  };
  SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
      var ret = new PromiseInspection();
      ret._bitField = 16777216;
      ret._settledValueField = reason;
      return this._promiseResolved(index, ret);
  };
  
  Promise.settle = function (promises) {
      debug.deprecated(".settle()", ".reflect()");
      return new SettledPromiseArray(promises).promise();
  };
  
  Promise.prototype.settle = function () {
      return Promise.settle(this);
  };
  };
  
  },{"./util":36}],31:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
  function(Promise, PromiseArray, apiRejection) {
  var util = _dereq_("./util");
  var RangeError = _dereq_("./errors").RangeError;
  var AggregateError = _dereq_("./errors").AggregateError;
  var isArray = util.isArray;
  var CANCELLATION = {};
  
  
  function SomePromiseArray(values) {
      this.constructor$(values);
      this._howMany = 0;
      this._unwrap = false;
      this._initialized = false;
  }
  util.inherits(SomePromiseArray, PromiseArray);
  
  SomePromiseArray.prototype._init = function () {
      if (!this._initialized) {
          return;
      }
      if (this._howMany === 0) {
          this._resolve([]);
          return;
      }
      this._init$(undefined, -5);
      var isArrayResolved = isArray(this._values);
      if (!this._isResolved() &&
          isArrayResolved &&
          this._howMany > this._canPossiblyFulfill()) {
          this._reject(this._getRangeError(this.length()));
      }
  };
  
  SomePromiseArray.prototype.init = function () {
      this._initialized = true;
      this._init();
  };
  
  SomePromiseArray.prototype.setUnwrap = function () {
      this._unwrap = true;
  };
  
  SomePromiseArray.prototype.howMany = function () {
      return this._howMany;
  };
  
  SomePromiseArray.prototype.setHowMany = function (count) {
      this._howMany = count;
  };
  
  SomePromiseArray.prototype._promiseFulfilled = function (value) {
      this._addFulfilled(value);
      if (this._fulfilled() === this.howMany()) {
          this._values.length = this.howMany();
          if (this.howMany() === 1 && this._unwrap) {
              this._resolve(this._values[0]);
          } else {
              this._resolve(this._values);
          }
          return true;
      }
      return false;
  
  };
  SomePromiseArray.prototype._promiseRejected = function (reason) {
      this._addRejected(reason);
      return this._checkOutcome();
  };
  
  SomePromiseArray.prototype._promiseCancelled = function () {
      if (this._values instanceof Promise || this._values == null) {
          return this._cancel();
      }
      this._addRejected(CANCELLATION);
      return this._checkOutcome();
  };
  
  SomePromiseArray.prototype._checkOutcome = function() {
      if (this.howMany() > this._canPossiblyFulfill()) {
          var e = new AggregateError();
          for (var i = this.length(); i < this._values.length; ++i) {
              if (this._values[i] !== CANCELLATION) {
                  e.push(this._values[i]);
              }
          }
          if (e.length > 0) {
              this._reject(e);
          } else {
              this._cancel();
          }
          return true;
      }
      return false;
  };
  
  SomePromiseArray.prototype._fulfilled = function () {
      return this._totalResolved;
  };
  
  SomePromiseArray.prototype._rejected = function () {
      return this._values.length - this.length();
  };
  
  SomePromiseArray.prototype._addRejected = function (reason) {
      this._values.push(reason);
  };
  
  SomePromiseArray.prototype._addFulfilled = function (value) {
      this._values[this._totalResolved++] = value;
  };
  
  SomePromiseArray.prototype._canPossiblyFulfill = function () {
      return this.length() - this._rejected();
  };
  
  SomePromiseArray.prototype._getRangeError = function (count) {
      var message = "Input array must contain at least " +
              this._howMany + " items but contains only " + count + " items";
      return new RangeError(message);
  };
  
  SomePromiseArray.prototype._resolveEmptyArray = function () {
      this._reject(this._getRangeError(0));
  };
  
  function some(promises, howMany) {
      if ((howMany | 0) !== howMany || howMany < 0) {
          return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(howMany);
      ret.init();
      return promise;
  }
  
  Promise.some = function (promises, howMany) {
      return some(promises, howMany);
  };
  
  Promise.prototype.some = function (howMany) {
      return some(this, howMany);
  };
  
  Promise._SomePromiseArray = SomePromiseArray;
  };
  
  },{"./errors":12,"./util":36}],32:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  function PromiseInspection(promise) {
      if (promise !== undefined) {
          promise = promise._target();
          this._bitField = promise._bitField;
          this._settledValueField = promise._isFateSealed()
              ? promise._settledValue() : undefined;
      }
      else {
          this._bitField = 0;
          this._settledValueField = undefined;
      }
  }
  
  PromiseInspection.prototype._settledValue = function() {
      return this._settledValueField;
  };
  
  var value = PromiseInspection.prototype.value = function () {
      if (!this.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };
  
  var reason = PromiseInspection.prototype.error =
  PromiseInspection.prototype.reason = function () {
      if (!this.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };
  
  var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
      return (this._bitField & 33554432) !== 0;
  };
  
  var isRejected = PromiseInspection.prototype.isRejected = function () {
      return (this._bitField & 16777216) !== 0;
  };
  
  var isPending = PromiseInspection.prototype.isPending = function () {
      return (this._bitField & 50397184) === 0;
  };
  
  var isResolved = PromiseInspection.prototype.isResolved = function () {
      return (this._bitField & 50331648) !== 0;
  };
  
  PromiseInspection.prototype.isCancelled = function() {
      return (this._bitField & 8454144) !== 0;
  };
  
  Promise.prototype.__isCancelled = function() {
      return (this._bitField & 65536) === 65536;
  };
  
  Promise.prototype._isCancelled = function() {
      return this._target().__isCancelled();
  };
  
  Promise.prototype.isCancelled = function() {
      return (this._target()._bitField & 8454144) !== 0;
  };
  
  Promise.prototype.isPending = function() {
      return isPending.call(this._target());
  };
  
  Promise.prototype.isRejected = function() {
      return isRejected.call(this._target());
  };
  
  Promise.prototype.isFulfilled = function() {
      return isFulfilled.call(this._target());
  };
  
  Promise.prototype.isResolved = function() {
      return isResolved.call(this._target());
  };
  
  Promise.prototype.value = function() {
      return value.call(this._target());
  };
  
  Promise.prototype.reason = function() {
      var target = this._target();
      target._unsetRejectionIsUnhandled();
      return reason.call(target);
  };
  
  Promise.prototype._value = function() {
      return this._settledValue();
  };
  
  Promise.prototype._reason = function() {
      this._unsetRejectionIsUnhandled();
      return this._settledValue();
  };
  
  Promise.PromiseInspection = PromiseInspection;
  };
  
  },{}],33:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var util = _dereq_("./util");
  var errorObj = util.errorObj;
  var isObject = util.isObject;
  
  function tryConvertToPromise(obj, context) {
      if (isObject(obj)) {
          if (obj instanceof Promise) return obj;
          var then = getThen(obj);
          if (then === errorObj) {
              if (context) context._pushContext();
              var ret = Promise.reject(then.e);
              if (context) context._popContext();
              return ret;
          } else if (typeof then === "function") {
              if (isAnyBluebirdPromise(obj)) {
                  var ret = new Promise(INTERNAL);
                  obj._then(
                      ret._fulfill,
                      ret._reject,
                      undefined,
                      ret,
                      null
                  );
                  return ret;
              }
              return doThenable(obj, then, context);
          }
      }
      return obj;
  }
  
  function doGetThen(obj) {
      return obj.then;
  }
  
  function getThen(obj) {
      try {
          return doGetThen(obj);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }
  
  var hasProp = {}.hasOwnProperty;
  function isAnyBluebirdPromise(obj) {
      try {
          return hasProp.call(obj, "_promise0");
      } catch (e) {
          return false;
      }
  }
  
  function doThenable(x, then, context) {
      var promise = new Promise(INTERNAL);
      var ret = promise;
      if (context) context._pushContext();
      promise._captureStackTrace();
      if (context) context._popContext();
      var synchronous = true;
      var result = util.tryCatch(then).call(x, resolve, reject);
      synchronous = false;
  
      if (promise && result === errorObj) {
          promise._rejectCallback(result.e, true, true);
          promise = null;
      }
  
      function resolve(value) {
          if (!promise) return;
          promise._resolveCallback(value);
          promise = null;
      }
  
      function reject(reason) {
          if (!promise) return;
          promise._rejectCallback(reason, synchronous, true);
          promise = null;
      }
      return ret;
  }
  
  return tryConvertToPromise;
  };
  
  },{"./util":36}],34:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL, debug) {
  var util = _dereq_("./util");
  var TimeoutError = Promise.TimeoutError;
  
  function HandleWrapper(handle)  {
      this.handle = handle;
  }
  
  HandleWrapper.prototype._resultCancelled = function() {
      clearTimeout(this.handle);
  };
  
  var afterValue = function(value) { return delay(+this).thenReturn(value); };
  var delay = Promise.delay = function (ms, value) {
      var ret;
      var handle;
      if (value !== undefined) {
          ret = Promise.resolve(value)
                  ._then(afterValue, null, null, ms, undefined);
          if (debug.cancellation() && value instanceof Promise) {
              ret._setOnCancel(value);
          }
      } else {
          ret = new Promise(INTERNAL);
          handle = setTimeout(function() { ret._fulfill(); }, +ms);
          if (debug.cancellation()) {
              ret._setOnCancel(new HandleWrapper(handle));
          }
          ret._captureStackTrace();
      }
      ret._setAsyncGuaranteed();
      return ret;
  };
  
  Promise.prototype.delay = function (ms) {
      return delay(ms, this);
  };
  
  var afterTimeout = function (promise, message, parent) {
      var err;
      if (typeof message !== "string") {
          if (message instanceof Error) {
              err = message;
          } else {
              err = new TimeoutError("operation timed out");
          }
      } else {
          err = new TimeoutError(message);
      }
      util.markAsOriginatingFromRejection(err);
      promise._attachExtraTrace(err);
      promise._reject(err);
  
      if (parent != null) {
          parent.cancel();
      }
  };
  
  function successClear(value) {
      clearTimeout(this.handle);
      return value;
  }
  
  function failureClear(reason) {
      clearTimeout(this.handle);
      throw reason;
  }
  
  Promise.prototype.timeout = function (ms, message) {
      ms = +ms;
      var ret, parent;
  
      var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
          if (ret.isPending()) {
              afterTimeout(ret, message, parent);
          }
      }, ms));
  
      if (debug.cancellation()) {
          parent = this.then();
          ret = parent._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
          ret._setOnCancel(handleWrapper);
      } else {
          ret = this._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
      }
  
      return ret;
  };
  
  };
  
  },{"./util":36}],35:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function (Promise, apiRejection, tryConvertToPromise,
      createContext, INTERNAL, debug) {
      var util = _dereq_("./util");
      var TypeError = _dereq_("./errors").TypeError;
      var inherits = _dereq_("./util").inherits;
      var errorObj = util.errorObj;
      var tryCatch = util.tryCatch;
      var NULL = {};
  
      function thrower(e) {
          setTimeout(function(){throw e;}, 0);
      }
  
      function castPreservingDisposable(thenable) {
          var maybePromise = tryConvertToPromise(thenable);
          if (maybePromise !== thenable &&
              typeof thenable._isDisposable === "function" &&
              typeof thenable._getDisposer === "function" &&
              thenable._isDisposable()) {
              maybePromise._setDisposable(thenable._getDisposer());
          }
          return maybePromise;
      }
      function dispose(resources, inspection) {
          var i = 0;
          var len = resources.length;
          var ret = new Promise(INTERNAL);
          function iterator() {
              if (i >= len) return ret._fulfill();
              var maybePromise = castPreservingDisposable(resources[i++]);
              if (maybePromise instanceof Promise &&
                  maybePromise._isDisposable()) {
                  try {
                      maybePromise = tryConvertToPromise(
                          maybePromise._getDisposer().tryDispose(inspection),
                          resources.promise);
                  } catch (e) {
                      return thrower(e);
                  }
                  if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower,
                                                null, null, null);
                  }
              }
              iterator();
          }
          iterator();
          return ret;
      }
  
      function Disposer(data, promise, context) {
          this._data = data;
          this._promise = promise;
          this._context = context;
      }
  
      Disposer.prototype.data = function () {
          return this._data;
      };
  
      Disposer.prototype.promise = function () {
          return this._promise;
      };
  
      Disposer.prototype.resource = function () {
          if (this.promise().isFulfilled()) {
              return this.promise().value();
          }
          return NULL;
      };
  
      Disposer.prototype.tryDispose = function(inspection) {
          var resource = this.resource();
          var context = this._context;
          if (context !== undefined) context._pushContext();
          var ret = resource !== NULL
              ? this.doDispose(resource, inspection) : null;
          if (context !== undefined) context._popContext();
          this._promise._unsetDisposable();
          this._data = null;
          return ret;
      };
  
      Disposer.isDisposer = function (d) {
          return (d != null &&
                  typeof d.resource === "function" &&
                  typeof d.tryDispose === "function");
      };
  
      function FunctionDisposer(fn, promise, context) {
          this.constructor$(fn, promise, context);
      }
      inherits(FunctionDisposer, Disposer);
  
      FunctionDisposer.prototype.doDispose = function (resource, inspection) {
          var fn = this.data();
          return fn.call(resource, resource, inspection);
      };
  
      function maybeUnwrapDisposer(value) {
          if (Disposer.isDisposer(value)) {
              this.resources[this.index]._setDisposable(value);
              return value.promise();
          }
          return value;
      }
  
      function ResourceList(length) {
          this.length = length;
          this.promise = null;
          this[length-1] = null;
      }
  
      ResourceList.prototype._resultCancelled = function() {
          var len = this.length;
          for (var i = 0; i < len; ++i) {
              var item = this[i];
              if (item instanceof Promise) {
                  item.cancel();
              }
          }
      };
  
      Promise.using = function () {
          var len = arguments.length;
          if (len < 2) return apiRejection(
                          "you must pass at least 2 arguments to Promise.using");
          var fn = arguments[len - 1];
          if (typeof fn !== "function") {
              return apiRejection("expecting a function but got " + util.classString(fn));
          }
          var input;
          var spreadArgs = true;
          if (len === 2 && Array.isArray(arguments[0])) {
              input = arguments[0];
              len = input.length;
              spreadArgs = false;
          } else {
              input = arguments;
              len--;
          }
          var resources = new ResourceList(len);
          for (var i = 0; i < len; ++i) {
              var resource = input[i];
              if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
              } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise) {
                      resource =
                          maybePromise._then(maybeUnwrapDisposer, null, null, {
                              resources: resources,
                              index: i
                      }, undefined);
                  }
              }
              resources[i] = resource;
          }
  
          var reflectedResources = new Array(resources.length);
          for (var i = 0; i < reflectedResources.length; ++i) {
              reflectedResources[i] = Promise.resolve(resources[i]).reflect();
          }
  
          var resultPromise = Promise.all(reflectedResources)
              .then(function(inspections) {
                  for (var i = 0; i < inspections.length; ++i) {
                      var inspection = inspections[i];
                      if (inspection.isRejected()) {
                          errorObj.e = inspection.error();
                          return errorObj;
                      } else if (!inspection.isFulfilled()) {
                          resultPromise.cancel();
                          return;
                      }
                      inspections[i] = inspection.value();
                  }
                  promise._pushContext();
  
                  fn = tryCatch(fn);
                  var ret = spreadArgs
                      ? fn.apply(undefined, inspections) : fn(inspections);
                  var promiseCreated = promise._popContext();
                  debug.checkForgottenReturns(
                      ret, promiseCreated, "Promise.using", promise);
                  return ret;
              });
  
          var promise = resultPromise.lastly(function() {
              var inspection = new Promise.PromiseInspection(resultPromise);
              return dispose(resources, inspection);
          });
          resources.promise = promise;
          promise._setOnCancel(resources);
          return promise;
      };
  
      Promise.prototype._setDisposable = function (disposer) {
          this._bitField = this._bitField | 131072;
          this._disposer = disposer;
      };
  
      Promise.prototype._isDisposable = function () {
          return (this._bitField & 131072) > 0;
      };
  
      Promise.prototype._getDisposer = function () {
          return this._disposer;
      };
  
      Promise.prototype._unsetDisposable = function () {
          this._bitField = this._bitField & (~131072);
          this._disposer = undefined;
      };
  
      Promise.prototype.disposer = function (fn) {
          if (typeof fn === "function") {
              return new FunctionDisposer(fn, this, createContext());
          }
          throw new TypeError();
      };
  
  };
  
  },{"./errors":12,"./util":36}],36:[function(_dereq_,module,exports){
  "use strict";
  var es5 = _dereq_("./es5");
  var canEvaluate = typeof navigator == "undefined";
  
  var errorObj = {e: {}};
  var tryCatchTarget;
  var globalObject = typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window :
      typeof global !== "undefined" ? global :
      this !== undefined ? this : null;
  
  function tryCatcher() {
      try {
          var target = tryCatchTarget;
          tryCatchTarget = null;
          return target.apply(this, arguments);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }
  function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
  }
  
  var inherits = function(Child, Parent) {
      var hasProp = {}.hasOwnProperty;
  
      function T() {
          this.constructor = Child;
          this.constructor$ = Parent;
          for (var propertyName in Parent.prototype) {
              if (hasProp.call(Parent.prototype, propertyName) &&
                  propertyName.charAt(propertyName.length-1) !== "$"
             ) {
                  this[propertyName + "$"] = Parent.prototype[propertyName];
              }
          }
      }
      T.prototype = Parent.prototype;
      Child.prototype = new T();
      return Child.prototype;
  };
  
  
  function isPrimitive(val) {
      return val == null || val === true || val === false ||
          typeof val === "string" || typeof val === "number";
  
  }
  
  function isObject(value) {
      return typeof value === "function" ||
             typeof value === "object" && value !== null;
  }
  
  function maybeWrapAsError(maybeError) {
      if (!isPrimitive(maybeError)) return maybeError;
  
      return new Error(safeToString(maybeError));
  }
  
  function withAppended(target, appendee) {
      var len = target.length;
      var ret = new Array(len + 1);
      var i;
      for (i = 0; i < len; ++i) {
          ret[i] = target[i];
      }
      ret[i] = appendee;
      return ret;
  }
  
  function getDataPropertyOrDefault(obj, key, defaultValue) {
      if (es5.isES5) {
          var desc = Object.getOwnPropertyDescriptor(obj, key);
  
          if (desc != null) {
              return desc.get == null && desc.set == null
                      ? desc.value
                      : defaultValue;
          }
      } else {
          return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
      }
  }
  
  function notEnumerableProp(obj, name, value) {
      if (isPrimitive(obj)) return obj;
      var descriptor = {
          value: value,
          configurable: true,
          enumerable: false,
          writable: true
      };
      es5.defineProperty(obj, name, descriptor);
      return obj;
  }
  
  function thrower(r) {
      throw r;
  }
  
  var inheritedDataKeys = (function() {
      var excludedPrototypes = [
          Array.prototype,
          Object.prototype,
          Function.prototype
      ];
  
      var isExcludedProto = function(val) {
          for (var i = 0; i < excludedPrototypes.length; ++i) {
              if (excludedPrototypes[i] === val) {
                  return true;
              }
          }
          return false;
      };
  
      if (es5.isES5) {
          var getKeys = Object.getOwnPropertyNames;
          return function(obj) {
              var ret = [];
              var visitedKeys = Object.create(null);
              while (obj != null && !isExcludedProto(obj)) {
                  var keys;
                  try {
                      keys = getKeys(obj);
                  } catch (e) {
                      return ret;
                  }
                  for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key]) continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                          ret.push(key);
                      }
                  }
                  obj = es5.getPrototypeOf(obj);
              }
              return ret;
          };
      } else {
          var hasProp = {}.hasOwnProperty;
          return function(obj) {
              if (isExcludedProto(obj)) return [];
              var ret = [];
  
              /*jshint forin:false */
              enumeration: for (var key in obj) {
                  if (hasProp.call(obj, key)) {
                      ret.push(key);
                  } else {
                      for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                              continue enumeration;
                          }
                      }
                      ret.push(key);
                  }
              }
              return ret;
          };
      }
  
  })();
  
  var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
  function isClass(fn) {
      try {
          if (typeof fn === "function") {
              var keys = es5.names(fn.prototype);
  
              var hasMethods = es5.isES5 && keys.length > 1;
              var hasMethodsOtherThanConstructor = keys.length > 0 &&
                  !(keys.length === 1 && keys[0] === "constructor");
              var hasThisAssignmentAndStaticMethods =
                  thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;
  
              if (hasMethods || hasMethodsOtherThanConstructor ||
                  hasThisAssignmentAndStaticMethods) {
                  return true;
              }
          }
          return false;
      } catch (e) {
          return false;
      }
  }
  
  function toFastProperties(obj) {
      /*jshint -W027,-W055,-W031*/
      function FakeConstructor() {}
      FakeConstructor.prototype = obj;
      var l = 8;
      while (l--) new FakeConstructor();
      return obj;
      eval(obj);
  }
  
  var rident = /^[a-z$_][a-z$_0-9]*$/i;
  function isIdentifier(str) {
      return rident.test(str);
  }
  
  function filledRange(count, prefix, suffix) {
      var ret = new Array(count);
      for(var i = 0; i < count; ++i) {
          ret[i] = prefix + i + suffix;
      }
      return ret;
  }
  
  function safeToString(obj) {
      try {
          return obj + "";
      } catch (e) {
          return "[no string representation]";
      }
  }
  
  function isError(obj) {
      return obj !== null &&
             typeof obj === "object" &&
             typeof obj.message === "string" &&
             typeof obj.name === "string";
  }
  
  function markAsOriginatingFromRejection(e) {
      try {
          notEnumerableProp(e, "isOperational", true);
      }
      catch(ignore) {}
  }
  
  function originatesFromRejection(e) {
      if (e == null) return false;
      return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
          e["isOperational"] === true);
  }
  
  function canAttachTrace(obj) {
      return isError(obj) && es5.propertyIsWritable(obj, "stack");
  }
  
  var ensureErrorObject = (function() {
      if (!("stack" in new Error())) {
          return function(value) {
              if (canAttachTrace(value)) return value;
              try {throw new Error(safeToString(value));}
              catch(err) {return err;}
          };
      } else {
          return function(value) {
              if (canAttachTrace(value)) return value;
              return new Error(safeToString(value));
          };
      }
  })();
  
  function classString(obj) {
      return {}.toString.call(obj);
  }
  
  function copyDescriptors(from, to, filter) {
      var keys = es5.names(from);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (filter(key)) {
              try {
                  es5.defineProperty(to, key, es5.getDescriptor(from, key));
              } catch (ignore) {}
          }
      }
  }
  
  var asArray = function(v) {
      if (es5.isArray(v)) {
          return v;
      }
      return null;
  };
  
  if (typeof Symbol !== "undefined" && Symbol.iterator) {
      var ArrayFrom = typeof Array.from === "function" ? function(v) {
          return Array.from(v);
      } : function(v) {
          var ret = [];
          var it = v[Symbol.iterator]();
          var itResult;
          while (!((itResult = it.next()).done)) {
              ret.push(itResult.value);
          }
          return ret;
      };
  
      asArray = function(v) {
          if (es5.isArray(v)) {
              return v;
          } else if (v != null && typeof v[Symbol.iterator] === "function") {
              return ArrayFrom(v);
          }
          return null;
      };
  }
  
  var isNode = "undefined" !== "undefined" &&
          classString(process).toLowerCase() === "[object process]";
  
  var hasEnvVariables = "undefined" !== "undefined" &&
      "undefined" !== "undefined";
  
  function env(key) {
      return hasEnvVariables ? process.env[key] : undefined;
  }
  
  function getNativePromise() {
      if (typeof Promise === "function") {
          try {
              var promise = new Promise(function(){});
              if ({}.toString.call(promise) === "[object Promise]") {
                  return Promise;
              }
          } catch (e) {}
      }
  }
  
  function domainBind(self, cb) {
      return self.bind(cb);
  }
  
  var ret = {
      isClass: isClass,
      isIdentifier: isIdentifier,
      inheritedDataKeys: inheritedDataKeys,
      getDataPropertyOrDefault: getDataPropertyOrDefault,
      thrower: thrower,
      isArray: es5.isArray,
      asArray: asArray,
      notEnumerableProp: notEnumerableProp,
      isPrimitive: isPrimitive,
      isObject: isObject,
      isError: isError,
      canEvaluate: canEvaluate,
      errorObj: errorObj,
      tryCatch: tryCatch,
      inherits: inherits,
      withAppended: withAppended,
      maybeWrapAsError: maybeWrapAsError,
      toFastProperties: toFastProperties,
      filledRange: filledRange,
      toString: safeToString,
      canAttachTrace: canAttachTrace,
      ensureErrorObject: ensureErrorObject,
      originatesFromRejection: originatesFromRejection,
      markAsOriginatingFromRejection: markAsOriginatingFromRejection,
      classString: classString,
      copyDescriptors: copyDescriptors,
      hasDevTools: typeof chrome !== "undefined" && chrome &&
                   typeof chrome.loadTimes === "function",
      isNode: isNode,
      hasEnvVariables: hasEnvVariables,
      env: env,
      global: globalObject,
      getNativePromise: getNativePromise,
      domainBind: domainBind
  };
  ret.isRecentNode = ret.isNode && (function() {
      var version = process.versions.node.split(".").map(Number);
      return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
  })();
  
  if (ret.isNode) ret.toFastProperties(process);
  
  try {throw new Error(); } catch (e) {ret.lastLineError = e;}
  module.exports = ret;
  
  },{"./es5":13}]},{},[4])(4)
  });                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }

});

;/*!/node_modules/we-status/dist/sub/system.js*/
define('common:node_modules/we-status/dist/sub/system', function(require, exports, module) {

  /**
   * Created by wangcheng on 16/5/9.
   */
  
  'use strict';
  
  module.exports = {
  
      success: 0,
  
      session_expire: 1001,
  
      //server side error
      ral_error: -1,
      backend_error: 50000,
      node_error: 50001,
  
      //client side error
      common_arg_miss: 40000,
      page_not_found: 40001
  };

});

;/*!/node_modules/we-status/dist/sub/exchange.js*/
define('common:node_modules/we-status/dist/sub/exchange', function(require, exports, module) {

  /**
   * Created by wangcheng on 16/5/9.
   */
  
  'use strict';

});

;/*!/node_modules/we-status/dist/sub/passport.js*/
define('common:node_modules/we-status/dist/sub/passport', function(require, exports, module) {

  /**
   * Created by jess on 2017/2/23.
   */
  
  'use strict';
  
  module.exports = {
  
    //图形验证码错误
    captcha_error: 950001
  };

});

;/*!/node_modules/we-status/dist/index.js*/
define('common:node_modules/we-status/dist/index', function(require, exports, module) {

  /**
   * Created by wangcheng on 16/5/9.
   */
  
  'use strict';
  
  var systemStatus = require('common:node_modules/we-status/dist/sub/system');
  var exchangeStatus = require('common:node_modules/we-status/dist/sub/exchange');
  var passport = require('common:node_modules/we-status/dist/sub/passport');
  
  module.exports = {
      sys: systemStatus,
      exchange: exchangeStatus,
      passport: passport
  };

});

;/*!/node_modules/react/lib/ReactCurrentOwner.js*/
define('common:node_modules/react/lib/ReactCurrentOwner', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactCurrentOwner
   */
  
  'use strict';
  
  /**
   * Keeps track of the current owner.
   *
   * The current owner is the component who should own any components that are
   * currently being constructed.
   */
  var ReactCurrentOwner = {
  
    /**
     * @internal
     * @type {ReactComponent}
     */
    current: null
  
  };
  
  module.exports = ReactCurrentOwner;

});

;/*!/node_modules/fbjs/lib/ExecutionEnvironment.js*/
define('common:node_modules/fbjs/lib/ExecutionEnvironment', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ExecutionEnvironment
   */
  
  'use strict';
  
  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  
  /**
   * Simple, lightweight module assisting with the detection and context of
   * Worker. Helps avoid circular dependencies and allows code to reason about
   * whether or not they are in a Worker, even if they never include the main
   * `ReactWorker` dependency.
   */
  var ExecutionEnvironment = {
  
    canUseDOM: canUseDOM,
  
    canUseWorkers: typeof Worker !== 'undefined',
  
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  
    canUseViewport: canUseDOM && !!window.screen,
  
    isInWorker: !canUseDOM // For now, this is true - might change in the future.
  
  };
  
  module.exports = ExecutionEnvironment;

});

;/*!/node_modules/fbjs/lib/invariant.js*/
define('common:node_modules/fbjs/lib/invariant', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule invariant
   */
  
  'use strict';
  
  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */
  
  function invariant(condition, format, a, b, c, d, e, f) {
    if ('development' !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }
  
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }
  
      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  }
  
  module.exports = invariant;

});

;/*!/node_modules/fbjs/lib/toArray.js*/
define('common:node_modules/fbjs/lib/toArray', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule toArray
   * @typechecks
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Convert array-like objects to arrays.
   *
   * This API assumes the caller knows the contents of the data type. For less
   * well defined inputs use createArrayFromMixed.
   *
   * @param {object|function|filelist} obj
   * @return {array}
   */
  function toArray(obj) {
    var length = obj.length;
  
    // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
    // old versions of Safari).
    !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? 'development' !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
  
    !(typeof length === 'number') ? 'development' !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
  
    !(length === 0 || length - 1 in obj) ? 'development' !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
  
    // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
    // without method will throw during the slice call and skip straight to the
    // fallback.
    if (obj.hasOwnProperty) {
      try {
        return Array.prototype.slice.call(obj);
      } catch (e) {
        // IE < 9 does not support Array#slice on collections objects
      }
    }
  
    // Fall back to copying key by key. This assumes all keys have a value,
    // so will not preserve sparsely populated inputs.
    var ret = Array(length);
    for (var ii = 0; ii < length; ii++) {
      ret[ii] = obj[ii];
    }
    return ret;
  }
  
  module.exports = toArray;

});

;/*!/node_modules/fbjs/lib/createArrayFromMixed.js*/
define('common:node_modules/fbjs/lib/createArrayFromMixed', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule createArrayFromMixed
   * @typechecks
   */
  
  'use strict';
  
  var toArray = require('common:node_modules/fbjs/lib/toArray');
  
  /**
   * Perform a heuristic test to determine if an object is "array-like".
   *
   *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
   *   Joshu replied: "Mu."
   *
   * This function determines if its argument has "array nature": it returns
   * true if the argument is an actual array, an `arguments' object, or an
   * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
   *
   * It will return false for other array-like objects like Filelist.
   *
   * @param {*} obj
   * @return {boolean}
   */
  function hasArrayNature(obj) {
    return(
      // not null/false
      !!obj && (
      // arrays are objects, NodeLists are functions in Safari
      typeof obj == 'object' || typeof obj == 'function') &&
      // quacks like an array
      'length' in obj &&
      // not window
      !('setInterval' in obj) &&
      // no DOM node should be considered an array-like
      // a 'select' element has 'length' and 'item' properties on IE8
      typeof obj.nodeType != 'number' && (
      // a real array
      Array.isArray(obj) ||
      // arguments
      'callee' in obj ||
      // HTMLCollection/NodeList
      'item' in obj)
    );
  }
  
  /**
   * Ensure that the argument is an array by wrapping it in an array if it is not.
   * Creates a copy of the argument if it is already an array.
   *
   * This is mostly useful idiomatically:
   *
   *   var createArrayFromMixed = require('createArrayFromMixed');
   *
   *   function takesOneOrMoreThings(things) {
   *     things = createArrayFromMixed(things);
   *     ...
   *   }
   *
   * This allows you to treat `things' as an array, but accept scalars in the API.
   *
   * If you need to convert an array-like object, like `arguments`, into an array
   * use toArray instead.
   *
   * @param {*} obj
   * @return {array}
   */
  function createArrayFromMixed(obj) {
    if (!hasArrayNature(obj)) {
      return [obj];
    } else if (Array.isArray(obj)) {
      return obj.slice();
    } else {
      return toArray(obj);
    }
  }
  
  module.exports = createArrayFromMixed;

});

;/*!/node_modules/fbjs/lib/getMarkupWrap.js*/
define('common:node_modules/fbjs/lib/getMarkupWrap', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getMarkupWrap
   */
  
  /*eslint-disable fb-www/unsafe-html */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Dummy container used to detect which wraps are necessary.
   */
  var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
  
  /**
   * Some browsers cannot use `innerHTML` to render certain elements standalone,
   * so we wrap them, render the wrapped nodes, then extract the desired node.
   *
   * In IE8, certain elements cannot render alone, so wrap all elements ('*').
   */
  
  var shouldWrap = {};
  
  var selectWrap = [1, '<select multiple="true">', '</select>'];
  var tableWrap = [1, '<table>', '</table>'];
  var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
  
  var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
  
  var markupWrap = {
    '*': [1, '?<div>', '</div>'],
  
    'area': [1, '<map>', '</map>'],
    'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    'legend': [1, '<fieldset>', '</fieldset>'],
    'param': [1, '<object>', '</object>'],
    'tr': [2, '<table><tbody>', '</tbody></table>'],
  
    'optgroup': selectWrap,
    'option': selectWrap,
  
    'caption': tableWrap,
    'colgroup': tableWrap,
    'tbody': tableWrap,
    'tfoot': tableWrap,
    'thead': tableWrap,
  
    'td': trWrap,
    'th': trWrap
  };
  
  // Initialize the SVG elements since we know they'll always need to be wrapped
  // consistently. If they are created inside a <div> they will be initialized in
  // the wrong namespace (and will not display).
  var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
  svgElements.forEach(function (nodeName) {
    markupWrap[nodeName] = svgWrap;
    shouldWrap[nodeName] = true;
  });
  
  /**
   * Gets the markup wrap configuration for the supplied `nodeName`.
   *
   * NOTE: This lazily detects which wraps are necessary for the current browser.
   *
   * @param {string} nodeName Lowercase `nodeName`.
   * @return {?array} Markup wrap configuration, if applicable.
   */
  function getMarkupWrap(nodeName) {
    !!!dummyNode ? 'development' !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
    if (!markupWrap.hasOwnProperty(nodeName)) {
      nodeName = '*';
    }
    if (!shouldWrap.hasOwnProperty(nodeName)) {
      if (nodeName === '*') {
        dummyNode.innerHTML = '<link />';
      } else {
        dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
      }
      shouldWrap[nodeName] = !dummyNode.firstChild;
    }
    return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
  }
  
  module.exports = getMarkupWrap;

});

;/*!/node_modules/fbjs/lib/createNodesFromMarkup.js*/
define('common:node_modules/fbjs/lib/createNodesFromMarkup', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule createNodesFromMarkup
   * @typechecks
   */
  
  /*eslint-disable fb-www/unsafe-html*/
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var createArrayFromMixed = require('common:node_modules/fbjs/lib/createArrayFromMixed');
  var getMarkupWrap = require('common:node_modules/fbjs/lib/getMarkupWrap');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Dummy container used to render all markup.
   */
  var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
  
  /**
   * Pattern used by `getNodeName`.
   */
  var nodeNamePattern = /^\s*<(\w+)/;
  
  /**
   * Extracts the `nodeName` of the first element in a string of markup.
   *
   * @param {string} markup String of markup.
   * @return {?string} Node name of the supplied markup.
   */
  function getNodeName(markup) {
    var nodeNameMatch = markup.match(nodeNamePattern);
    return nodeNameMatch && nodeNameMatch[1].toLowerCase();
  }
  
  /**
   * Creates an array containing the nodes rendered from the supplied markup. The
   * optionally supplied `handleScript` function will be invoked once for each
   * <script> element that is rendered. If no `handleScript` function is supplied,
   * an exception is thrown if any <script> elements are rendered.
   *
   * @param {string} markup A string of valid HTML markup.
   * @param {?function} handleScript Invoked once for each rendered <script>.
   * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
   */
  function createNodesFromMarkup(markup, handleScript) {
    var node = dummyNode;
    !!!dummyNode ? 'development' !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
    var nodeName = getNodeName(markup);
  
    var wrap = nodeName && getMarkupWrap(nodeName);
    if (wrap) {
      node.innerHTML = wrap[1] + markup + wrap[2];
  
      var wrapDepth = wrap[0];
      while (wrapDepth--) {
        node = node.lastChild;
      }
    } else {
      node.innerHTML = markup;
    }
  
    var scripts = node.getElementsByTagName('script');
    if (scripts.length) {
      !handleScript ? 'development' !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
      createArrayFromMixed(scripts).forEach(handleScript);
    }
  
    var nodes = createArrayFromMixed(node.childNodes);
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
    return nodes;
  }
  
  module.exports = createNodesFromMarkup;

});

;/*!/node_modules/fbjs/lib/emptyFunction.js*/
define('common:node_modules/fbjs/lib/emptyFunction', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule emptyFunction
   */
  
  "use strict";
  
  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }
  
  /**
   * This function accepts and discards inputs; it has no side effects. This is
   * primarily useful idiomatically for overridable function endpoints which
   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
   */
  function emptyFunction() {}
  
  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function () {
    return this;
  };
  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };
  
  module.exports = emptyFunction;

});

;/*!/node_modules/react/lib/Danger.js*/
define('common:node_modules/react/lib/Danger', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Danger
   * @typechecks static-only
   */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var createNodesFromMarkup = require('common:node_modules/fbjs/lib/createNodesFromMarkup');
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  var getMarkupWrap = require('common:node_modules/fbjs/lib/getMarkupWrap');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
  var RESULT_INDEX_ATTR = 'data-danger-index';
  
  /**
   * Extracts the `nodeName` from a string of markup.
   *
   * NOTE: Extracting the `nodeName` does not require a regular expression match
   * because we make assumptions about React-generated markup (i.e. there are no
   * spaces surrounding the opening tag and there is at least one attribute).
   *
   * @param {string} markup String of markup.
   * @return {string} Node name of the supplied markup.
   * @see http://jsperf.com/extract-nodename
   */
  function getNodeName(markup) {
    return markup.substring(1, markup.indexOf(' '));
  }
  
  var Danger = {
  
    /**
     * Renders markup into an array of nodes. The markup is expected to render
     * into a list of root nodes. Also, the length of `resultList` and
     * `markupList` should be the same.
     *
     * @param {array<string>} markupList List of markup strings to render.
     * @return {array<DOMElement>} List of rendered nodes.
     * @internal
     */
    dangerouslyRenderMarkup: function (markupList) {
      !ExecutionEnvironment.canUseDOM ? 'development' !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
      var nodeName;
      var markupByNodeName = {};
      // Group markup by `nodeName` if a wrap is necessary, else by '*'.
      for (var i = 0; i < markupList.length; i++) {
        !markupList[i] ? 'development' !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
        nodeName = getNodeName(markupList[i]);
        nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
        markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
        markupByNodeName[nodeName][i] = markupList[i];
      }
      var resultList = [];
      var resultListAssignmentCount = 0;
      for (nodeName in markupByNodeName) {
        if (!markupByNodeName.hasOwnProperty(nodeName)) {
          continue;
        }
        var markupListByNodeName = markupByNodeName[nodeName];
  
        // This for-in loop skips the holes of the sparse array. The order of
        // iteration should follow the order of assignment, which happens to match
        // numerical index order, but we don't rely on that.
        var resultIndex;
        for (resultIndex in markupListByNodeName) {
          if (markupListByNodeName.hasOwnProperty(resultIndex)) {
            var markup = markupListByNodeName[resultIndex];
  
            // Push the requested markup with an additional RESULT_INDEX_ATTR
            // attribute.  If the markup does not start with a < character, it
            // will be discarded below (with an appropriate console.error).
            markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
          }
        }
  
        // Render each group of markup with similar wrapping `nodeName`.
        var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
        );
  
        for (var j = 0; j < renderNodes.length; ++j) {
          var renderNode = renderNodes[j];
          if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
  
            resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
            renderNode.removeAttribute(RESULT_INDEX_ATTR);
  
            !!resultList.hasOwnProperty(resultIndex) ? 'development' !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
  
            resultList[resultIndex] = renderNode;
  
            // This should match resultList.length and markupList.length when
            // we're done.
            resultListAssignmentCount += 1;
          } else if ('development' !== 'production') {
            console.error('Danger: Discarding unexpected node:', renderNode);
          }
        }
      }
  
      // Although resultList was populated out of order, it should now be a dense
      // array.
      !(resultListAssignmentCount === resultList.length) ? 'development' !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
  
      !(resultList.length === markupList.length) ? 'development' !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
  
      return resultList;
    },
  
    /**
     * Replaces a node with a string of markup at its current position within its
     * parent. The markup must render into a single root node.
     *
     * @param {DOMElement} oldChild Child node to replace.
     * @param {string} markup Markup to render in place of the child node.
     * @internal
     */
    dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
      !ExecutionEnvironment.canUseDOM ? 'development' !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
      !markup ? 'development' !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
      !(oldChild.tagName.toLowerCase() !== 'html') ? 'development' !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
  
      var newChild;
      if (typeof markup === 'string') {
        newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      } else {
        newChild = markup;
      }
      oldChild.parentNode.replaceChild(newChild, oldChild);
    }
  
  };
  
  module.exports = Danger;

});

;/*!/node_modules/fbjs/lib/keyMirror.js*/
define('common:node_modules/fbjs/lib/keyMirror', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule keyMirror
   * @typechecks static-only
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Constructs an enumeration with keys equal to their value.
   *
   * For example:
   *
   *   var COLORS = keyMirror({blue: null, red: null});
   *   var myColor = COLORS.blue;
   *   var isColorValid = !!COLORS[myColor];
   *
   * The last line could not be performed if the values of the generated enum were
   * not equal to their keys.
   *
   *   Input:  {key1: val1, key2: val2}
   *   Output: {key1: key1, key2: key2}
   *
   * @param {object} obj
   * @return {object}
   */
  var keyMirror = function (obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? 'development' !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }
      ret[key] = key;
    }
    return ret;
  };
  
  module.exports = keyMirror;

});

;/*!/node_modules/react/lib/ReactMultiChildUpdateTypes.js*/
define('common:node_modules/react/lib/ReactMultiChildUpdateTypes', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMultiChildUpdateTypes
   */
  
  'use strict';
  
  var keyMirror = require('common:node_modules/fbjs/lib/keyMirror');
  
  /**
   * When a component's children are updated, a series of update configuration
   * objects are created in order to batch and serialize the required changes.
   *
   * Enumerates all the possible types of update configurations.
   *
   * @internal
   */
  var ReactMultiChildUpdateTypes = keyMirror({
    INSERT_MARKUP: null,
    MOVE_EXISTING: null,
    REMOVE_NODE: null,
    SET_MARKUP: null,
    TEXT_CONTENT: null
  });
  
  module.exports = ReactMultiChildUpdateTypes;

});

;/*!/node_modules/react/lib/ReactPerf.js*/
define('common:node_modules/react/lib/ReactPerf', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPerf
   * @typechecks static-only
   */
  
  'use strict';
  
  /**
   * ReactPerf is a general AOP system designed to measure performance. This
   * module only has the hooks: see ReactDefaultPerf for the analysis tool.
   */
  var ReactPerf = {
    /**
     * Boolean to enable/disable measurement. Set to false by default to prevent
     * accidental logging and perf loss.
     */
    enableMeasure: false,
  
    /**
     * Holds onto the measure function in use. By default, don't measure
     * anything, but we'll override this if we inject a measure function.
     */
    storedMeasure: _noMeasure,
  
    /**
     * @param {object} object
     * @param {string} objectName
     * @param {object<string>} methodNames
     */
    measureMethods: function (object, objectName, methodNames) {
      if ('development' !== 'production') {
        for (var key in methodNames) {
          if (!methodNames.hasOwnProperty(key)) {
            continue;
          }
          object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
        }
      }
    },
  
    /**
     * Use this to wrap methods you want to measure. Zero overhead in production.
     *
     * @param {string} objName
     * @param {string} fnName
     * @param {function} func
     * @return {function}
     */
    measure: function (objName, fnName, func) {
      if ('development' !== 'production') {
        var measuredFunc = null;
        var wrapper = function () {
          if (ReactPerf.enableMeasure) {
            if (!measuredFunc) {
              measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
            }
            return measuredFunc.apply(this, arguments);
          }
          return func.apply(this, arguments);
        };
        wrapper.displayName = objName + '_' + fnName;
        return wrapper;
      }
      return func;
    },
  
    injection: {
      /**
       * @param {function} measure
       */
      injectMeasure: function (measure) {
        ReactPerf.storedMeasure = measure;
      }
    }
  };
  
  /**
   * Simply passes through the measured function, without measuring it.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  function _noMeasure(objName, fnName, func) {
    return func;
  }
  
  module.exports = ReactPerf;

});

;/*!/node_modules/react/lib/setInnerHTML.js*/
define('common:node_modules/react/lib/setInnerHTML', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule setInnerHTML
   */
  
  /* globals MSApp */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var WHITESPACE_TEST = /^[ \r\n\t\f]/;
  var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
  
  /**
   * Set the innerHTML property of a node, ensuring that whitespace is preserved
   * even in IE8.
   *
   * @param {DOMElement} node
   * @param {string} html
   * @internal
   */
  var setInnerHTML = function (node, html) {
    node.innerHTML = html;
  };
  
  // Win8 apps: Allow all html to be inserted
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    setInnerHTML = function (node, html) {
      MSApp.execUnsafeLocalFunction(function () {
        node.innerHTML = html;
      });
    };
  }
  
  if (ExecutionEnvironment.canUseDOM) {
    // IE8: When updating a just created node with innerHTML only leading
    // whitespace is removed. When updating an existing node with innerHTML
    // whitespace in root TextNodes is also collapsed.
    // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
  
    // Feature detection; only IE8 is known to behave improperly like this.
    var testElement = document.createElement('div');
    testElement.innerHTML = ' ';
    if (testElement.innerHTML === '') {
      setInnerHTML = function (node, html) {
        // Magic theory: IE8 supposedly differentiates between added and updated
        // nodes when processing innerHTML, innerHTML on updated nodes suffers
        // from worse whitespace behavior. Re-adding a node like this triggers
        // the initial and more favorable whitespace behavior.
        // TODO: What to do on a detached node?
        if (node.parentNode) {
          node.parentNode.replaceChild(node, node);
        }
  
        // We also implement a workaround for non-visible tags disappearing into
        // thin air on IE8, this only happens if there is no visible text
        // in-front of the non-visible tags. Piggyback on the whitespace fix
        // and simply check if any non-visible tags appear in the source.
        if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
          // Recover leading whitespace by temporarily prepending any character.
          // \uFEFF has the potential advantage of being zero-width/invisible.
          // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
          // in hopes that this is preserved even if "\uFEFF" is transformed to
          // the actual Unicode character (by Babel, for example).
          // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
          node.innerHTML = String.fromCharCode(0xFEFF) + html;
  
          // deleteData leaves an empty `TextNode` which offsets the index of all
          // children. Definitely want to avoid this.
          var textNode = node.firstChild;
          if (textNode.data.length === 1) {
            node.removeChild(textNode);
          } else {
            textNode.deleteData(0, 1);
          }
        } else {
          node.innerHTML = html;
        }
      };
    }
  }
  
  module.exports = setInnerHTML;

});

;/*!/node_modules/react/lib/escapeTextContentForBrowser.js*/
define('common:node_modules/react/lib/escapeTextContentForBrowser', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule escapeTextContentForBrowser
   */
  
  'use strict';
  
  var ESCAPE_LOOKUP = {
    '&': '&amp;',
    '>': '&gt;',
    '<': '&lt;',
    '"': '&quot;',
    '\'': '&#x27;'
  };
  
  var ESCAPE_REGEX = /[&><"']/g;
  
  function escaper(match) {
    return ESCAPE_LOOKUP[match];
  }
  
  /**
   * Escapes text to prevent scripting attacks.
   *
   * @param {*} text Text value to escape.
   * @return {string} An escaped string.
   */
  function escapeTextContentForBrowser(text) {
    return ('' + text).replace(ESCAPE_REGEX, escaper);
  }
  
  module.exports = escapeTextContentForBrowser;

});

;/*!/node_modules/react/lib/setTextContent.js*/
define('common:node_modules/react/lib/setTextContent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule setTextContent
   */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  var escapeTextContentForBrowser = require('common:node_modules/react/lib/escapeTextContentForBrowser');
  var setInnerHTML = require('common:node_modules/react/lib/setInnerHTML');
  
  /**
   * Set the textContent property of a node, ensuring that whitespace is preserved
   * even in IE8. innerText is a poor substitute for textContent and, among many
   * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
   * as it should.
   *
   * @param {DOMElement} node
   * @param {string} text
   * @internal
   */
  var setTextContent = function (node, text) {
    node.textContent = text;
  };
  
  if (ExecutionEnvironment.canUseDOM) {
    if (!('textContent' in document.documentElement)) {
      setTextContent = function (node, text) {
        setInnerHTML(node, escapeTextContentForBrowser(text));
      };
    }
  }
  
  module.exports = setTextContent;

});

;/*!/node_modules/react/lib/DOMChildrenOperations.js*/
define('common:node_modules/react/lib/DOMChildrenOperations', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMChildrenOperations
   * @typechecks static-only
   */
  
  'use strict';
  
  var Danger = require('common:node_modules/react/lib/Danger');
  var ReactMultiChildUpdateTypes = require('common:node_modules/react/lib/ReactMultiChildUpdateTypes');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  
  var setInnerHTML = require('common:node_modules/react/lib/setInnerHTML');
  var setTextContent = require('common:node_modules/react/lib/setTextContent');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Inserts `childNode` as a child of `parentNode` at the `index`.
   *
   * @param {DOMElement} parentNode Parent node in which to insert.
   * @param {DOMElement} childNode Child node to insert.
   * @param {number} index Index at which to insert the child.
   * @internal
   */
  function insertChildAt(parentNode, childNode, index) {
    // By exploiting arrays returning `undefined` for an undefined index, we can
    // rely exclusively on `insertBefore(node, null)` instead of also using
    // `appendChild(node)`. However, using `undefined` is not allowed by all
    // browsers so we must replace it with `null`.
  
    // fix render order error in safari
    // IE8 will throw error when index out of list size.
    var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
  
    parentNode.insertBefore(childNode, beforeChild);
  }
  
  /**
   * Operations for updating with DOM children.
   */
  var DOMChildrenOperations = {
  
    dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
  
    updateTextContent: setTextContent,
  
    /**
     * Updates a component's children by processing a series of updates. The
     * update configurations are each expected to have a `parentNode` property.
     *
     * @param {array<object>} updates List of update configurations.
     * @param {array<string>} markupList List of markup strings.
     * @internal
     */
    processUpdates: function (updates, markupList) {
      var update;
      // Mapping from parent IDs to initial child orderings.
      var initialChildren = null;
      // List of children that will be moved or removed.
      var updatedChildren = null;
  
      for (var i = 0; i < updates.length; i++) {
        update = updates[i];
        if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
          var updatedIndex = update.fromIndex;
          var updatedChild = update.parentNode.childNodes[updatedIndex];
          var parentID = update.parentID;
  
          !updatedChild ? 'development' !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
  
          initialChildren = initialChildren || {};
          initialChildren[parentID] = initialChildren[parentID] || [];
          initialChildren[parentID][updatedIndex] = updatedChild;
  
          updatedChildren = updatedChildren || [];
          updatedChildren.push(updatedChild);
        }
      }
  
      var renderedMarkup;
      // markupList is either a list of markup or just a list of elements
      if (markupList.length && typeof markupList[0] === 'string') {
        renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
      } else {
        renderedMarkup = markupList;
      }
  
      // Remove updated children first so that `toIndex` is consistent.
      if (updatedChildren) {
        for (var j = 0; j < updatedChildren.length; j++) {
          updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
        }
      }
  
      for (var k = 0; k < updates.length; k++) {
        update = updates[k];
        switch (update.type) {
          case ReactMultiChildUpdateTypes.INSERT_MARKUP:
            insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
            break;
          case ReactMultiChildUpdateTypes.MOVE_EXISTING:
            insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
            break;
          case ReactMultiChildUpdateTypes.SET_MARKUP:
            setInnerHTML(update.parentNode, update.content);
            break;
          case ReactMultiChildUpdateTypes.TEXT_CONTENT:
            setTextContent(update.parentNode, update.content);
            break;
          case ReactMultiChildUpdateTypes.REMOVE_NODE:
            // Already removed by the for-loop above.
            break;
        }
      }
    }
  
  };
  
  ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
    updateTextContent: 'updateTextContent'
  });
  
  module.exports = DOMChildrenOperations;

});

;/*!/node_modules/react/lib/DOMProperty.js*/
define('common:node_modules/react/lib/DOMProperty', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMProperty
   * @typechecks static-only
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  function checkMask(value, bitmask) {
    return (value & bitmask) === bitmask;
  }
  
  var DOMPropertyInjection = {
    /**
     * Mapping from normalized, camelcased property names to a configuration that
     * specifies how the associated DOM property should be accessed or rendered.
     */
    MUST_USE_ATTRIBUTE: 0x1,
    MUST_USE_PROPERTY: 0x2,
    HAS_SIDE_EFFECTS: 0x4,
    HAS_BOOLEAN_VALUE: 0x8,
    HAS_NUMERIC_VALUE: 0x10,
    HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
    HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
  
    /**
     * Inject some specialized knowledge about the DOM. This takes a config object
     * with the following properties:
     *
     * isCustomAttribute: function that given an attribute name will return true
     * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
     * attributes where it's impossible to enumerate all of the possible
     * attribute names,
     *
     * Properties: object mapping DOM property name to one of the
     * DOMPropertyInjection constants or null. If your attribute isn't in here,
     * it won't get written to the DOM.
     *
     * DOMAttributeNames: object mapping React attribute name to the DOM
     * attribute name. Attribute names not specified use the **lowercase**
     * normalized name.
     *
     * DOMAttributeNamespaces: object mapping React attribute name to the DOM
     * attribute namespace URL. (Attribute names not specified use no namespace.)
     *
     * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
     * Property names not specified use the normalized name.
     *
     * DOMMutationMethods: Properties that require special mutation methods. If
     * `value` is undefined, the mutation method should unset the property.
     *
     * @param {object} domPropertyConfig the config as described above.
     */
    injectDOMPropertyConfig: function (domPropertyConfig) {
      var Injection = DOMPropertyInjection;
      var Properties = domPropertyConfig.Properties || {};
      var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
      var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
      var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
      var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
  
      if (domPropertyConfig.isCustomAttribute) {
        DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
      }
  
      for (var propName in Properties) {
        !!DOMProperty.properties.hasOwnProperty(propName) ? 'development' !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
  
        var lowerCased = propName.toLowerCase();
        var propConfig = Properties[propName];
  
        var propertyInfo = {
          attributeName: lowerCased,
          attributeNamespace: null,
          propertyName: propName,
          mutationMethod: null,
  
          mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
          mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
          hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
          hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
          hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
          hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
          hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
        };
  
        !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? 'development' !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
        !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? 'development' !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
        !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? 'development' !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
  
        if ('development' !== 'production') {
          DOMProperty.getPossibleStandardName[lowerCased] = propName;
        }
  
        if (DOMAttributeNames.hasOwnProperty(propName)) {
          var attributeName = DOMAttributeNames[propName];
          propertyInfo.attributeName = attributeName;
          if ('development' !== 'production') {
            DOMProperty.getPossibleStandardName[attributeName] = propName;
          }
        }
  
        if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
          propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
        }
  
        if (DOMPropertyNames.hasOwnProperty(propName)) {
          propertyInfo.propertyName = DOMPropertyNames[propName];
        }
  
        if (DOMMutationMethods.hasOwnProperty(propName)) {
          propertyInfo.mutationMethod = DOMMutationMethods[propName];
        }
  
        DOMProperty.properties[propName] = propertyInfo;
      }
    }
  };
  var defaultValueCache = {};
  
  /**
   * DOMProperty exports lookup objects that can be used like functions:
   *
   *   > DOMProperty.isValid['id']
   *   true
   *   > DOMProperty.isValid['foobar']
   *   undefined
   *
   * Although this may be confusing, it performs better in general.
   *
   * @see http://jsperf.com/key-exists
   * @see http://jsperf.com/key-missing
   */
  var DOMProperty = {
  
    ID_ATTRIBUTE_NAME: 'data-reactid',
  
    /**
     * Map from property "standard name" to an object with info about how to set
     * the property in the DOM. Each object contains:
     *
     * attributeName:
     *   Used when rendering markup or with `*Attribute()`.
     * attributeNamespace
     * propertyName:
     *   Used on DOM node instances. (This includes properties that mutate due to
     *   external factors.)
     * mutationMethod:
     *   If non-null, used instead of the property or `setAttribute()` after
     *   initial render.
     * mustUseAttribute:
     *   Whether the property must be accessed and mutated using `*Attribute()`.
     *   (This includes anything that fails `<propName> in <element>`.)
     * mustUseProperty:
     *   Whether the property must be accessed and mutated as an object property.
     * hasSideEffects:
     *   Whether or not setting a value causes side effects such as triggering
     *   resources to be loaded or text selection changes. If true, we read from
     *   the DOM before updating to ensure that the value is only set if it has
     *   changed.
     * hasBooleanValue:
     *   Whether the property should be removed when set to a falsey value.
     * hasNumericValue:
     *   Whether the property must be numeric or parse as a numeric and should be
     *   removed when set to a falsey value.
     * hasPositiveNumericValue:
     *   Whether the property must be positive numeric or parse as a positive
     *   numeric and should be removed when set to a falsey value.
     * hasOverloadedBooleanValue:
     *   Whether the property can be used as a flag as well as with a value.
     *   Removed when strictly equal to false; present without a value when
     *   strictly equal to true; present with a value otherwise.
     */
    properties: {},
  
    /**
     * Mapping from lowercase property names to the properly cased version, used
     * to warn in the case of missing properties. Available only in __DEV__.
     * @type {Object}
     */
    getPossibleStandardName: 'development' !== 'production' ? {} : null,
  
    /**
     * All of the isCustomAttribute() functions that have been injected.
     */
    _isCustomAttributeFunctions: [],
  
    /**
     * Checks whether a property name is a custom attribute.
     * @method
     */
    isCustomAttribute: function (attributeName) {
      for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
        var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
        if (isCustomAttributeFn(attributeName)) {
          return true;
        }
      }
      return false;
    },
  
    /**
     * Returns the default property value for a DOM property (i.e., not an
     * attribute). Most default values are '' or false, but not all. Worse yet,
     * some (in particular, `type`) vary depending on the type of element.
     *
     * TODO: Is it better to grab all the possible properties when creating an
     * element to avoid having to create the same element twice?
     */
    getDefaultValueForProperty: function (nodeName, prop) {
      var nodeDefaults = defaultValueCache[nodeName];
      var testElement;
      if (!nodeDefaults) {
        defaultValueCache[nodeName] = nodeDefaults = {};
      }
      if (!(prop in nodeDefaults)) {
        testElement = document.createElement(nodeName);
        nodeDefaults[prop] = testElement[prop];
      }
      return nodeDefaults[prop];
    },
  
    injection: DOMPropertyInjection
  };
  
  module.exports = DOMProperty;

});

;/*!/node_modules/react/lib/quoteAttributeValueForBrowser.js*/
define('common:node_modules/react/lib/quoteAttributeValueForBrowser', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule quoteAttributeValueForBrowser
   */
  
  'use strict';
  
  var escapeTextContentForBrowser = require('common:node_modules/react/lib/escapeTextContentForBrowser');
  
  /**
   * Escapes attribute value to prevent scripting attacks.
   *
   * @param {*} value Value to escape.
   * @return {string} An escaped string.
   */
  function quoteAttributeValueForBrowser(value) {
    return '"' + escapeTextContentForBrowser(value) + '"';
  }
  
  module.exports = quoteAttributeValueForBrowser;

});

;/*!/node_modules/fbjs/lib/warning.js*/
define('common:node_modules/fbjs/lib/warning', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule warning
   */
  
  'use strict';
  
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  
  /**
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */
  
  var warning = emptyFunction;
  
  if ('development' !== 'production') {
    warning = function (condition, format) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
  
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
  
      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }
  
      if (!condition) {
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      }
    };
  }
  
  module.exports = warning;

});

;/*!/node_modules/react/lib/DOMPropertyOperations.js*/
define('common:node_modules/react/lib/DOMPropertyOperations', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMPropertyOperations
   * @typechecks static-only
   */
  
  'use strict';
  
  var DOMProperty = require('common:node_modules/react/lib/DOMProperty');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  
  var quoteAttributeValueForBrowser = require('common:node_modules/react/lib/quoteAttributeValueForBrowser');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  // Simplified subset
  var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
  var illegalAttributeNameCache = {};
  var validatedAttributeNameCache = {};
  
  function isAttributeNameSafe(attributeName) {
    if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
      return true;
    }
    if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
      return false;
    }
    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
      validatedAttributeNameCache[attributeName] = true;
      return true;
    }
    illegalAttributeNameCache[attributeName] = true;
    'development' !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
    return false;
  }
  
  function shouldIgnoreValue(propertyInfo, value) {
    return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
  }
  
  if ('development' !== 'production') {
    var reactProps = {
      children: true,
      dangerouslySetInnerHTML: true,
      key: true,
      ref: true
    };
    var warnedProperties = {};
  
    var warnUnknownProperty = function (name) {
      if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
        return;
      }
  
      warnedProperties[name] = true;
      var lowerCasedName = name.toLowerCase();
  
      // data-* attributes should be lowercase; suggest the lowercase version
      var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
  
      // For now, only warn when we have a suggested correction. This prevents
      // logging too much when using transferPropsTo.
      'development' !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
    };
  }
  
  /**
   * Operations for dealing with DOM properties.
   */
  var DOMPropertyOperations = {
  
    /**
     * Creates markup for the ID property.
     *
     * @param {string} id Unescaped ID.
     * @return {string} Markup string.
     */
    createMarkupForID: function (id) {
      return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
    },
  
    setAttributeForID: function (node, id) {
      node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
    },
  
    /**
     * Creates markup for a property.
     *
     * @param {string} name
     * @param {*} value
     * @return {?string} Markup string, or null if the property was invalid.
     */
    createMarkupForProperty: function (name, value) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        if (shouldIgnoreValue(propertyInfo, value)) {
          return '';
        }
        var attributeName = propertyInfo.attributeName;
        if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          return attributeName + '=""';
        }
        return attributeName + '=' + quoteAttributeValueForBrowser(value);
      } else if (DOMProperty.isCustomAttribute(name)) {
        if (value == null) {
          return '';
        }
        return name + '=' + quoteAttributeValueForBrowser(value);
      } else if ('development' !== 'production') {
        warnUnknownProperty(name);
      }
      return null;
    },
  
    /**
     * Creates markup for a custom property.
     *
     * @param {string} name
     * @param {*} value
     * @return {string} Markup string, or empty string if the property was invalid.
     */
    createMarkupForCustomAttribute: function (name, value) {
      if (!isAttributeNameSafe(name) || value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    },
  
    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */
    setValueForProperty: function (node, name, value) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, value);
        } else if (shouldIgnoreValue(propertyInfo, value)) {
          this.deleteValueForProperty(node, name);
        } else if (propertyInfo.mustUseAttribute) {
          var attributeName = propertyInfo.attributeName;
          var namespace = propertyInfo.attributeNamespace;
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          if (namespace) {
            node.setAttributeNS(namespace, attributeName, '' + value);
          } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
            node.setAttribute(attributeName, '');
          } else {
            node.setAttribute(attributeName, '' + value);
          }
        } else {
          var propName = propertyInfo.propertyName;
          // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
          // property type before comparing; only `value` does and is string.
          if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
            // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propName] = value;
          }
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        DOMPropertyOperations.setValueForAttribute(node, name, value);
      } else if ('development' !== 'production') {
        warnUnknownProperty(name);
      }
    },
  
    setValueForAttribute: function (node, name, value) {
      if (!isAttributeNameSafe(name)) {
        return;
      }
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    },
  
    /**
     * Deletes the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     */
    deleteValueForProperty: function (node, name) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, undefined);
        } else if (propertyInfo.mustUseAttribute) {
          node.removeAttribute(propertyInfo.attributeName);
        } else {
          var propName = propertyInfo.propertyName;
          var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
          if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
            node[propName] = defaultValue;
          }
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        node.removeAttribute(name);
      } else if ('development' !== 'production') {
        warnUnknownProperty(name);
      }
    }
  
  };
  
  ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
    setValueForProperty: 'setValueForProperty',
    setValueForAttribute: 'setValueForAttribute',
    deleteValueForProperty: 'deleteValueForProperty'
  });
  
  module.exports = DOMPropertyOperations;

});

;/*!/node_modules/react/lib/EventConstants.js*/
define('common:node_modules/react/lib/EventConstants', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventConstants
   */
  
  'use strict';
  
  var keyMirror = require('common:node_modules/fbjs/lib/keyMirror');
  
  var PropagationPhases = keyMirror({ bubbled: null, captured: null });
  
  /**
   * Types of raw signals from the browser caught at the top level.
   */
  var topLevelTypes = keyMirror({
    topAbort: null,
    topBlur: null,
    topCanPlay: null,
    topCanPlayThrough: null,
    topChange: null,
    topClick: null,
    topCompositionEnd: null,
    topCompositionStart: null,
    topCompositionUpdate: null,
    topContextMenu: null,
    topCopy: null,
    topCut: null,
    topDoubleClick: null,
    topDrag: null,
    topDragEnd: null,
    topDragEnter: null,
    topDragExit: null,
    topDragLeave: null,
    topDragOver: null,
    topDragStart: null,
    topDrop: null,
    topDurationChange: null,
    topEmptied: null,
    topEncrypted: null,
    topEnded: null,
    topError: null,
    topFocus: null,
    topInput: null,
    topKeyDown: null,
    topKeyPress: null,
    topKeyUp: null,
    topLoad: null,
    topLoadedData: null,
    topLoadedMetadata: null,
    topLoadStart: null,
    topMouseDown: null,
    topMouseMove: null,
    topMouseOut: null,
    topMouseOver: null,
    topMouseUp: null,
    topPaste: null,
    topPause: null,
    topPlay: null,
    topPlaying: null,
    topProgress: null,
    topRateChange: null,
    topReset: null,
    topScroll: null,
    topSeeked: null,
    topSeeking: null,
    topSelectionChange: null,
    topStalled: null,
    topSubmit: null,
    topSuspend: null,
    topTextInput: null,
    topTimeUpdate: null,
    topTouchCancel: null,
    topTouchEnd: null,
    topTouchMove: null,
    topTouchStart: null,
    topVolumeChange: null,
    topWaiting: null,
    topWheel: null
  });
  
  var EventConstants = {
    topLevelTypes: topLevelTypes,
    PropagationPhases: PropagationPhases
  };
  
  module.exports = EventConstants;

});

;/*!/node_modules/react/lib/EventPluginRegistry.js*/
define('common:node_modules/react/lib/EventPluginRegistry', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginRegistry
   * @typechecks static-only
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Injectable ordering of event plugins.
   */
  var EventPluginOrder = null;
  
  /**
   * Injectable mapping from names to event plugin modules.
   */
  var namesToPlugins = {};
  
  /**
   * Recomputes the plugin list using the injected plugins and plugin ordering.
   *
   * @private
   */
  function recomputePluginOrdering() {
    if (!EventPluginOrder) {
      // Wait until an `EventPluginOrder` is injected.
      return;
    }
    for (var pluginName in namesToPlugins) {
      var PluginModule = namesToPlugins[pluginName];
      var pluginIndex = EventPluginOrder.indexOf(pluginName);
      !(pluginIndex > -1) ? 'development' !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
      if (EventPluginRegistry.plugins[pluginIndex]) {
        continue;
      }
      !PluginModule.extractEvents ? 'development' !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
      EventPluginRegistry.plugins[pluginIndex] = PluginModule;
      var publishedEvents = PluginModule.eventTypes;
      for (var eventName in publishedEvents) {
        !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? 'development' !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
      }
    }
  }
  
  /**
   * Publishes an event so that it can be dispatched by the supplied plugin.
   *
   * @param {object} dispatchConfig Dispatch configuration for the event.
   * @param {object} PluginModule Plugin publishing the event.
   * @return {boolean} True if the event was successfully published.
   * @private
   */
  function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
    !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? 'development' !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
    EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
  
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
      for (var phaseName in phasedRegistrationNames) {
        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
          var phasedRegistrationName = phasedRegistrationNames[phaseName];
          publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
        }
      }
      return true;
    } else if (dispatchConfig.registrationName) {
      publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
      return true;
    }
    return false;
  }
  
  /**
   * Publishes a registration name that is used to identify dispatched events and
   * can be used with `EventPluginHub.putListener` to register listeners.
   *
   * @param {string} registrationName Registration name to add.
   * @param {object} PluginModule Plugin publishing the event.
   * @private
   */
  function publishRegistrationName(registrationName, PluginModule, eventName) {
    !!EventPluginRegistry.registrationNameModules[registrationName] ? 'development' !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
    EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
    EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
  }
  
  /**
   * Registers plugins so that they can extract and dispatch events.
   *
   * @see {EventPluginHub}
   */
  var EventPluginRegistry = {
  
    /**
     * Ordered list of injected plugins.
     */
    plugins: [],
  
    /**
     * Mapping from event name to dispatch config
     */
    eventNameDispatchConfigs: {},
  
    /**
     * Mapping from registration name to plugin module
     */
    registrationNameModules: {},
  
    /**
     * Mapping from registration name to event name
     */
    registrationNameDependencies: {},
  
    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */
    injectEventPluginOrder: function (InjectedEventPluginOrder) {
      !!EventPluginOrder ? 'development' !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
      // Clone the ordering so it cannot be dynamically mutated.
      EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
      recomputePluginOrdering();
    },
  
    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */
    injectEventPluginsByName: function (injectedNamesToPlugins) {
      var isOrderingDirty = false;
      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }
        var PluginModule = injectedNamesToPlugins[pluginName];
        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
          !!namesToPlugins[pluginName] ? 'development' !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
          namesToPlugins[pluginName] = PluginModule;
          isOrderingDirty = true;
        }
      }
      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    },
  
    /**
     * Looks up the plugin for the supplied event.
     *
     * @param {object} event A synthetic event.
     * @return {?object} The plugin that created the supplied event.
     * @internal
     */
    getPluginModuleForEvent: function (event) {
      var dispatchConfig = event.dispatchConfig;
      if (dispatchConfig.registrationName) {
        return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
      }
      for (var phase in dispatchConfig.phasedRegistrationNames) {
        if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
        if (PluginModule) {
          return PluginModule;
        }
      }
      return null;
    },
  
    /**
     * Exposed for unit testing.
     * @private
     */
    _resetEventPlugins: function () {
      EventPluginOrder = null;
      for (var pluginName in namesToPlugins) {
        if (namesToPlugins.hasOwnProperty(pluginName)) {
          delete namesToPlugins[pluginName];
        }
      }
      EventPluginRegistry.plugins.length = 0;
  
      var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
      for (var eventName in eventNameDispatchConfigs) {
        if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          delete eventNameDispatchConfigs[eventName];
        }
      }
  
      var registrationNameModules = EventPluginRegistry.registrationNameModules;
      for (var registrationName in registrationNameModules) {
        if (registrationNameModules.hasOwnProperty(registrationName)) {
          delete registrationNameModules[registrationName];
        }
      }
    }
  
  };
  
  module.exports = EventPluginRegistry;

});

;/*!/node_modules/react/lib/ReactErrorUtils.js*/
define('common:node_modules/react/lib/ReactErrorUtils', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactErrorUtils
   * @typechecks
   */
  
  'use strict';
  
  var caughtError = null;
  
  /**
   * Call a function while guarding against errors that happens within it.
   *
   * @param {?String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} a First argument
   * @param {*} b Second argument
   */
  function invokeGuardedCallback(name, func, a, b) {
    try {
      return func(a, b);
    } catch (x) {
      if (caughtError === null) {
        caughtError = x;
      }
      return undefined;
    }
  }
  
  var ReactErrorUtils = {
    invokeGuardedCallback: invokeGuardedCallback,
  
    /**
     * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
     * handler are sure to be rethrown by rethrowCaughtError.
     */
    invokeGuardedCallbackWithCatch: invokeGuardedCallback,
  
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */
    rethrowCaughtError: function () {
      if (caughtError) {
        var error = caughtError;
        caughtError = null;
        throw error;
      }
    }
  };
  
  if ('development' !== 'production') {
    /**
     * To help development we can get better devtools integration by simulating a
     * real browser event.
     */
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
      var fakeNode = document.createElement('react');
      ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
        var boundFunc = func.bind(null, a, b);
        var evtType = 'react-' + name;
        fakeNode.addEventListener(evtType, boundFunc, false);
        var evt = document.createEvent('Event');
        evt.initEvent(evtType, false, false);
        fakeNode.dispatchEvent(evt);
        fakeNode.removeEventListener(evtType, boundFunc, false);
      };
    }
  }
  
  module.exports = ReactErrorUtils;

});

;/*!/node_modules/react/lib/EventPluginUtils.js*/
define('common:node_modules/react/lib/EventPluginUtils', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginUtils
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var ReactErrorUtils = require('common:node_modules/react/lib/ReactErrorUtils');
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * Injected dependencies:
   */
  
  /**
   * - `Mount`: [required] Module that can convert between React dom IDs and
   *   actual node references.
   */
  var injection = {
    Mount: null,
    injectMount: function (InjectedMount) {
      injection.Mount = InjectedMount;
      if ('development' !== 'production') {
        'development' !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
      }
    }
  };
  
  var topLevelTypes = EventConstants.topLevelTypes;
  
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
  }
  
  var validateEventDispatches;
  if ('development' !== 'production') {
    validateEventDispatches = function (event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
  
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
  
      'development' !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
    };
  }
  
  /**
   * Dispatch the event to the listener.
   * @param {SyntheticEvent} event SyntheticEvent to handle
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @param {function} listener Application-level callback
   * @param {string} domID DOM id to pass to the callback.
   */
  function executeDispatch(event, simulated, listener, domID) {
    var type = event.type || 'unknown-event';
    event.currentTarget = injection.Mount.getNode(domID);
    if (simulated) {
      ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
    } else {
      ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
    }
    event.currentTarget = null;
  }
  
  /**
   * Standard/simple iteration through an event's collected dispatches.
   */
  function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ('development' !== 'production') {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and IDs are two parallel arrays that are always in sync.
        executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
    }
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  
  /**
   * Standard/simple iteration through an event's collected dispatches, but stops
   * at the first dispatch execution returning true, and returns that id.
   *
   * @return {?string} id of the first dispatch execution who's listener returns
   * true, or null if no listener returned true.
   */
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ('development' !== 'production') {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and IDs are two parallel arrays that are always in sync.
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  
  /**
   * @see executeDispatchesInOrderStopAtTrueImpl
   */
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  
  /**
   * Execution of a "direct" dispatch - there must be at most one dispatch
   * accumulated on the event or it is considered an error. It doesn't really make
   * sense for an event with multiple dispatches (bubbled) to keep track of the
   * return values at each dispatch execution, but it does tend to make sense when
   * dealing with "direct" dispatches.
   *
   * @return {*} The return value of executing the single dispatch.
   */
  function executeDirectDispatch(event) {
    if ('development' !== 'production') {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    !!Array.isArray(dispatchListener) ? 'development' !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
    var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
    event._dispatchListeners = null;
    event._dispatchIDs = null;
    return res;
  }
  
  /**
   * @param {SyntheticEvent} event
   * @return {boolean} True iff number of dispatches accumulated is greater than 0.
   */
  function hasDispatches(event) {
    return !!event._dispatchListeners;
  }
  
  /**
   * General utilities that are useful in creating custom Event Plugins.
   */
  var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
  
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
  
    getNode: function (id) {
      return injection.Mount.getNode(id);
    },
    getID: function (node) {
      return injection.Mount.getID(node);
    },
  
    injection: injection
  };
  
  module.exports = EventPluginUtils;

});

;/*!/node_modules/react/lib/accumulateInto.js*/
define('common:node_modules/react/lib/accumulateInto', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule accumulateInto
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   *
   * Accumulates items that must not be null or undefined into the first one. This
   * is used to conserve memory by avoiding array allocations, and thus sacrifices
   * API cleanness. Since `current` can be null before being passed in and not
   * null after this function, make sure to assign it back to `current`:
   *
   * `a = accumulateInto(a, b);`
   *
   * This API should be sparingly used. Try `accumulate` for something cleaner.
   *
   * @return {*|array<*>} An accumulation of items.
   */
  
  function accumulateInto(current, next) {
    !(next != null) ? 'development' !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
    if (current == null) {
      return next;
    }
  
    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);
  
    if (currentIsArray && nextIsArray) {
      current.push.apply(current, next);
      return current;
    }
  
    if (currentIsArray) {
      current.push(next);
      return current;
    }
  
    if (nextIsArray) {
      // A bit too dangerous to mutate `next`.
      return [current].concat(next);
    }
  
    return [current, next];
  }
  
  module.exports = accumulateInto;

});

;/*!/node_modules/react/lib/forEachAccumulated.js*/
define('common:node_modules/react/lib/forEachAccumulated', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule forEachAccumulated
   */
  
  'use strict';
  
  /**
   * @param {array} arr an "accumulation" of items which is either an Array or
   * a single item. Useful when paired with the `accumulate` module. This is a
   * simple utility that allows us to reason about a collection of items, but
   * handling the case when there is exactly one item (and we do not need to
   * allocate an array).
   */
  var forEachAccumulated = function (arr, cb, scope) {
    if (Array.isArray(arr)) {
      arr.forEach(cb, scope);
    } else if (arr) {
      cb.call(scope, arr);
    }
  };
  
  module.exports = forEachAccumulated;

});

;/*!/node_modules/react/lib/EventPluginHub.js*/
define('common:node_modules/react/lib/EventPluginHub', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginHub
   */
  
  'use strict';
  
  var EventPluginRegistry = require('common:node_modules/react/lib/EventPluginRegistry');
  var EventPluginUtils = require('common:node_modules/react/lib/EventPluginUtils');
  var ReactErrorUtils = require('common:node_modules/react/lib/ReactErrorUtils');
  
  var accumulateInto = require('common:node_modules/react/lib/accumulateInto');
  var forEachAccumulated = require('common:node_modules/react/lib/forEachAccumulated');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * Internal store for event listeners
   */
  var listenerBank = {};
  
  /**
   * Internal queue of events that have accumulated their dispatches and are
   * waiting to have their dispatches executed.
   */
  var eventQueue = null;
  
  /**
   * Dispatches an event and releases it back into the pool, unless persistent.
   *
   * @param {?object} event Synthetic event to be dispatched.
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @private
   */
  var executeDispatchesAndRelease = function (event, simulated) {
    if (event) {
      EventPluginUtils.executeDispatchesInOrder(event, simulated);
  
      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  };
  var executeDispatchesAndReleaseSimulated = function (e) {
    return executeDispatchesAndRelease(e, true);
  };
  var executeDispatchesAndReleaseTopLevel = function (e) {
    return executeDispatchesAndRelease(e, false);
  };
  
  /**
   * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
   *   hierarchy given ids of the logical DOM elements involved.
   */
  var InstanceHandle = null;
  
  function validateInstanceHandle() {
    var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
    'development' !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
  }
  
  /**
   * This is a unified interface for event plugins to be installed and configured.
   *
   * Event plugins can implement the following properties:
   *
   *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
   *     Required. When a top-level event is fired, this method is expected to
   *     extract synthetic events that will in turn be queued and dispatched.
   *
   *   `eventTypes` {object}
   *     Optional, plugins that fire events must publish a mapping of registration
   *     names that are used to register listeners. Values of this mapping must
   *     be objects that contain `registrationName` or `phasedRegistrationNames`.
   *
   *   `executeDispatch` {function(object, function, string)}
   *     Optional, allows plugins to override how an event gets dispatched. By
   *     default, the listener is simply invoked.
   *
   * Each plugin that is injected into `EventsPluginHub` is immediately operable.
   *
   * @public
   */
  var EventPluginHub = {
  
    /**
     * Methods for injecting dependencies.
     */
    injection: {
  
      /**
       * @param {object} InjectedMount
       * @public
       */
      injectMount: EventPluginUtils.injection.injectMount,
  
      /**
       * @param {object} InjectedInstanceHandle
       * @public
       */
      injectInstanceHandle: function (InjectedInstanceHandle) {
        InstanceHandle = InjectedInstanceHandle;
        if ('development' !== 'production') {
          validateInstanceHandle();
        }
      },
  
      getInstanceHandle: function () {
        if ('development' !== 'production') {
          validateInstanceHandle();
        }
        return InstanceHandle;
      },
  
      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
  
      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  
    },
  
    eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
  
    registrationNameModules: EventPluginRegistry.registrationNameModules,
  
    /**
     * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
     *
     * @param {string} id ID of the DOM element.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {?function} listener The callback to store.
     */
    putListener: function (id, registrationName, listener) {
      !(typeof listener === 'function') ? 'development' !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;
  
      var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
      bankForRegistrationName[id] = listener;
  
      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.didPutListener) {
        PluginModule.didPutListener(id, registrationName, listener);
      }
    },
  
    /**
     * @param {string} id ID of the DOM element.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */
    getListener: function (id, registrationName) {
      var bankForRegistrationName = listenerBank[registrationName];
      return bankForRegistrationName && bankForRegistrationName[id];
    },
  
    /**
     * Deletes a listener from the registration bank.
     *
     * @param {string} id ID of the DOM element.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     */
    deleteListener: function (id, registrationName) {
      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }
  
      var bankForRegistrationName = listenerBank[registrationName];
      // TODO: This should never be null -- when is it?
      if (bankForRegistrationName) {
        delete bankForRegistrationName[id];
      }
    },
  
    /**
     * Deletes all listeners for the DOM element with the supplied ID.
     *
     * @param {string} id ID of the DOM element.
     */
    deleteAllListeners: function (id) {
      for (var registrationName in listenerBank) {
        if (!listenerBank[registrationName][id]) {
          continue;
        }
  
        var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
        if (PluginModule && PluginModule.willDeleteListener) {
          PluginModule.willDeleteListener(id, registrationName);
        }
  
        delete listenerBank[registrationName][id];
      }
    },
  
    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @internal
     */
    extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var events;
      var plugins = EventPluginRegistry.plugins;
      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];
        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }
      return events;
    },
  
    /**
     * Enqueues a synthetic event that should be dispatched when
     * `processEventQueue` is invoked.
     *
     * @param {*} events An accumulation of synthetic events.
     * @internal
     */
    enqueueEvents: function (events) {
      if (events) {
        eventQueue = accumulateInto(eventQueue, events);
      }
    },
  
    /**
     * Dispatches all synthetic events on the event queue.
     *
     * @internal
     */
    processEventQueue: function (simulated) {
      // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.
      var processingEventQueue = eventQueue;
      eventQueue = null;
      if (simulated) {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
      } else {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      }
      !!eventQueue ? 'development' !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
      // This would be a good time to rethrow if any of the event handlers threw.
      ReactErrorUtils.rethrowCaughtError();
    },
  
    /**
     * These are needed for tests only. Do not use!
     */
    __purge: function () {
      listenerBank = {};
    },
  
    __getListenerBank: function () {
      return listenerBank;
    }
  
  };
  
  module.exports = EventPluginHub;

});

;/*!/node_modules/react/lib/ReactEventEmitterMixin.js*/
define('common:node_modules/react/lib/ReactEventEmitterMixin', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEventEmitterMixin
   */
  
  'use strict';
  
  var EventPluginHub = require('common:node_modules/react/lib/EventPluginHub');
  
  function runEventQueueInBatch(events) {
    EventPluginHub.enqueueEvents(events);
    EventPluginHub.processEventQueue(false);
  }
  
  var ReactEventEmitterMixin = {
  
    /**
     * Streams a fired top-level event to `EventPluginHub` where plugins have the
     * opportunity to create `ReactEvent`s to be dispatched.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {object} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native environment event.
     */
    handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
      runEventQueueInBatch(events);
    }
  };
  
  module.exports = ReactEventEmitterMixin;

});

;/*!/node_modules/react/lib/ViewportMetrics.js*/
define('common:node_modules/react/lib/ViewportMetrics', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ViewportMetrics
   */
  
  'use strict';
  
  var ViewportMetrics = {
  
    currentScrollLeft: 0,
  
    currentScrollTop: 0,
  
    refreshScrollValues: function (scrollPosition) {
      ViewportMetrics.currentScrollLeft = scrollPosition.x;
      ViewportMetrics.currentScrollTop = scrollPosition.y;
    }
  
  };
  
  module.exports = ViewportMetrics;

});

;/*!/node_modules/react/lib/Object.assign.js*/
define('common:node_modules/react/lib/Object.assign', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Object.assign
   */
  
  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
  
  'use strict';
  
  function assign(target, sources) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }
  
    var to = Object(target);
    var hasOwnProperty = Object.prototype.hasOwnProperty;
  
    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];
      if (nextSource == null) {
        continue;
      }
  
      var from = Object(nextSource);
  
      // We don't currently support accessors nor proxies. Therefore this
      // copy cannot throw. If we ever supported this then we must handle
      // exceptions and side-effects. We don't support symbols so they won't
      // be transferred.
  
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
    }
  
    return to;
  }
  
  module.exports = assign;

});

;/*!/node_modules/react/lib/isEventSupported.js*/
define('common:node_modules/react/lib/isEventSupported', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isEventSupported
   */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var useHasFeature;
  if (ExecutionEnvironment.canUseDOM) {
    useHasFeature = document.implementation && document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
  }
  
  /**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @param {?boolean} capture Check if the capture phase is supported.
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */
  function isEventSupported(eventNameSuffix, capture) {
    if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
      return false;
    }
  
    var eventName = 'on' + eventNameSuffix;
    var isSupported = (eventName in document);
  
    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }
  
    if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
      // This is the only way to test support for the `wheel` event in IE9+.
      isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
    }
  
    return isSupported;
  }
  
  module.exports = isEventSupported;

});

;/*!/node_modules/react/lib/ReactBrowserEventEmitter.js*/
define('common:node_modules/react/lib/ReactBrowserEventEmitter', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactBrowserEventEmitter
   * @typechecks static-only
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var EventPluginHub = require('common:node_modules/react/lib/EventPluginHub');
  var EventPluginRegistry = require('common:node_modules/react/lib/EventPluginRegistry');
  var ReactEventEmitterMixin = require('common:node_modules/react/lib/ReactEventEmitterMixin');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  var ViewportMetrics = require('common:node_modules/react/lib/ViewportMetrics');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var isEventSupported = require('common:node_modules/react/lib/isEventSupported');
  
  /**
   * Summary of `ReactBrowserEventEmitter` event handling:
   *
   *  - Top-level delegation is used to trap most native browser events. This
   *    may only occur in the main thread and is the responsibility of
   *    ReactEventListener, which is injected and can therefore support pluggable
   *    event sources. This is the only work that occurs in the main thread.
   *
   *  - We normalize and de-duplicate events to account for browser quirks. This
   *    may be done in the worker thread.
   *
   *  - Forward these native events (with the associated top-level type used to
   *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
   *    to extract any synthetic events.
   *
   *  - The `EventPluginHub` will then process each event by annotating them with
   *    "dispatches", a sequence of listeners and IDs that care about that event.
   *
   *  - The `EventPluginHub` then dispatches the events.
   *
   * Overview of React and the event system:
   *
   * +------------+    .
   * |    DOM     |    .
   * +------------+    .
   *       |           .
   *       v           .
   * +------------+    .
   * | ReactEvent |    .
   * |  Listener  |    .
   * +------------+    .                         +-----------+
   *       |           .               +--------+|SimpleEvent|
   *       |           .               |         |Plugin     |
   * +-----|------+    .               v         +-----------+
   * |     |      |    .    +--------------+                    +------------+
   * |     +-----------.--->|EventPluginHub|                    |    Event   |
   * |            |    .    |              |     +-----------+  | Propagators|
   * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
   * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
   * |            |    .    |              |     +-----------+  |  utilities |
   * |     +-----------.--->|              |                    +------------+
   * |     |      |    .    +--------------+
   * +-----|------+    .                ^        +-----------+
   *       |           .                |        |Enter/Leave|
   *       +           .                +-------+|Plugin     |
   * +-------------+   .                         +-----------+
   * | application |   .
   * |-------------|   .
   * |             |   .
   * |             |   .
   * +-------------+   .
   *                   .
   *    React Core     .  General Purpose Event Plugin System
   */
  
  var alreadyListeningTo = {};
  var isMonitoringScrollValue = false;
  var reactTopListenersCounter = 0;
  
  // For events like 'submit' which don't consistently bubble (which we trap at a
  // lower node than `document`), binding at `document` would cause duplicate
  // events so we don't include them here
  var topEventMapping = {
    topAbort: 'abort',
    topBlur: 'blur',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topChange: 'change',
    topClick: 'click',
    topCompositionEnd: 'compositionend',
    topCompositionStart: 'compositionstart',
    topCompositionUpdate: 'compositionupdate',
    topContextMenu: 'contextmenu',
    topCopy: 'copy',
    topCut: 'cut',
    topDoubleClick: 'dblclick',
    topDrag: 'drag',
    topDragEnd: 'dragend',
    topDragEnter: 'dragenter',
    topDragExit: 'dragexit',
    topDragLeave: 'dragleave',
    topDragOver: 'dragover',
    topDragStart: 'dragstart',
    topDrop: 'drop',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topFocus: 'focus',
    topInput: 'input',
    topKeyDown: 'keydown',
    topKeyPress: 'keypress',
    topKeyUp: 'keyup',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topMouseDown: 'mousedown',
    topMouseMove: 'mousemove',
    topMouseOut: 'mouseout',
    topMouseOver: 'mouseover',
    topMouseUp: 'mouseup',
    topPaste: 'paste',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topScroll: 'scroll',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topSelectionChange: 'selectionchange',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTextInput: 'textInput',
    topTimeUpdate: 'timeupdate',
    topTouchCancel: 'touchcancel',
    topTouchEnd: 'touchend',
    topTouchMove: 'touchmove',
    topTouchStart: 'touchstart',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting',
    topWheel: 'wheel'
  };
  
  /**
   * To ensure no conflicts with other potential React instances on the page
   */
  var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
  
  function getListeningForDocument(mountAt) {
    // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
    // directly.
    if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
      mountAt[topListenersIDKey] = reactTopListenersCounter++;
      alreadyListeningTo[mountAt[topListenersIDKey]] = {};
    }
    return alreadyListeningTo[mountAt[topListenersIDKey]];
  }
  
  /**
   * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
   * example:
   *
   *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
   *
   * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
   *
   * @internal
   */
  var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
  
    /**
     * Injectable event backend
     */
    ReactEventListener: null,
  
    injection: {
      /**
       * @param {object} ReactEventListener
       */
      injectReactEventListener: function (ReactEventListener) {
        ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
        ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
      }
    },
  
    /**
     * Sets whether or not any created callbacks should be enabled.
     *
     * @param {boolean} enabled True if callbacks should be enabled.
     */
    setEnabled: function (enabled) {
      if (ReactBrowserEventEmitter.ReactEventListener) {
        ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
      }
    },
  
    /**
     * @return {boolean} True if callbacks are enabled.
     */
    isEnabled: function () {
      return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
    },
  
    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} contentDocumentHandle Document which owns the container
     */
    listenTo: function (registrationName, contentDocumentHandle) {
      var mountAt = contentDocumentHandle;
      var isListening = getListeningForDocument(mountAt);
      var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
  
      var topLevelTypes = EventConstants.topLevelTypes;
      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];
        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          if (dependency === topLevelTypes.topWheel) {
            if (isEventSupported('wheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
            } else if (isEventSupported('mousewheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
            } else {
              // Firefox needs to capture a different mouse scroll event.
              // @see http://www.quirksmode.org/dom/events/tests/scroll.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
            }
          } else if (dependency === topLevelTypes.topScroll) {
  
            if (isEventSupported('scroll', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
            } else {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
            }
          } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
  
            if (isEventSupported('focus', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
            } else if (isEventSupported('focusin')) {
              // IE has `focusin` and `focusout` events which bubble.
              // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
            }
  
            // to make sure blur and focus event listeners are only attached once
            isListening[topLevelTypes.topBlur] = true;
            isListening[topLevelTypes.topFocus] = true;
          } else if (topEventMapping.hasOwnProperty(dependency)) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
          }
  
          isListening[dependency] = true;
        }
      }
    },
  
    trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
    },
  
    trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
    },
  
    /**
     * Listens to window scroll and resize events. We cache scroll values so that
     * application code can access them without triggering reflows.
     *
     * NOTE: Scroll events do not bubble.
     *
     * @see http://www.quirksmode.org/dom/events/scroll.html
     */
    ensureScrollValueMonitoring: function () {
      if (!isMonitoringScrollValue) {
        var refresh = ViewportMetrics.refreshScrollValues;
        ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
        isMonitoringScrollValue = true;
      }
    },
  
    eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
  
    registrationNameModules: EventPluginHub.registrationNameModules,
  
    putListener: EventPluginHub.putListener,
  
    getListener: EventPluginHub.getListener,
  
    deleteListener: EventPluginHub.deleteListener,
  
    deleteAllListeners: EventPluginHub.deleteAllListeners
  
  });
  
  ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
    putListener: 'putListener',
    deleteListener: 'deleteListener'
  });
  
  module.exports = ReactBrowserEventEmitter;

});

;/*!/node_modules/react/lib/ReactDOMFeatureFlags.js*/
define('common:node_modules/react/lib/ReactDOMFeatureFlags', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMFeatureFlags
   */
  
  'use strict';
  
  var ReactDOMFeatureFlags = {
    useCreateElement: false
  };
  
  module.exports = ReactDOMFeatureFlags;

});

;/*!/node_modules/react/lib/canDefineProperty.js*/
define('common:node_modules/react/lib/canDefineProperty', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule canDefineProperty
   */
  
  'use strict';
  
  var canDefineProperty = false;
  if ('development' !== 'production') {
    try {
      Object.defineProperty({}, 'x', { get: function () {} });
      canDefineProperty = true;
    } catch (x) {
      // IE will fail on defineProperty
    }
  }
  
  module.exports = canDefineProperty;

});

;/*!/node_modules/react/lib/ReactElement.js*/
define('common:node_modules/react/lib/ReactElement', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactElement
   */
  
  'use strict';
  
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var canDefineProperty = require('common:node_modules/react/lib/canDefineProperty');
  
  // The Symbol used to tag the ReactElement type. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
  
  var RESERVED_PROPS = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };
  
  /**
   * Base constructor for all React elements. This is only used to make this
   * work with a dynamic instanceof check. Nothing should live on this prototype.
   *
   * @param {*} type
   * @param {*} key
   * @param {string|object} ref
   * @param {*} self A *temporary* helper to detect places where `this` is
   * different from the `owner` when React.createElement is called, so that we
   * can warn. We want to get rid of owner and replace string `ref`s with arrow
   * functions, and as long as `this` and owner are the same, there will be no
   * change in behavior.
   * @param {*} source An annotation object (added by a transpiler or otherwise)
   * indicating filename, line number, and/or other information.
   * @param {*} owner
   * @param {*} props
   * @internal
   */
  var ReactElement = function (type, key, ref, self, source, owner, props) {
    var element = {
      // This tag allow us to uniquely identify this as a React Element
      $$typeof: REACT_ELEMENT_TYPE,
  
      // Built-in properties that belong on the element
      type: type,
      key: key,
      ref: ref,
      props: props,
  
      // Record the component responsible for creating this element.
      _owner: owner
    };
  
    if ('development' !== 'production') {
      // The validation flag is currently mutative. We put it on
      // an external backing store so that we can freeze the whole object.
      // This can be replaced with a WeakMap once they are implemented in
      // commonly used development environments.
      element._store = {};
  
      // To make comparing ReactElements easier for testing purposes, we make
      // the validation flag non-enumerable (where possible, which should
      // include every environment we run tests in), so the test framework
      // ignores it.
      if (canDefineProperty) {
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
      } else {
        element._store.validated = false;
        element._self = self;
        element._source = source;
      }
      Object.freeze(element.props);
      Object.freeze(element);
    }
  
    return element;
  };
  
  ReactElement.createElement = function (type, config, children) {
    var propName;
  
    // Reserved names are extracted
    var props = {};
  
    var key = null;
    var ref = null;
    var self = null;
    var source = null;
  
    if (config != null) {
      ref = config.ref === undefined ? null : config.ref;
      key = config.key === undefined ? null : '' + config.key;
      self = config.__self === undefined ? null : config.__self;
      source = config.__source === undefined ? null : config.__source;
      // Remaining properties are added to a new props object
      for (propName in config) {
        if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }
  
    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }
  
    // Resolve default props
    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;
      for (propName in defaultProps) {
        if (typeof props[propName] === 'undefined') {
          props[propName] = defaultProps[propName];
        }
      }
    }
  
    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  };
  
  ReactElement.createFactory = function (type) {
    var factory = ReactElement.createElement.bind(null, type);
    // Expose the type on the factory and the prototype so that it can be
    // easily accessed on elements. E.g. `<Foo />.type === Foo`.
    // This should not be named `constructor` since this may not be the function
    // that created the element, and it may not even be a constructor.
    // Legacy hook TODO: Warn if this is accessed
    factory.type = type;
    return factory;
  };
  
  ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  
    return newElement;
  };
  
  ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
    var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
  
    if ('development' !== 'production') {
      // If the key on the original is valid, then the clone is valid
      newElement._store.validated = oldElement._store.validated;
    }
  
    return newElement;
  };
  
  ReactElement.cloneElement = function (element, config, children) {
    var propName;
  
    // Original props are copied
    var props = assign({}, element.props);
  
    // Reserved names are extracted
    var key = element.key;
    var ref = element.ref;
    // Self is preserved since the owner is preserved.
    var self = element._self;
    // Source is preserved since cloneElement is unlikely to be targeted by a
    // transpiler, and the original source is probably a better indicator of the
    // true owner.
    var source = element._source;
  
    // Owner will be preserved, unless ref is overridden
    var owner = element._owner;
  
    if (config != null) {
      if (config.ref !== undefined) {
        // Silently steal the ref from the parent.
        ref = config.ref;
        owner = ReactCurrentOwner.current;
      }
      if (config.key !== undefined) {
        key = '' + config.key;
      }
      // Remaining properties override existing props
      for (propName in config) {
        if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }
  
    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }
  
    return ReactElement(element.type, key, ref, self, source, owner, props);
  };
  
  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid component.
   * @final
   */
  ReactElement.isValidElement = function (object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  };
  
  module.exports = ReactElement;

});

;/*!/node_modules/react/lib/ReactEmptyComponentRegistry.js*/
define('common:node_modules/react/lib/ReactEmptyComponentRegistry', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEmptyComponentRegistry
   */
  
  'use strict';
  
  // This registry keeps track of the React IDs of the components that rendered to
  // `null` (in reality a placeholder such as `noscript`)
  var nullComponentIDsRegistry = {};
  
  /**
   * @param {string} id Component's `_rootNodeID`.
   * @return {boolean} True if the component is rendered to null.
   */
  function isNullComponentID(id) {
    return !!nullComponentIDsRegistry[id];
  }
  
  /**
   * Mark the component as having rendered to null.
   * @param {string} id Component's `_rootNodeID`.
   */
  function registerNullComponentID(id) {
    nullComponentIDsRegistry[id] = true;
  }
  
  /**
   * Unmark the component as having rendered to null: it renders to something now.
   * @param {string} id Component's `_rootNodeID`.
   */
  function deregisterNullComponentID(id) {
    delete nullComponentIDsRegistry[id];
  }
  
  var ReactEmptyComponentRegistry = {
    isNullComponentID: isNullComponentID,
    registerNullComponentID: registerNullComponentID,
    deregisterNullComponentID: deregisterNullComponentID
  };
  
  module.exports = ReactEmptyComponentRegistry;

});

;/*!/node_modules/react/lib/ReactRootIndex.js*/
define('common:node_modules/react/lib/ReactRootIndex', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactRootIndex
   * @typechecks
   */
  
  'use strict';
  
  var ReactRootIndexInjection = {
    /**
     * @param {function} _createReactRootIndex
     */
    injectCreateReactRootIndex: function (_createReactRootIndex) {
      ReactRootIndex.createReactRootIndex = _createReactRootIndex;
    }
  };
  
  var ReactRootIndex = {
    createReactRootIndex: null,
    injection: ReactRootIndexInjection
  };
  
  module.exports = ReactRootIndex;

});

;/*!/node_modules/react/lib/ReactInstanceHandles.js*/
define('common:node_modules/react/lib/ReactInstanceHandles', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInstanceHandles
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactRootIndex = require('common:node_modules/react/lib/ReactRootIndex');
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  var SEPARATOR = '.';
  var SEPARATOR_LENGTH = SEPARATOR.length;
  
  /**
   * Maximum depth of traversals before we consider the possibility of a bad ID.
   */
  var MAX_TREE_DEPTH = 10000;
  
  /**
   * Creates a DOM ID prefix to use when mounting React components.
   *
   * @param {number} index A unique integer
   * @return {string} React root ID.
   * @internal
   */
  function getReactRootIDString(index) {
    return SEPARATOR + index.toString(36);
  }
  
  /**
   * Checks if a character in the supplied ID is a separator or the end.
   *
   * @param {string} id A React DOM ID.
   * @param {number} index Index of the character to check.
   * @return {boolean} True if the character is a separator or end of the ID.
   * @private
   */
  function isBoundary(id, index) {
    return id.charAt(index) === SEPARATOR || index === id.length;
  }
  
  /**
   * Checks if the supplied string is a valid React DOM ID.
   *
   * @param {string} id A React DOM ID, maybe.
   * @return {boolean} True if the string is a valid React DOM ID.
   * @private
   */
  function isValidID(id) {
    return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
  }
  
  /**
   * Checks if the first ID is an ancestor of or equal to the second ID.
   *
   * @param {string} ancestorID
   * @param {string} descendantID
   * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
   * @internal
   */
  function isAncestorIDOf(ancestorID, descendantID) {
    return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
  }
  
  /**
   * Gets the parent ID of the supplied React DOM ID, `id`.
   *
   * @param {string} id ID of a component.
   * @return {string} ID of the parent, or an empty string.
   * @private
   */
  function getParentID(id) {
    return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
  }
  
  /**
   * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
   * supplied `destinationID`. If they are equal, the ID is returned.
   *
   * @param {string} ancestorID ID of an ancestor node of `destinationID`.
   * @param {string} destinationID ID of the destination node.
   * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
   * @private
   */
  function getNextDescendantID(ancestorID, destinationID) {
    !(isValidID(ancestorID) && isValidID(destinationID)) ? 'development' !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
    !isAncestorIDOf(ancestorID, destinationID) ? 'development' !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
    if (ancestorID === destinationID) {
      return ancestorID;
    }
    // Skip over the ancestor and the immediate separator. Traverse until we hit
    // another separator or we reach the end of `destinationID`.
    var start = ancestorID.length + SEPARATOR_LENGTH;
    var i;
    for (i = start; i < destinationID.length; i++) {
      if (isBoundary(destinationID, i)) {
        break;
      }
    }
    return destinationID.substr(0, i);
  }
  
  /**
   * Gets the nearest common ancestor ID of two IDs.
   *
   * Using this ID scheme, the nearest common ancestor ID is the longest common
   * prefix of the two IDs that immediately preceded a "marker" in both strings.
   *
   * @param {string} oneID
   * @param {string} twoID
   * @return {string} Nearest common ancestor ID, or the empty string if none.
   * @private
   */
  function getFirstCommonAncestorID(oneID, twoID) {
    var minLength = Math.min(oneID.length, twoID.length);
    if (minLength === 0) {
      return '';
    }
    var lastCommonMarkerIndex = 0;
    // Use `<=` to traverse until the "EOL" of the shorter string.
    for (var i = 0; i <= minLength; i++) {
      if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
        lastCommonMarkerIndex = i;
      } else if (oneID.charAt(i) !== twoID.charAt(i)) {
        break;
      }
    }
    var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
    !isValidID(longestCommonID) ? 'development' !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
    return longestCommonID;
  }
  
  /**
   * Traverses the parent path between two IDs (either up or down). The IDs must
   * not be the same, and there must exist a parent path between them. If the
   * callback returns `false`, traversal is stopped.
   *
   * @param {?string} start ID at which to start traversal.
   * @param {?string} stop ID at which to end traversal.
   * @param {function} cb Callback to invoke each ID with.
   * @param {*} arg Argument to invoke the callback with.
   * @param {?boolean} skipFirst Whether or not to skip the first node.
   * @param {?boolean} skipLast Whether or not to skip the last node.
   * @private
   */
  function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
    start = start || '';
    stop = stop || '';
    !(start !== stop) ? 'development' !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
    var traverseUp = isAncestorIDOf(stop, start);
    !(traverseUp || isAncestorIDOf(start, stop)) ? 'development' !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
    // Traverse from `start` to `stop` one depth at a time.
    var depth = 0;
    var traverse = traverseUp ? getParentID : getNextDescendantID;
    for (var id = start;; /* until break */id = traverse(id, stop)) {
      var ret;
      if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
        ret = cb(id, traverseUp, arg);
      }
      if (ret === false || id === stop) {
        // Only break //after// visiting `stop`.
        break;
      }
      !(depth++ < MAX_TREE_DEPTH) ? 'development' !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
    }
  }
  
  /**
   * Manages the IDs assigned to DOM representations of React components. This
   * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
   * order to simulate events).
   *
   * @internal
   */
  var ReactInstanceHandles = {
  
    /**
     * Constructs a React root ID
     * @return {string} A React root ID.
     */
    createReactRootID: function () {
      return getReactRootIDString(ReactRootIndex.createReactRootIndex());
    },
  
    /**
     * Constructs a React ID by joining a root ID with a name.
     *
     * @param {string} rootID Root ID of a parent component.
     * @param {string} name A component's name (as flattened children).
     * @return {string} A React ID.
     * @internal
     */
    createReactID: function (rootID, name) {
      return rootID + name;
    },
  
    /**
     * Gets the DOM ID of the React component that is the root of the tree that
     * contains the React component with the supplied DOM ID.
     *
     * @param {string} id DOM ID of a React component.
     * @return {?string} DOM ID of the React component that is the root.
     * @internal
     */
    getReactRootIDFromNodeID: function (id) {
      if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
        var index = id.indexOf(SEPARATOR, 1);
        return index > -1 ? id.substr(0, index) : id;
      }
      return null;
    },
  
    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * NOTE: Does not invoke the callback on the nearest common ancestor because
     * nothing "entered" or "left" that element.
     *
     * @param {string} leaveID ID being left.
     * @param {string} enterID ID being entered.
     * @param {function} cb Callback to invoke on each entered/left ID.
     * @param {*} upArg Argument to invoke the callback with on left IDs.
     * @param {*} downArg Argument to invoke the callback with on entered IDs.
     * @internal
     */
    traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
      var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
      if (ancestorID !== leaveID) {
        traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
      }
      if (ancestorID !== enterID) {
        traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
      }
    },
  
    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     *
     * NOTE: This traversal happens on IDs without touching the DOM.
     *
     * @param {string} targetID ID of the target node.
     * @param {function} cb Callback to invoke.
     * @param {*} arg Argument to invoke the callback with.
     * @internal
     */
    traverseTwoPhase: function (targetID, cb, arg) {
      if (targetID) {
        traverseParentPath('', targetID, cb, arg, true, false);
        traverseParentPath(targetID, '', cb, arg, false, true);
      }
    },
  
    /**
     * Same as `traverseTwoPhase` but skips the `targetID`.
     */
    traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
      if (targetID) {
        traverseParentPath('', targetID, cb, arg, true, true);
        traverseParentPath(targetID, '', cb, arg, true, true);
      }
    },
  
    /**
     * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
     * example, passing `.0.$row-0.1` would result in `cb` getting called
     * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
     *
     * NOTE: This traversal happens on IDs without touching the DOM.
     *
     * @param {string} targetID ID of the target node.
     * @param {function} cb Callback to invoke.
     * @param {*} arg Argument to invoke the callback with.
     * @internal
     */
    traverseAncestors: function (targetID, cb, arg) {
      traverseParentPath('', targetID, cb, arg, true, false);
    },
  
    getFirstCommonAncestorID: getFirstCommonAncestorID,
  
    /**
     * Exposed for unit testing.
     * @private
     */
    _getNextDescendantID: getNextDescendantID,
  
    isAncestorIDOf: isAncestorIDOf,
  
    SEPARATOR: SEPARATOR
  
  };
  
  module.exports = ReactInstanceHandles;

});

;/*!/node_modules/react/lib/ReactInstanceMap.js*/
define('common:node_modules/react/lib/ReactInstanceMap', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInstanceMap
   */
  
  'use strict';
  
  /**
   * `ReactInstanceMap` maintains a mapping from a public facing stateful
   * instance (key) and the internal representation (value). This allows public
   * methods to accept the user facing instance as an argument and map them back
   * to internal methods.
   */
  
  // TODO: Replace this with ES6: var ReactInstanceMap = new Map();
  var ReactInstanceMap = {
  
    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */
    remove: function (key) {
      key._reactInternalInstance = undefined;
    },
  
    get: function (key) {
      return key._reactInternalInstance;
    },
  
    has: function (key) {
      return key._reactInternalInstance !== undefined;
    },
  
    set: function (key, value) {
      key._reactInternalInstance = value;
    }
  
  };
  
  module.exports = ReactInstanceMap;

});

;/*!/node_modules/react/lib/adler32.js*/
define('common:node_modules/react/lib/adler32', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule adler32
   */
  
  'use strict';
  
  var MOD = 65521;
  
  // adler32 is not cryptographically strong, and is only used to sanity check that
  // markup generated on the server matches the markup generated on the client.
  // This implementation (a modified version of the SheetJS version) has been optimized
  // for our use case, at the expense of conforming to the adler32 specification
  // for non-ascii inputs.
  function adler32(data) {
    var a = 1;
    var b = 0;
    var i = 0;
    var l = data.length;
    var m = l & ~0x3;
    while (i < m) {
      for (; i < Math.min(i + 4096, m); i += 4) {
        b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
      }
      a %= MOD;
      b %= MOD;
    }
    for (; i < l; i++) {
      b += a += data.charCodeAt(i);
    }
    a %= MOD;
    b %= MOD;
    return a | b << 16;
  }
  
  module.exports = adler32;

});

;/*!/node_modules/react/lib/ReactMarkupChecksum.js*/
define('common:node_modules/react/lib/ReactMarkupChecksum', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMarkupChecksum
   */
  
  'use strict';
  
  var adler32 = require('common:node_modules/react/lib/adler32');
  
  var TAG_END = /\/?>/;
  
  var ReactMarkupChecksum = {
    CHECKSUM_ATTR_NAME: 'data-react-checksum',
  
    /**
     * @param {string} markup Markup string
     * @return {string} Markup string with checksum attribute attached
     */
    addChecksumToMarkup: function (markup) {
      var checksum = adler32(markup);
  
      // Add checksum (handle both parent tags and self-closing tags)
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    },
  
    /**
     * @param {string} markup to use
     * @param {DOMElement} element root React element
     * @returns {boolean} whether or not the markup is the same
     */
    canReuseMarkup: function (markup, element) {
      var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
      existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
      var markupChecksum = adler32(markup);
      return markupChecksum === existingChecksum;
    }
  };
  
  module.exports = ReactMarkupChecksum;

});

;/*!/node_modules/react/lib/ReactOwner.js*/
define('common:node_modules/react/lib/ReactOwner', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactOwner
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * ReactOwners are capable of storing references to owned components.
   *
   * All components are capable of //being// referenced by owner components, but
   * only ReactOwner components are capable of //referencing// owned components.
   * The named reference is known as a "ref".
   *
   * Refs are available when mounted and updated during reconciliation.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return (
   *         <div onClick={this.handleClick}>
   *           <CustomComponent ref="custom" />
   *         </div>
   *       );
   *     },
   *     handleClick: function() {
   *       this.refs.custom.handleClick();
   *     },
   *     componentDidMount: function() {
   *       this.refs.custom.initialize();
   *     }
   *   });
   *
   * Refs should rarely be used. When refs are used, they should only be done to
   * control data that is not handled by React's data flow.
   *
   * @class ReactOwner
   */
  var ReactOwner = {
  
    /**
     * @param {?object} object
     * @return {boolean} True if `object` is a valid owner.
     * @final
     */
    isValidOwner: function (object) {
      return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
    },
  
    /**
     * Adds a component by ref to an owner component.
     *
     * @param {ReactComponent} component Component to reference.
     * @param {string} ref Name by which to refer to the component.
     * @param {ReactOwner} owner Component on which to record the ref.
     * @final
     * @internal
     */
    addComponentAsRefTo: function (component, ref, owner) {
      !ReactOwner.isValidOwner(owner) ? 'development' !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
      owner.attachRef(ref, component);
    },
  
    /**
     * Removes a component by ref from an owner component.
     *
     * @param {ReactComponent} component Component to dereference.
     * @param {string} ref Name of the ref to remove.
     * @param {ReactOwner} owner Component on which the ref is recorded.
     * @final
     * @internal
     */
    removeComponentAsRefFrom: function (component, ref, owner) {
      !ReactOwner.isValidOwner(owner) ? 'development' !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
      // Check that `component` is still the current ref because we do not want to
      // detach the ref if another component stole it.
      if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
        owner.detachRef(ref);
      }
    }
  
  };
  
  module.exports = ReactOwner;

});

;/*!/node_modules/react/lib/ReactRef.js*/
define('common:node_modules/react/lib/ReactRef', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactRef
   */
  
  'use strict';
  
  var ReactOwner = require('common:node_modules/react/lib/ReactOwner');
  
  var ReactRef = {};
  
  function attachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(component.getPublicInstance());
    } else {
      // Legacy ref
      ReactOwner.addComponentAsRefTo(component, ref, owner);
    }
  }
  
  function detachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(null);
    } else {
      // Legacy ref
      ReactOwner.removeComponentAsRefFrom(component, ref, owner);
    }
  }
  
  ReactRef.attachRefs = function (instance, element) {
    if (element === null || element === false) {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      attachRef(ref, instance, element._owner);
    }
  };
  
  ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
    // If either the owner or a `ref` has changed, make sure the newest owner
    // has stored a reference to `this`, and the previous owner (if different)
    // has forgotten the reference to `this`. We use the element instead
    // of the public this.props because the post processing cannot determine
    // a ref. The ref conceptually lives on the element.
  
    // TODO: Should this even be possible? The owner cannot change because
    // it's forbidden by shouldUpdateReactComponent. The ref can change
    // if you swap the keys of but not the refs. Reconsider where this check
    // is made. It probably belongs where the key checking and
    // instantiateReactComponent is done.
  
    var prevEmpty = prevElement === null || prevElement === false;
    var nextEmpty = nextElement === null || nextElement === false;
  
    return(
      // This has a few false positives w/r/t empty components.
      prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
    );
  };
  
  ReactRef.detachRefs = function (instance, element) {
    if (element === null || element === false) {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      detachRef(ref, instance, element._owner);
    }
  };
  
  module.exports = ReactRef;

});

;/*!/node_modules/react/lib/ReactReconciler.js*/
define('common:node_modules/react/lib/ReactReconciler', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactReconciler
   */
  
  'use strict';
  
  var ReactRef = require('common:node_modules/react/lib/ReactRef');
  
  /**
   * Helper to call ReactRef.attachRefs with this composite component, split out
   * to avoid allocations in the transaction mount-ready queue.
   */
  function attachRefs() {
    ReactRef.attachRefs(this, this._currentElement);
  }
  
  var ReactReconciler = {
  
    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {ReactComponent} internalInstance
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function (internalInstance, rootID, transaction, context) {
      var markup = internalInstance.mountComponent(rootID, transaction, context);
      if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
      return markup;
    },
  
    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function (internalInstance) {
      ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
      internalInstance.unmountComponent();
    },
  
    /**
     * Update a component using a new element.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactElement} nextElement
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @internal
     */
    receiveComponent: function (internalInstance, nextElement, transaction, context) {
      var prevElement = internalInstance._currentElement;
  
      if (nextElement === prevElement && context === internalInstance._context) {
        // Since elements are immutable after the owner is rendered,
        // we can do a cheap identity compare here to determine if this is a
        // superfluous reconcile. It's possible for state to be mutable but such
        // change should trigger an update of the owner which would recreate
        // the element. We explicitly check for the existence of an owner since
        // it's possible for an element created outside a composite to be
        // deeply mutated and reused.
  
        // TODO: Bailing out early is just a perf optimization right?
        // TODO: Removing the return statement should affect correctness?
        return;
      }
  
      var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
  
      if (refsChanged) {
        ReactRef.detachRefs(internalInstance, prevElement);
      }
  
      internalInstance.receiveComponent(nextElement, transaction, context);
  
      if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
    },
  
    /**
     * Flush any dirty changes in a component.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function (internalInstance, transaction) {
      internalInstance.performUpdateIfNecessary(transaction);
    }
  
  };
  
  module.exports = ReactReconciler;

});

;/*!/node_modules/react/lib/PooledClass.js*/
define('common:node_modules/react/lib/PooledClass', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule PooledClass
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Static poolers. Several custom versions for each potential number of
   * arguments. A completely generic pooler is easy to implement, but would
   * require accessing the `arguments` object. In each of these, `this` refers to
   * the Class itself, not an instance. If any others are needed, simply add them
   * here, or in their own files.
   */
  var oneArgumentPooler = function (copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };
  
  var twoArgumentPooler = function (a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };
  
  var threeArgumentPooler = function (a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };
  
  var fourArgumentPooler = function (a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };
  
  var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4, a5);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4, a5);
    }
  };
  
  var standardReleaser = function (instance) {
    var Klass = this;
    !(instance instanceof Klass) ? 'development' !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };
  
  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;
  
  /**
   * Augments `CopyConstructor` to be a poolable class, augmenting only the class
   * itself (statically) not adding any prototypical fields. Any CopyConstructor
   * you give this may have a `poolSize` property, and will look for a
   * prototypical `destructor` on instances (optional).
   *
   * @param {Function} CopyConstructor Constructor that can be used to reset.
   * @param {Function} pooler Customizable pooler.
   */
  var addPoolingTo = function (CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };
  
  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler,
    fiveArgumentPooler: fiveArgumentPooler
  };
  
  module.exports = PooledClass;

});

;/*!/node_modules/react/lib/CallbackQueue.js*/
define('common:node_modules/react/lib/CallbackQueue', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CallbackQueue
   */
  
  'use strict';
  
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * A specialized pseudo-event module to help keep track of components waiting to
   * be notified when their DOM representations are available for use.
   *
   * This implements `PooledClass`, so you should never need to instantiate this.
   * Instead, use `CallbackQueue.getPooled()`.
   *
   * @class ReactMountReady
   * @implements PooledClass
   * @internal
   */
  function CallbackQueue() {
    this._callbacks = null;
    this._contexts = null;
  }
  
  assign(CallbackQueue.prototype, {
  
    /**
     * Enqueues a callback to be invoked when `notifyAll` is invoked.
     *
     * @param {function} callback Invoked when `notifyAll` is invoked.
     * @param {?object} context Context to call `callback` with.
     * @internal
     */
    enqueue: function (callback, context) {
      this._callbacks = this._callbacks || [];
      this._contexts = this._contexts || [];
      this._callbacks.push(callback);
      this._contexts.push(context);
    },
  
    /**
     * Invokes all enqueued callbacks and clears the queue. This is invoked after
     * the DOM representation of a component has been created or updated.
     *
     * @internal
     */
    notifyAll: function () {
      var callbacks = this._callbacks;
      var contexts = this._contexts;
      if (callbacks) {
        !(callbacks.length === contexts.length) ? 'development' !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
        this._callbacks = null;
        this._contexts = null;
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i].call(contexts[i]);
        }
        callbacks.length = 0;
        contexts.length = 0;
      }
    },
  
    /**
     * Resets the internal queue.
     *
     * @internal
     */
    reset: function () {
      this._callbacks = null;
      this._contexts = null;
    },
  
    /**
     * `PooledClass` looks for this.
     */
    destructor: function () {
      this.reset();
    }
  
  });
  
  PooledClass.addPoolingTo(CallbackQueue);
  
  module.exports = CallbackQueue;

});

;/*!/node_modules/react/lib/Transaction.js*/
define('common:node_modules/react/lib/Transaction', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Transaction
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * `Transaction` creates a black box that is able to wrap any method such that
   * certain invariants are maintained before and after the method is invoked
   * (Even if an exception is thrown while invoking the wrapped method). Whoever
   * instantiates a transaction can provide enforcers of the invariants at
   * creation time. The `Transaction` class itself will supply one additional
   * automatic invariant for you - the invariant that any transaction instance
   * should not be run while it is already being run. You would typically create a
   * single instance of a `Transaction` for reuse multiple times, that potentially
   * is used to wrap several different methods. Wrappers are extremely simple -
   * they only require implementing two methods.
   *
   * <pre>
   *                       wrappers (injected at creation time)
   *                                      +        +
   *                                      |        |
   *                    +-----------------|--------|--------------+
   *                    |                 v        |              |
   *                    |      +---------------+   |              |
   *                    |   +--|    wrapper1   |---|----+         |
   *                    |   |  +---------------+   v    |         |
   *                    |   |          +-------------+  |         |
   *                    |   |     +----|   wrapper2  |--------+   |
   *                    |   |     |    +-------------+  |     |   |
   *                    |   |     |                     |     |   |
   *                    |   v     v                     v     v   | wrapper
   *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
   * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
   * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | +---+ +---+   +---------+   +---+ +---+ |
   *                    |  initialize                    close    |
   *                    +-----------------------------------------+
   * </pre>
   *
   * Use cases:
   * - Preserving the input selection ranges before/after reconciliation.
   *   Restoring selection even in the event of an unexpected error.
   * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
   *   while guaranteeing that afterwards, the event system is reactivated.
   * - Flushing a queue of collected DOM mutations to the main UI thread after a
   *   reconciliation takes place in a worker thread.
   * - Invoking any collected `componentDidUpdate` callbacks after rendering new
   *   content.
   * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
   *   to preserve the `scrollTop` (an automatic scroll aware DOM).
   * - (Future use case): Layout calculations before and after DOM updates.
   *
   * Transactional plugin API:
   * - A module that has an `initialize` method that returns any precomputation.
   * - and a `close` method that accepts the precomputation. `close` is invoked
   *   when the wrapped process is completed, or has failed.
   *
   * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
   * that implement `initialize` and `close`.
   * @return {Transaction} Single transaction for reuse in thread.
   *
   * @class Transaction
   */
  var Mixin = {
    /**
     * Sets up this instance so that it is prepared for collecting metrics. Does
     * so such that this setup method may be used on an instance that is already
     * initialized, in a way that does not consume additional memory upon reuse.
     * That can be useful if you decide to make your subclass of this mixin a
     * "PooledClass".
     */
    reinitializeTransaction: function () {
      this.transactionWrappers = this.getTransactionWrappers();
      if (this.wrapperInitData) {
        this.wrapperInitData.length = 0;
      } else {
        this.wrapperInitData = [];
      }
      this._isInTransaction = false;
    },
  
    _isInTransaction: false,
  
    /**
     * @abstract
     * @return {Array<TransactionWrapper>} Array of transaction wrappers.
     */
    getTransactionWrappers: null,
  
    isInTransaction: function () {
      return !!this._isInTransaction;
    },
  
    /**
     * Executes the function within a safety window. Use this for the top level
     * methods that result in large amounts of computation/mutations that would
     * need to be safety checked. The optional arguments helps prevent the need
     * to bind in many cases.
     *
     * @param {function} method Member of scope to call.
     * @param {Object} scope Scope to invoke from.
     * @param {Object?=} a Argument to pass to the method.
     * @param {Object?=} b Argument to pass to the method.
     * @param {Object?=} c Argument to pass to the method.
     * @param {Object?=} d Argument to pass to the method.
     * @param {Object?=} e Argument to pass to the method.
     * @param {Object?=} f Argument to pass to the method.
     *
     * @return {*} Return value from `method`.
     */
    perform: function (method, scope, a, b, c, d, e, f) {
      !!this.isInTransaction() ? 'development' !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
      var errorThrown;
      var ret;
      try {
        this._isInTransaction = true;
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // one of these calls threw.
        errorThrown = true;
        this.initializeAll(0);
        ret = method.call(scope, a, b, c, d, e, f);
        errorThrown = false;
      } finally {
        try {
          if (errorThrown) {
            // If `method` throws, prefer to show that stack trace over any thrown
            // by invoking `closeAll`.
            try {
              this.closeAll(0);
            } catch (err) {}
          } else {
            // Since `method` didn't throw, we don't want to silence the exception
            // here.
            this.closeAll(0);
          }
        } finally {
          this._isInTransaction = false;
        }
      }
      return ret;
    },
  
    initializeAll: function (startIndex) {
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        try {
          // Catching errors makes debugging more difficult, so we start with the
          // OBSERVED_ERROR state before overwriting it with the real return value
          // of initialize -- if it's still set to OBSERVED_ERROR in the finally
          // block, it means wrapper.initialize threw.
          this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
          this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
        } finally {
          if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
            // The initializer for wrapper i threw an error; initialize the
            // remaining wrappers but silence any exceptions from them to ensure
            // that the first error is the one to bubble up.
            try {
              this.initializeAll(i + 1);
            } catch (err) {}
          }
        }
      }
    },
  
    /**
     * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
     * them the respective return values of `this.transactionWrappers.init[i]`
     * (`close`rs that correspond to initializers that failed will not be
     * invoked).
     */
    closeAll: function (startIndex) {
      !this.isInTransaction() ? 'development' !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        var initData = this.wrapperInitData[i];
        var errorThrown;
        try {
          // Catching errors makes debugging more difficult, so we start with
          // errorThrown set to true before setting it to false after calling
          // close -- if it's still set to true in the finally block, it means
          // wrapper.close threw.
          errorThrown = true;
          if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
            wrapper.close.call(this, initData);
          }
          errorThrown = false;
        } finally {
          if (errorThrown) {
            // The closer for wrapper i threw an error; close the remaining
            // wrappers but silence any exceptions from them to ensure that the
            // first error is the one to bubble up.
            try {
              this.closeAll(i + 1);
            } catch (e) {}
          }
        }
      }
      this.wrapperInitData.length = 0;
    }
  };
  
  var Transaction = {
  
    Mixin: Mixin,
  
    /**
     * Token to look for to determine if an error occurred.
     */
    OBSERVED_ERROR: {}
  
  };
  
  module.exports = Transaction;

});

;/*!/node_modules/react/lib/ReactUpdates.js*/
define('common:node_modules/react/lib/ReactUpdates', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactUpdates
   */
  
  'use strict';
  
  var CallbackQueue = require('common:node_modules/react/lib/CallbackQueue');
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  var ReactReconciler = require('common:node_modules/react/lib/ReactReconciler');
  var Transaction = require('common:node_modules/react/lib/Transaction');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  var dirtyComponents = [];
  var asapCallbackQueue = CallbackQueue.getPooled();
  var asapEnqueued = false;
  
  var batchingStrategy = null;
  
  function ensureInjected() {
    !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? 'development' !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
  }
  
  var NESTED_UPDATES = {
    initialize: function () {
      this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function () {
      if (this.dirtyComponentsLength !== dirtyComponents.length) {
        // Additional updates were enqueued by componentDidUpdate handlers or
        // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
        // these new updates so that if A's componentDidUpdate calls setState on
        // B, B will update before the callback A's updater provided when calling
        // setState.
        dirtyComponents.splice(0, this.dirtyComponentsLength);
        flushBatchedUpdates();
      } else {
        dirtyComponents.length = 0;
      }
    }
  };
  
  var UPDATE_QUEUEING = {
    initialize: function () {
      this.callbackQueue.reset();
    },
    close: function () {
      this.callbackQueue.notifyAll();
    }
  };
  
  var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
  
  function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction();
    this.dirtyComponentsLength = null;
    this.callbackQueue = CallbackQueue.getPooled();
    this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
  }
  
  assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    },
  
    destructor: function () {
      this.dirtyComponentsLength = null;
      CallbackQueue.release(this.callbackQueue);
      this.callbackQueue = null;
      ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
      this.reconcileTransaction = null;
    },
  
    perform: function (method, scope, a) {
      // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
      // with this transaction's wrappers around it.
      return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
  });
  
  PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
  
  function batchedUpdates(callback, a, b, c, d, e) {
    ensureInjected();
    batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
  }
  
  /**
   * Array comparator for ReactComponents by mount ordering.
   *
   * @param {ReactComponent} c1 first component you're comparing
   * @param {ReactComponent} c2 second component you're comparing
   * @return {number} Return value usable by Array.prototype.sort().
   */
  function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
  }
  
  function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    !(len === dirtyComponents.length) ? 'development' !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
  
    // Since reconciling a component higher in the owner hierarchy usually (not
    // always -- see shouldComponentUpdate()) will reconcile children, reconcile
    // them before their children by sorting the array.
    dirtyComponents.sort(mountOrderComparator);
  
    for (var i = 0; i < len; i++) {
      // If a component is unmounted before pending changes apply, it will still
      // be here, but we assume that it has cleared its _pendingCallbacks and
      // that performUpdateIfNecessary is a noop.
      var component = dirtyComponents[i];
  
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
  
      ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
  
      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
        }
      }
    }
  }
  
  var flushBatchedUpdates = function () {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }
  
      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  };
  flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
  
  /**
   * Mark a component as needing a rerender, adding an optional callback to a
   * list of functions which will be executed once the rerender occurs.
   */
  function enqueueUpdate(component) {
    ensureInjected();
  
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (This is called by each top-level update
    // function, like setProps, setState, forceUpdate, etc.; creation and
    // destruction of top-level components is guarded in ReactMount.)
  
    if (!batchingStrategy.isBatchingUpdates) {
      batchingStrategy.batchedUpdates(enqueueUpdate, component);
      return;
    }
  
    dirtyComponents.push(component);
  }
  
  /**
   * Enqueue a callback to be run at the end of the current batching cycle. Throws
   * if no updates are currently being performed.
   */
  function asap(callback, context) {
    !batchingStrategy.isBatchingUpdates ? 'development' !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
    asapCallbackQueue.enqueue(callback, context);
    asapEnqueued = true;
  }
  
  var ReactUpdatesInjection = {
    injectReconcileTransaction: function (ReconcileTransaction) {
      !ReconcileTransaction ? 'development' !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
      ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },
  
    injectBatchingStrategy: function (_batchingStrategy) {
      !_batchingStrategy ? 'development' !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
      !(typeof _batchingStrategy.batchedUpdates === 'function') ? 'development' !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
      !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? 'development' !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
      batchingStrategy = _batchingStrategy;
    }
  };
  
  var ReactUpdates = {
    /**
     * React references `ReactReconcileTransaction` using this property in order
     * to allow dependency injection.
     *
     * @internal
     */
    ReactReconcileTransaction: null,
  
    batchedUpdates: batchedUpdates,
    enqueueUpdate: enqueueUpdate,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection,
    asap: asap
  };
  
  module.exports = ReactUpdates;

});

;/*!/node_modules/react/lib/ReactUpdateQueue.js*/
define('common:node_modules/react/lib/ReactUpdateQueue', function(require, exports, module) {

  /**
   * Copyright 2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactUpdateQueue
   */
  
  'use strict';
  
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactInstanceMap = require('common:node_modules/react/lib/ReactInstanceMap');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  function enqueueUpdate(internalInstance) {
    ReactUpdates.enqueueUpdate(internalInstance);
  }
  
  function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (!internalInstance) {
      if ('development' !== 'production') {
        // Only warn when we have a callerName. Otherwise we should be silent.
        // We're probably calling from enqueueCallback. We don't want to warn
        // there because we already warned for the corresponding lifecycle method.
        'development' !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
      }
      return null;
    }
  
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
    }
  
    return internalInstance;
  }
  
  /**
   * ReactUpdateQueue allows for state updates to be scheduled into a later
   * reconciliation step.
   */
  var ReactUpdateQueue = {
  
    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function (publicInstance) {
      if ('development' !== 'production') {
        var owner = ReactCurrentOwner.current;
        if (owner !== null) {
          'development' !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
          owner._warnedAboutRefsInRender = true;
        }
      }
      var internalInstance = ReactInstanceMap.get(publicInstance);
      if (internalInstance) {
        // During componentWillMount and render this will still be null but after
        // that will always render to something. At least for now. So we can use
        // this hack.
        return !!internalInstance._renderedComponent;
      } else {
        return false;
      }
    },
  
    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @internal
     */
    enqueueCallback: function (publicInstance, callback) {
      !(typeof callback === 'function') ? 'development' !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
  
      // Previously we would throw an error if we didn't have an internal
      // instance. Since we want to make it a no-op instead, we mirror the same
      // behavior we have in other enqueue* methods.
      // We also need to ignore callbacks in componentWillMount. See
      // enqueueUpdates.
      if (!internalInstance) {
        return null;
      }
  
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState. Alternatively, we can disallow
      // componentWillMount during server-side rendering.
      enqueueUpdate(internalInstance);
    },
  
    enqueueCallbackInternal: function (internalInstance, callback) {
      !(typeof callback === 'function') ? 'development' !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      enqueueUpdate(internalInstance);
    },
  
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
    enqueueForceUpdate: function (publicInstance) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
  
      if (!internalInstance) {
        return;
      }
  
      internalInstance._pendingForceUpdate = true;
  
      enqueueUpdate(internalInstance);
    },
  
    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @internal
     */
    enqueueReplaceState: function (publicInstance, completeState) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
  
      if (!internalInstance) {
        return;
      }
  
      internalInstance._pendingStateQueue = [completeState];
      internalInstance._pendingReplaceState = true;
  
      enqueueUpdate(internalInstance);
    },
  
    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @internal
     */
    enqueueSetState: function (publicInstance, partialState) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
  
      if (!internalInstance) {
        return;
      }
  
      var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
      queue.push(partialState);
  
      enqueueUpdate(internalInstance);
    },
  
    /**
     * Sets a subset of the props.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialProps Subset of the next props.
     * @internal
     */
    enqueueSetProps: function (publicInstance, partialProps) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
      if (!internalInstance) {
        return;
      }
      ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
    },
  
    enqueueSetPropsInternal: function (internalInstance, partialProps) {
      var topLevelWrapper = internalInstance._topLevelWrapper;
      !topLevelWrapper ? 'development' !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
  
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
      var element = wrapElement.props;
      var props = assign({}, element.props, partialProps);
      topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
  
      enqueueUpdate(topLevelWrapper);
    },
  
    /**
     * Replaces all of the props.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} props New props.
     * @internal
     */
    enqueueReplaceProps: function (publicInstance, props) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
      if (!internalInstance) {
        return;
      }
      ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
    },
  
    enqueueReplacePropsInternal: function (internalInstance, props) {
      var topLevelWrapper = internalInstance._topLevelWrapper;
      !topLevelWrapper ? 'development' !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
  
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
      var element = wrapElement.props;
      topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
  
      enqueueUpdate(topLevelWrapper);
    },
  
    enqueueElementInternal: function (internalInstance, newElement) {
      internalInstance._pendingElement = newElement;
      enqueueUpdate(internalInstance);
    }
  
  };
  
  module.exports = ReactUpdateQueue;

});

;/*!/node_modules/fbjs/lib/emptyObject.js*/
define('common:node_modules/fbjs/lib/emptyObject', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule emptyObject
   */
  
  'use strict';
  
  var emptyObject = {};
  
  if ('development' !== 'production') {
    Object.freeze(emptyObject);
  }
  
  module.exports = emptyObject;

});

;/*!/node_modules/fbjs/lib/isNode.js*/
define('common:node_modules/fbjs/lib/isNode', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isNode
   * @typechecks
   */
  
  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM node.
   */
  'use strict';
  
  function isNode(object) {
    return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }
  
  module.exports = isNode;

});

;/*!/node_modules/fbjs/lib/isTextNode.js*/
define('common:node_modules/fbjs/lib/isTextNode', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isTextNode
   * @typechecks
   */
  
  'use strict';
  
  var isNode = require('common:node_modules/fbjs/lib/isNode');
  
  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM text node.
   */
  function isTextNode(object) {
    return isNode(object) && object.nodeType == 3;
  }
  
  module.exports = isTextNode;

});

;/*!/node_modules/fbjs/lib/containsNode.js*/
define('common:node_modules/fbjs/lib/containsNode', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule containsNode
   * @typechecks
   */
  
  'use strict';
  
  var isTextNode = require('common:node_modules/fbjs/lib/isTextNode');
  
  /*eslint-disable no-bitwise */
  
  /**
   * Checks if a given DOM node contains or is another DOM node.
   *
   * @param {?DOMNode} outerNode Outer DOM node.
   * @param {?DOMNode} innerNode Inner DOM node.
   * @return {boolean} True if `outerNode` contains or is `innerNode`.
   */
  function containsNode(_x, _x2) {
    var _again = true;
  
    _function: while (_again) {
      var outerNode = _x,
          innerNode = _x2;
      _again = false;
  
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        _x = outerNode;
        _x2 = innerNode.parentNode;
        _again = true;
        continue _function;
      } else if (outerNode.contains) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
  }
  
  module.exports = containsNode;

});

;/*!/node_modules/react/lib/ReactComponentEnvironment.js*/
define('common:node_modules/react/lib/ReactComponentEnvironment', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponentEnvironment
   */
  
  'use strict';
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  var injected = false;
  
  var ReactComponentEnvironment = {
  
    /**
     * Optionally injectable environment dependent cleanup hook. (server vs.
     * browser etc). Example: A browser system caches DOM nodes based on component
     * ID and must remove that cache entry when this instance is unmounted.
     */
    unmountIDFromEnvironment: null,
  
    /**
     * Optionally injectable hook for swapping out mount images in the middle of
     * the tree.
     */
    replaceNodeWithMarkupByID: null,
  
    /**
     * Optionally injectable hook for processing a queue of child updates. Will
     * later move into MultiChildComponents.
     */
    processChildrenUpdates: null,
  
    injection: {
      injectEnvironment: function (environment) {
        !!injected ? 'development' !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
        ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
        ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
        ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
        injected = true;
      }
    }
  
  };
  
  module.exports = ReactComponentEnvironment;

});

;/*!/node_modules/react/lib/ReactPropTypeLocations.js*/
define('common:node_modules/react/lib/ReactPropTypeLocations', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypeLocations
   */
  
  'use strict';
  
  var keyMirror = require('common:node_modules/fbjs/lib/keyMirror');
  
  var ReactPropTypeLocations = keyMirror({
    prop: null,
    context: null,
    childContext: null
  });
  
  module.exports = ReactPropTypeLocations;

});

;/*!/node_modules/react/lib/ReactPropTypeLocationNames.js*/
define('common:node_modules/react/lib/ReactPropTypeLocationNames', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypeLocationNames
   */
  
  'use strict';
  
  var ReactPropTypeLocationNames = {};
  
  if ('development' !== 'production') {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  }
  
  module.exports = ReactPropTypeLocationNames;

});

;/*!/node_modules/react/lib/shouldUpdateReactComponent.js*/
define('common:node_modules/react/lib/shouldUpdateReactComponent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule shouldUpdateReactComponent
   * @typechecks static-only
   */
  
  'use strict';
  
  /**
   * Given a `prevElement` and `nextElement`, determines if the existing
   * instance should be updated as opposed to being destroyed or replaced by a new
   * instance. Both arguments are elements. This ensures that this logic can
   * operate on stateless trees without any backing instance.
   *
   * @param {?object} prevElement
   * @param {?object} nextElement
   * @return {boolean} True if the existing instance should be updated.
   * @protected
   */
  function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = prevElement === null || prevElement === false;
    var nextEmpty = nextElement === null || nextElement === false;
    if (prevEmpty || nextEmpty) {
      return prevEmpty === nextEmpty;
    }
  
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return nextType === 'string' || nextType === 'number';
    } else {
      return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
    }
    return false;
  }
  
  module.exports = shouldUpdateReactComponent;

});

;/*!/node_modules/react/lib/ReactCompositeComponent.js*/
define('common:node_modules/react/lib/ReactCompositeComponent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactCompositeComponent
   */
  
  'use strict';
  
  var ReactComponentEnvironment = require('common:node_modules/react/lib/ReactComponentEnvironment');
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactInstanceMap = require('common:node_modules/react/lib/ReactInstanceMap');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  var ReactPropTypeLocations = require('common:node_modules/react/lib/ReactPropTypeLocations');
  var ReactPropTypeLocationNames = require('common:node_modules/react/lib/ReactPropTypeLocationNames');
  var ReactReconciler = require('common:node_modules/react/lib/ReactReconciler');
  var ReactUpdateQueue = require('common:node_modules/react/lib/ReactUpdateQueue');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var emptyObject = require('common:node_modules/fbjs/lib/emptyObject');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var shouldUpdateReactComponent = require('common:node_modules/react/lib/shouldUpdateReactComponent');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  function getDeclarationErrorAddendum(component) {
    var owner = component._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  function StatelessComponent(Component) {}
  StatelessComponent.prototype.render = function () {
    var Component = ReactInstanceMap.get(this)._currentElement.type;
    return Component(this.props, this.context, this.updater);
  };
  
  /**
   * ------------------ The Life-Cycle of a Composite Component ------------------
   *
   * - constructor: Initialization of state. The instance is now retained.
   *   - componentWillMount
   *   - render
   *   - [children's constructors]
   *     - [children's componentWillMount and render]
   *     - [children's componentDidMount]
   *     - componentDidMount
   *
   *       Update Phases:
   *       - componentWillReceiveProps (only called if parent updated)
   *       - shouldComponentUpdate
   *         - componentWillUpdate
   *           - render
   *           - [children's constructors or receive props phases]
   *         - componentDidUpdate
   *
   *     - componentWillUnmount
   *     - [children's componentWillUnmount]
   *   - [children destroyed]
   * - (destroyed): The instance is now blank, released by React and ready for GC.
   *
   * -----------------------------------------------------------------------------
   */
  
  /**
   * An incrementing ID assigned to each component when it is mounted. This is
   * used to enforce the order in which `ReactUpdates` updates dirty components.
   *
   * @private
   */
  var nextMountID = 1;
  
  /**
   * @lends {ReactCompositeComponent.prototype}
   */
  var ReactCompositeComponentMixin = {
  
    /**
     * Base constructor for all composite component.
     *
     * @param {ReactElement} element
     * @final
     * @internal
     */
    construct: function (element) {
      this._currentElement = element;
      this._rootNodeID = null;
      this._instance = null;
  
      // See ReactUpdateQueue
      this._pendingElement = null;
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
  
      this._renderedComponent = null;
  
      this._context = null;
      this._mountOrder = 0;
      this._topLevelWrapper = null;
  
      // See ReactUpdates and ReactUpdateQueue.
      this._pendingCallbacks = null;
    },
  
    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function (rootID, transaction, context) {
      this._context = context;
      this._mountOrder = nextMountID++;
      this._rootNodeID = rootID;
  
      var publicProps = this._processProps(this._currentElement.props);
      var publicContext = this._processContext(context);
  
      var Component = this._currentElement.type;
  
      // Initialize the public class
      var inst;
      var renderedElement;
  
      // This is a way to detect if Component is a stateless arrow function
      // component, which is not newable. It might not be 100% reliable but is
      // something we can do until we start detecting that Component extends
      // React.Component. We already assume that typeof Component === 'function'.
      var canInstantiate = ('prototype' in Component);
  
      if (canInstantiate) {
        if ('development' !== 'production') {
          ReactCurrentOwner.current = this;
          try {
            inst = new Component(publicProps, publicContext, ReactUpdateQueue);
          } finally {
            ReactCurrentOwner.current = null;
          }
        } else {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        }
      }
  
      if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
        renderedElement = inst;
        inst = new StatelessComponent(Component);
      }
  
      if ('development' !== 'production') {
        // This will throw later in _renderValidatedComponent, but add an early
        // warning now to help debugging
        if (inst.render == null) {
          'development' !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
        } else {
          // We support ES6 inheriting from React.Component, the module pattern,
          // and stateless components, but not ES6 classes that don't extend
          'development' !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
        }
      }
  
      // These should be set up in the constructor, but as a convenience for
      // simpler class abstractions, we set them up after the fact.
      inst.props = publicProps;
      inst.context = publicContext;
      inst.refs = emptyObject;
      inst.updater = ReactUpdateQueue;
  
      this._instance = inst;
  
      // Store a reference from the instance back to the internal representation
      ReactInstanceMap.set(inst, this);
  
      if ('development' !== 'production') {
        // Since plain JS classes are defined without any special initialization
        // logic, we can not catch common errors early. Therefore, we have to
        // catch them here, at initialization time, instead.
        'development' !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
        'development' !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
        'development' !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
        'development' !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
        'development' !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
        'development' !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
        'development' !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
      }
  
      var initialState = inst.state;
      if (initialState === undefined) {
        inst.state = initialState = null;
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? 'development' !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
  
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
  
      if (inst.componentWillMount) {
        inst.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }
  
      // If not a stateless component, we now render
      if (renderedElement === undefined) {
        renderedElement = this._renderValidatedComponent();
      }
  
      this._renderedComponent = this._instantiateReactComponent(renderedElement);
  
      var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
      if (inst.componentDidMount) {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
  
      return markup;
    },
  
    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function () {
      var inst = this._instance;
  
      if (inst.componentWillUnmount) {
        inst.componentWillUnmount();
      }
  
      ReactReconciler.unmountComponent(this._renderedComponent);
      this._renderedComponent = null;
      this._instance = null;
  
      // Reset pending fields
      // Even if this component is scheduled for another update in ReactUpdates,
      // it would still be ignored because these fields are reset.
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
      this._pendingCallbacks = null;
      this._pendingElement = null;
  
      // These fields do not really need to be reset since this object is no
      // longer accessible.
      this._context = null;
      this._rootNodeID = null;
      this._topLevelWrapper = null;
  
      // Delete the reference from the instance to this internal representation
      // which allow the internals to be properly cleaned up even if the user
      // leaks a reference to the public instance.
      ReactInstanceMap.remove(inst);
  
      // Some existing components rely on inst.props even after they've been
      // destroyed (in event handlers).
      // TODO: inst.props = null;
      // TODO: inst.state = null;
      // TODO: inst.context = null;
    },
  
    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _maskContext: function (context) {
      var maskedContext = null;
      var Component = this._currentElement.type;
      var contextTypes = Component.contextTypes;
      if (!contextTypes) {
        return emptyObject;
      }
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      return maskedContext;
    },
  
    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`, and asserts that they are valid.
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _processContext: function (context) {
      var maskedContext = this._maskContext(context);
      if ('development' !== 'production') {
        var Component = this._currentElement.type;
        if (Component.contextTypes) {
          this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
        }
      }
      return maskedContext;
    },
  
    /**
     * @param {object} currentContext
     * @return {object}
     * @private
     */
    _processChildContext: function (currentContext) {
      var Component = this._currentElement.type;
      var inst = this._instance;
      var childContext = inst.getChildContext && inst.getChildContext();
      if (childContext) {
        !(typeof Component.childContextTypes === 'object') ? 'development' !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
        if ('development' !== 'production') {
          this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
        }
        for (var name in childContext) {
          !(name in Component.childContextTypes) ? 'development' !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
        }
        return assign({}, currentContext, childContext);
      }
      return currentContext;
    },
  
    /**
     * Processes props by setting default values for unspecified props and
     * asserting that the props are valid. Does not mutate its argument; returns
     * a new props object with defaults merged in.
     *
     * @param {object} newProps
     * @return {object}
     * @private
     */
    _processProps: function (newProps) {
      if ('development' !== 'production') {
        var Component = this._currentElement.type;
        if (Component.propTypes) {
          this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
        }
      }
      return newProps;
    },
  
    /**
     * Assert that the props are valid
     *
     * @param {object} propTypes Map of prop name to a ReactPropType
     * @param {object} props
     * @param {string} location e.g. "prop", "context", "child context"
     * @private
     */
    _checkPropTypes: function (propTypes, props, location) {
      // TODO: Stop validating prop types here and only use the element
      // validation.
      var componentName = this.getName();
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error;
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            !(typeof propTypes[propName] === 'function') ? 'development' !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
            error = propTypes[propName](props, propName, componentName, location);
          } catch (ex) {
            error = ex;
          }
          if (error instanceof Error) {
            // We may want to extend this logic for similar errors in
            // top-level render calls, so I'm abstracting it away into
            // a function to minimize refactoring in the future
            var addendum = getDeclarationErrorAddendum(this);
  
            if (location === ReactPropTypeLocations.prop) {
              // Preface gives us something to blacklist in warning module
              'development' !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
            } else {
              'development' !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
            }
          }
        }
      }
    },
  
    receiveComponent: function (nextElement, transaction, nextContext) {
      var prevElement = this._currentElement;
      var prevContext = this._context;
  
      this._pendingElement = null;
  
      this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },
  
    /**
     * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
     * is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function (transaction) {
      if (this._pendingElement != null) {
        ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
      }
  
      if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
        this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
      }
    },
  
    /**
     * Perform an update to a mounted component. The componentWillReceiveProps and
     * shouldComponentUpdate methods are called, then (assuming the update isn't
     * skipped) the remaining update lifecycle methods are called and the DOM
     * representation is updated.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevParentElement
     * @param {ReactElement} nextParentElement
     * @internal
     * @overridable
     */
    updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
      var inst = this._instance;
  
      var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
      var nextProps;
  
      // Distinguish between a props update versus a simple state update
      if (prevParentElement === nextParentElement) {
        // Skip checking prop types again -- we don't read inst.props to avoid
        // warning for DOM component props in this upgrade
        nextProps = nextParentElement.props;
      } else {
        nextProps = this._processProps(nextParentElement.props);
        // An update here will schedule an update but immediately set
        // _pendingStateQueue which will ensure that any state updates gets
        // immediately reconciled instead of waiting for the next batch.
  
        if (inst.componentWillReceiveProps) {
          inst.componentWillReceiveProps(nextProps, nextContext);
        }
      }
  
      var nextState = this._processPendingState(nextProps, nextContext);
  
      var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
  
      if ('development' !== 'production') {
        'development' !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
      }
  
      if (shouldUpdate) {
        this._pendingForceUpdate = false;
        // Will set `this.props`, `this.state` and `this.context`.
        this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
      } else {
        // If it's determined that a component should not update, we still want
        // to set props and state but we shortcut the rest of the update.
        this._currentElement = nextParentElement;
        this._context = nextUnmaskedContext;
        inst.props = nextProps;
        inst.state = nextState;
        inst.context = nextContext;
      }
    },
  
    _processPendingState: function (props, context) {
      var inst = this._instance;
      var queue = this._pendingStateQueue;
      var replace = this._pendingReplaceState;
      this._pendingReplaceState = false;
      this._pendingStateQueue = null;
  
      if (!queue) {
        return inst.state;
      }
  
      if (replace && queue.length === 1) {
        return queue[0];
      }
  
      var nextState = assign({}, replace ? queue[0] : inst.state);
      for (var i = replace ? 1 : 0; i < queue.length; i++) {
        var partial = queue[i];
        assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
      }
  
      return nextState;
    },
  
    /**
     * Merges new props and state, notifies delegate methods of update and
     * performs update.
     *
     * @param {ReactElement} nextElement Next element
     * @param {object} nextProps Next public object to set as properties.
     * @param {?object} nextState Next object to set as state.
     * @param {?object} nextContext Next public object to set as context.
     * @param {ReactReconcileTransaction} transaction
     * @param {?object} unmaskedContext
     * @private
     */
    _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
      var inst = this._instance;
  
      var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
      var prevProps;
      var prevState;
      var prevContext;
      if (hasComponentDidUpdate) {
        prevProps = inst.props;
        prevState = inst.state;
        prevContext = inst.context;
      }
  
      if (inst.componentWillUpdate) {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
  
      this._currentElement = nextElement;
      this._context = unmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
  
      this._updateRenderedComponent(transaction, unmaskedContext);
  
      if (hasComponentDidUpdate) {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    },
  
    /**
     * Call the component's `render` method and update the DOM accordingly.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    _updateRenderedComponent: function (transaction, context) {
      var prevComponentInstance = this._renderedComponent;
      var prevRenderedElement = prevComponentInstance._currentElement;
      var nextRenderedElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
        ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        ReactReconciler.unmountComponent(prevComponentInstance);
  
        this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
        var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
        this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
      }
    },
  
    /**
     * @protected
     */
    _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
      ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    },
  
    /**
     * @protected
     */
    _renderValidatedComponentWithoutOwnerOrContext: function () {
      var inst = this._instance;
      var renderedComponent = inst.render();
      if ('development' !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          renderedComponent = null;
        }
      }
  
      return renderedComponent;
    },
  
    /**
     * @private
     */
    _renderValidatedComponent: function () {
      var renderedComponent;
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
      !(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? 'development' !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      return renderedComponent;
    },
  
    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function (ref, component) {
      var inst = this.getPublicInstance();
      !(inst != null) ? 'development' !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
      var publicComponentInstance = component.getPublicInstance();
      if ('development' !== 'production') {
        var componentName = component && component.getName ? component.getName() : 'a component';
        'development' !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
      }
      var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
      refs[ref] = publicComponentInstance;
    },
  
    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function (ref) {
      var refs = this.getPublicInstance().refs;
      delete refs[ref];
    },
  
    /**
     * Get a text description of the component that can be used to identify it
     * in error messages.
     * @return {string} The name or null.
     * @internal
     */
    getName: function () {
      var type = this._currentElement.type;
      var constructor = this._instance && this._instance.constructor;
      return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },
  
    /**
     * Get the publicly accessible representation of this component - i.e. what
     * is exposed by refs and returned by render. Can be null for stateless
     * components.
     *
     * @return {ReactComponent} the public component instance.
     * @internal
     */
    getPublicInstance: function () {
      var inst = this._instance;
      if (inst instanceof StatelessComponent) {
        return null;
      }
      return inst;
    },
  
    // Stub
    _instantiateReactComponent: null
  
  };
  
  ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent',
    _renderValidatedComponent: '_renderValidatedComponent'
  });
  
  var ReactCompositeComponent = {
  
    Mixin: ReactCompositeComponentMixin
  
  };
  
  module.exports = ReactCompositeComponent;

});

;/*!/node_modules/react/lib/ReactEmptyComponent.js*/
define('common:node_modules/react/lib/ReactEmptyComponent', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEmptyComponent
   */
  
  'use strict';
  
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactEmptyComponentRegistry = require('common:node_modules/react/lib/ReactEmptyComponentRegistry');
  var ReactReconciler = require('common:node_modules/react/lib/ReactReconciler');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  
  var placeholderElement;
  
  var ReactEmptyComponentInjection = {
    injectEmptyComponent: function (component) {
      placeholderElement = ReactElement.createElement(component);
    }
  };
  
  function registerNullComponentID() {
    ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
  }
  
  var ReactEmptyComponent = function (instantiate) {
    this._currentElement = null;
    this._rootNodeID = null;
    this._renderedComponent = instantiate(placeholderElement);
  };
  assign(ReactEmptyComponent.prototype, {
    construct: function (element) {},
    mountComponent: function (rootID, transaction, context) {
      transaction.getReactMountReady().enqueue(registerNullComponentID, this);
      this._rootNodeID = rootID;
      return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
    },
    receiveComponent: function () {},
    unmountComponent: function (rootID, transaction, context) {
      ReactReconciler.unmountComponent(this._renderedComponent);
      ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
      this._rootNodeID = null;
      this._renderedComponent = null;
    }
  });
  
  ReactEmptyComponent.injection = ReactEmptyComponentInjection;
  
  module.exports = ReactEmptyComponent;

});

;/*!/node_modules/react/lib/ReactNativeComponent.js*/
define('common:node_modules/react/lib/ReactNativeComponent', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactNativeComponent
   */
  
  'use strict';
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  var autoGenerateWrapperClass = null;
  var genericComponentClass = null;
  // This registry keeps track of wrapper classes around native tags.
  var tagToComponentClass = {};
  var textComponentClass = null;
  
  var ReactNativeComponentInjection = {
    // This accepts a class that receives the tag string. This is a catch all
    // that can render any kind of tag.
    injectGenericComponentClass: function (componentClass) {
      genericComponentClass = componentClass;
    },
    // This accepts a text component class that takes the text string to be
    // rendered as props.
    injectTextComponentClass: function (componentClass) {
      textComponentClass = componentClass;
    },
    // This accepts a keyed object with classes as values. Each key represents a
    // tag. That particular tag will use this class instead of the generic one.
    injectComponentClasses: function (componentClasses) {
      assign(tagToComponentClass, componentClasses);
    }
  };
  
  /**
   * Get a composite component wrapper class for a specific tag.
   *
   * @param {ReactElement} element The tag for which to get the class.
   * @return {function} The React class constructor function.
   */
  function getComponentClassForElement(element) {
    if (typeof element.type === 'function') {
      return element.type;
    }
    var tag = element.type;
    var componentClass = tagToComponentClass[tag];
    if (componentClass == null) {
      tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
    }
    return componentClass;
  }
  
  /**
   * Get a native internal component class for a specific tag.
   *
   * @param {ReactElement} element The element to create.
   * @return {function} The internal class constructor function.
   */
  function createInternalComponent(element) {
    !genericComponentClass ? 'development' !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
    return new genericComponentClass(element.type, element.props);
  }
  
  /**
   * @param {ReactText} text
   * @return {ReactComponent}
   */
  function createInstanceForText(text) {
    return new textComponentClass(text);
  }
  
  /**
   * @param {ReactComponent} component
   * @return {boolean}
   */
  function isTextComponent(component) {
    return component instanceof textComponentClass;
  }
  
  var ReactNativeComponent = {
    getComponentClassForElement: getComponentClassForElement,
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactNativeComponentInjection
  };
  
  module.exports = ReactNativeComponent;

});

;/*!/node_modules/react/lib/instantiateReactComponent.js*/
define('common:node_modules/react/lib/instantiateReactComponent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule instantiateReactComponent
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactCompositeComponent = require('common:node_modules/react/lib/ReactCompositeComponent');
  var ReactEmptyComponent = require('common:node_modules/react/lib/ReactEmptyComponent');
  var ReactNativeComponent = require('common:node_modules/react/lib/ReactNativeComponent');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  // To avoid a cyclic dependency, we create the final class in this module
  var ReactCompositeComponentWrapper = function () {};
  assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
    _instantiateReactComponent: instantiateReactComponent
  });
  
  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  /**
   * Check if the type reference is a known internal type. I.e. not a user
   * provided composite type.
   *
   * @param {function} type
   * @return {boolean} Returns true if this is a valid internal type.
   */
  function isInternalComponentType(type) {
    return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
  }
  
  /**
   * Given a ReactNode, create an instance that will actually be mounted.
   *
   * @param {ReactNode} node
   * @return {object} A new instance of the element's constructor.
   * @protected
   */
  function instantiateReactComponent(node) {
    var instance;
  
    if (node === null || node === false) {
      instance = new ReactEmptyComponent(instantiateReactComponent);
    } else if (typeof node === 'object') {
      var element = node;
      !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? 'development' !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
  
      // Special case string values
      if (typeof element.type === 'string') {
        instance = ReactNativeComponent.createInternalComponent(element);
      } else if (isInternalComponentType(element.type)) {
        // This is temporarily available for custom components that are not string
        // representations. I.e. ART. Once those are updated to use the string
        // representation, we can drop this code path.
        instance = new element.type(element);
      } else {
        instance = new ReactCompositeComponentWrapper();
      }
    } else if (typeof node === 'string' || typeof node === 'number') {
      instance = ReactNativeComponent.createInstanceForText(node);
    } else {
      !false ? 'development' !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
    }
  
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
    }
  
    // Sets up the instance. This can probably just move into the constructor now.
    instance.construct(node);
  
    // These two fields are used by the DOM and ART diffing algorithms
    // respectively. Instead of using expandos on components, we should be
    // storing the state needed by the diffing algorithms elsewhere.
    instance._mountIndex = 0;
    instance._mountImage = null;
  
    if ('development' !== 'production') {
      instance._isOwnerNecessary = false;
      instance._warnedAboutRefsInRender = false;
    }
  
    // Internal instances should fully constructed at this point, so they should
    // not get any new fields added to them at this point.
    if ('development' !== 'production') {
      if (Object.preventExtensions) {
        Object.preventExtensions(instance);
      }
    }
  
    return instance;
  }
  
  module.exports = instantiateReactComponent;

});

;/*!/node_modules/react/lib/validateDOMNesting.js*/
define('common:node_modules/react/lib/validateDOMNesting', function(require, exports, module) {

  /**
   * Copyright 2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule validateDOMNesting
   */
  
  'use strict';
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var validateDOMNesting = emptyFunction;
  
  if ('development' !== 'production') {
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
  
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
  
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
  
    // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
    // TODO: Distinguish by namespace here -- for <title>, including it here
    // errs on the side of fewer warnings
    'foreignObject', 'desc', 'title'];
  
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat(['button']);
  
    // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  
    var emptyAncestorInfo = {
      parentTag: null,
  
      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,
  
      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null
    };
  
    var updatedAncestorInfo = function (oldInfo, tag, instance) {
      var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
      var info = { tag: tag, instance: instance };
  
      if (inScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.aTagInScope = null;
        ancestorInfo.buttonTagInScope = null;
        ancestorInfo.nobrTagInScope = null;
      }
      if (buttonScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.pTagInButtonScope = null;
      }
  
      // See rules for 'li', 'dd', 'dt' start tags in
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
        ancestorInfo.listItemTagAutoclosing = null;
        ancestorInfo.dlItemTagAutoclosing = null;
      }
  
      ancestorInfo.parentTag = info;
  
      if (tag === 'form') {
        ancestorInfo.formTag = info;
      }
      if (tag === 'a') {
        ancestorInfo.aTagInScope = info;
      }
      if (tag === 'button') {
        ancestorInfo.buttonTagInScope = info;
      }
      if (tag === 'nobr') {
        ancestorInfo.nobrTagInScope = info;
      }
      if (tag === 'p') {
        ancestorInfo.pTagInButtonScope = info;
      }
      if (tag === 'li') {
        ancestorInfo.listItemTagAutoclosing = info;
      }
      if (tag === 'dd' || tag === 'dt') {
        ancestorInfo.dlItemTagAutoclosing = info;
      }
  
      return ancestorInfo;
    };
  
    /**
     * Returns whether
     */
    var isTagValidWithParent = function (tag, parentTag) {
      // First, let's check if we're in an unusual parsing mode...
      switch (parentTag) {
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
        case 'select':
          return tag === 'option' || tag === 'optgroup' || tag === '#text';
        case 'optgroup':
          return tag === 'option' || tag === '#text';
        // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
        // but
        case 'option':
          return tag === '#text';
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
        // No special behavior since these rules fall back to "in body" mode for
        // all except special table nodes which cause bad parsing behavior anyway.
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
        case 'tr':
          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
        case 'tbody':
        case 'thead':
        case 'tfoot':
          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
        case 'colgroup':
          return tag === 'col' || tag === 'template';
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
        case 'table':
          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
        case 'head':
          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
  
        // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
        case 'html':
          return tag === 'head' || tag === 'body';
      }
  
      // Probably in the "in body" parsing mode, so we outlaw only tag combos
      // where the parsing rules cause implicit opens or closes to be added.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      switch (tag) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
  
        case 'rp':
        case 'rt':
          return impliedEndTags.indexOf(parentTag) === -1;
  
        case 'caption':
        case 'col':
        case 'colgroup':
        case 'frame':
        case 'head':
        case 'tbody':
        case 'td':
        case 'tfoot':
        case 'th':
        case 'thead':
        case 'tr':
          // These tags are only valid with a few parents that have special child
          // parsing rules -- if we're down here, then none of those matched and
          // so we allow it only if we don't know what the parent is, as all other
          // cases are invalid.
          return parentTag == null;
      }
  
      return true;
    };
  
    /**
     * Returns whether
     */
    var findInvalidAncestorForTag = function (tag, ancestorInfo) {
      switch (tag) {
        case 'address':
        case 'article':
        case 'aside':
        case 'blockquote':
        case 'center':
        case 'details':
        case 'dialog':
        case 'dir':
        case 'div':
        case 'dl':
        case 'fieldset':
        case 'figcaption':
        case 'figure':
        case 'footer':
        case 'header':
        case 'hgroup':
        case 'main':
        case 'menu':
        case 'nav':
        case 'ol':
        case 'p':
        case 'section':
        case 'summary':
        case 'ul':
  
        case 'pre':
        case 'listing':
  
        case 'table':
  
        case 'hr':
  
        case 'xmp':
  
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return ancestorInfo.pTagInButtonScope;
  
        case 'form':
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
  
        case 'li':
          return ancestorInfo.listItemTagAutoclosing;
  
        case 'dd':
        case 'dt':
          return ancestorInfo.dlItemTagAutoclosing;
  
        case 'button':
          return ancestorInfo.buttonTagInScope;
  
        case 'a':
          // Spec says something about storing a list of markers, but it sounds
          // equivalent to this check.
          return ancestorInfo.aTagInScope;
  
        case 'nobr':
          return ancestorInfo.nobrTagInScope;
      }
  
      return null;
    };
  
    /**
     * Given a ReactCompositeComponent instance, return a list of its recursive
     * owners, starting at the root and ending with the instance itself.
     */
    var findOwnerStack = function (instance) {
      if (!instance) {
        return [];
      }
  
      var stack = [];
      /*eslint-disable space-after-keywords */
      do {
        /*eslint-enable space-after-keywords */
        stack.push(instance);
      } while (instance = instance._currentElement._owner);
      stack.reverse();
      return stack;
    };
  
    var didWarn = {};
  
    validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.parentTag;
      var parentTag = parentInfo && parentInfo.tag;
  
      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      var problematic = invalidParent || invalidAncestor;
  
      if (problematic) {
        var ancestorTag = problematic.tag;
        var ancestorInstance = problematic.instance;
  
        var childOwner = childInstance && childInstance._currentElement._owner;
        var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
  
        var childOwners = findOwnerStack(childOwner);
        var ancestorOwners = findOwnerStack(ancestorOwner);
  
        var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
        var i;
  
        var deepestCommon = -1;
        for (i = 0; i < minStackLen; i++) {
          if (childOwners[i] === ancestorOwners[i]) {
            deepestCommon = i;
          } else {
            break;
          }
        }
  
        var UNKNOWN = '(unknown)';
        var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
          return inst.getName() || UNKNOWN;
        });
        var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
          return inst.getName() || UNKNOWN;
        });
        var ownerInfo = [].concat(
        // If the parent and child instances have a common owner ancestor, start
        // with that -- otherwise we just start with the parent's owners.
        deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
        // If we're warning about an invalid (non-parent) ancestry, add '...'
        invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
  
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
        if (didWarn[warnKey]) {
          return;
        }
        didWarn[warnKey] = true;
  
        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }
          'development' !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
        } else {
          'development' !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
        }
      }
    };
  
    validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
  
    validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
  
    // For testing
    validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.parentTag;
      var parentTag = parentInfo && parentInfo.tag;
      return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
    };
  }
  
  module.exports = validateDOMNesting;

});

;/*!/node_modules/react/lib/ReactMount.js*/
define('common:node_modules/react/lib/ReactMount', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMount
   */
  
  'use strict';
  
  var DOMProperty = require('common:node_modules/react/lib/DOMProperty');
  var ReactBrowserEventEmitter = require('common:node_modules/react/lib/ReactBrowserEventEmitter');
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  var ReactDOMFeatureFlags = require('common:node_modules/react/lib/ReactDOMFeatureFlags');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactEmptyComponentRegistry = require('common:node_modules/react/lib/ReactEmptyComponentRegistry');
  var ReactInstanceHandles = require('common:node_modules/react/lib/ReactInstanceHandles');
  var ReactInstanceMap = require('common:node_modules/react/lib/ReactInstanceMap');
  var ReactMarkupChecksum = require('common:node_modules/react/lib/ReactMarkupChecksum');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  var ReactReconciler = require('common:node_modules/react/lib/ReactReconciler');
  var ReactUpdateQueue = require('common:node_modules/react/lib/ReactUpdateQueue');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var emptyObject = require('common:node_modules/fbjs/lib/emptyObject');
  var containsNode = require('common:node_modules/fbjs/lib/containsNode');
  var instantiateReactComponent = require('common:node_modules/react/lib/instantiateReactComponent');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var setInnerHTML = require('common:node_modules/react/lib/setInnerHTML');
  var shouldUpdateReactComponent = require('common:node_modules/react/lib/shouldUpdateReactComponent');
  var validateDOMNesting = require('common:node_modules/react/lib/validateDOMNesting');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
  var nodeCache = {};
  
  var ELEMENT_NODE_TYPE = 1;
  var DOC_NODE_TYPE = 9;
  var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
  
  var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
  
  /** Mapping from reactRootID to React component instance. */
  var instancesByReactRootID = {};
  
  /** Mapping from reactRootID to `container` nodes. */
  var containersByReactRootID = {};
  
  if ('development' !== 'production') {
    /** __DEV__-only mapping from reactRootID to root elements. */
    var rootElementsByReactRootID = {};
  }
  
  // Used to store breadth-first search state in findComponentRoot.
  var findComponentRootReusableArray = [];
  
  /**
   * Finds the index of the first character
   * that's not common between the two given strings.
   *
   * @return {number} the index of the character where the strings diverge
   */
  function firstDifferenceIndex(string1, string2) {
    var minLen = Math.min(string1.length, string2.length);
    for (var i = 0; i < minLen; i++) {
      if (string1.charAt(i) !== string2.charAt(i)) {
        return i;
      }
    }
    return string1.length === string2.length ? -1 : minLen;
  }
  
  /**
   * @param {DOMElement|DOMDocument} container DOM element that may contain
   * a React component
   * @return {?*} DOM element that may have the reactRoot ID, or null.
   */
  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }
  
    if (container.nodeType === DOC_NODE_TYPE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }
  
  /**
   * @param {DOMElement} container DOM element that may contain a React component.
   * @return {?string} A "reactRoot" ID, if a React component is rendered.
   */
  function getReactRootID(container) {
    var rootElement = getReactRootElementInContainer(container);
    return rootElement && ReactMount.getID(rootElement);
  }
  
  /**
   * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
   * element can return its control whose name or ID equals ATTR_NAME. All
   * DOM nodes support `getAttributeNode` but this can also get called on
   * other objects so just return '' if we're given something other than a
   * DOM node (such as window).
   *
   * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
   * @return {string} ID of the supplied `domNode`.
   */
  function getID(node) {
    var id = internalGetID(node);
    if (id) {
      if (nodeCache.hasOwnProperty(id)) {
        var cached = nodeCache[id];
        if (cached !== node) {
          !!isValid(cached, id) ? 'development' !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
  
          nodeCache[id] = node;
        }
      } else {
        nodeCache[id] = node;
      }
    }
  
    return id;
  }
  
  function internalGetID(node) {
    // If node is something like a window, document, or text node, none of
    // which support attributes or a .getAttribute method, gracefully return
    // the empty string, as if the attribute were missing.
    return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
  }
  
  /**
   * Sets the React-specific ID of the given node.
   *
   * @param {DOMElement} node The DOM node whose ID will be set.
   * @param {string} id The value of the ID attribute.
   */
  function setID(node, id) {
    var oldID = internalGetID(node);
    if (oldID !== id) {
      delete nodeCache[oldID];
    }
    node.setAttribute(ATTR_NAME, id);
    nodeCache[id] = node;
  }
  
  /**
   * Finds the node with the supplied React-generated DOM ID.
   *
   * @param {string} id A React-generated DOM ID.
   * @return {DOMElement} DOM node with the suppled `id`.
   * @internal
   */
  function getNode(id) {
    if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
      nodeCache[id] = ReactMount.findReactNodeByID(id);
    }
    return nodeCache[id];
  }
  
  /**
   * Finds the node with the supplied public React instance.
   *
   * @param {*} instance A public React instance.
   * @return {?DOMElement} DOM node with the suppled `id`.
   * @internal
   */
  function getNodeFromInstance(instance) {
    var id = ReactInstanceMap.get(instance)._rootNodeID;
    if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
      return null;
    }
    if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
      nodeCache[id] = ReactMount.findReactNodeByID(id);
    }
    return nodeCache[id];
  }
  
  /**
   * A node is "valid" if it is contained by a currently mounted container.
   *
   * This means that the node does not have to be contained by a document in
   * order to be considered valid.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @param {string} id The expected ID of the node.
   * @return {boolean} Whether the node is contained by a mounted container.
   */
  function isValid(node, id) {
    if (node) {
      !(internalGetID(node) === id) ? 'development' !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
  
      var container = ReactMount.findReactContainerForID(id);
      if (container && containsNode(container, node)) {
        return true;
      }
    }
  
    return false;
  }
  
  /**
   * Causes the cache to forget about one React-specific ID.
   *
   * @param {string} id The ID to forget.
   */
  function purgeID(id) {
    delete nodeCache[id];
  }
  
  var deepestNodeSoFar = null;
  function findDeepestCachedAncestorImpl(ancestorID) {
    var ancestor = nodeCache[ancestorID];
    if (ancestor && isValid(ancestor, ancestorID)) {
      deepestNodeSoFar = ancestor;
    } else {
      // This node isn't populated in the cache, so presumably none of its
      // descendants are. Break out of the loop.
      return false;
    }
  }
  
  /**
   * Return the deepest cached node whose ID is a prefix of `targetID`.
   */
  function findDeepestCachedAncestor(targetID) {
    deepestNodeSoFar = null;
    ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
  
    var foundNode = deepestNodeSoFar;
    deepestNodeSoFar = null;
    return foundNode;
  }
  
  /**
   * Mounts this component and inserts it into the DOM.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {string} rootID DOM ID of the root node.
   * @param {DOMElement} container DOM element to mount into.
   * @param {ReactReconcileTransaction} transaction
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
    if (ReactDOMFeatureFlags.useCreateElement) {
      context = assign({}, context);
      if (container.nodeType === DOC_NODE_TYPE) {
        context[ownerDocumentContextKey] = container;
      } else {
        context[ownerDocumentContextKey] = container.ownerDocument;
      }
    }
    if ('development' !== 'production') {
      if (context === emptyObject) {
        context = {};
      }
      var tag = container.nodeName.toLowerCase();
      context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
    }
    var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
    componentInstance._renderedComponent._topLevelWrapper = componentInstance;
    ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
  }
  
  /**
   * Batched mount.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {string} rootID DOM ID of the root node.
   * @param {DOMElement} container DOM element to mount into.
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
    /* forceHTML */shouldReuseMarkup);
    transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
    ReactUpdates.ReactReconcileTransaction.release(transaction);
  }
  
  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  function unmountComponentFromNode(instance, container) {
    ReactReconciler.unmountComponent(instance);
  
    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }
  
    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  }
  
  /**
   * True if the supplied DOM node has a direct React-rendered child that is
   * not a React root element. Useful for warning in `render`,
   * `unmountComponentAtNode`, etc.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @return {boolean} True if the DOM element contains a direct child that was
   * rendered by React but is not a root element.
   * @internal
   */
  function hasNonRootReactChild(node) {
    var reactRootID = getReactRootID(node);
    return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
  }
  
  /**
   * Returns the first (deepest) ancestor of a node which is rendered by this copy
   * of React.
   */
  function findFirstReactDOMImpl(node) {
    // This node might be from another React instance, so we make sure not to
    // examine the node cache here
    for (; node && node.parentNode !== node; node = node.parentNode) {
      if (node.nodeType !== 1) {
        // Not a DOMElement, therefore not a React component
        continue;
      }
      var nodeID = internalGetID(node);
      if (!nodeID) {
        continue;
      }
      var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  
      // If containersByReactRootID contains the container we find by crawling up
      // the tree, we know that this instance of React rendered the node.
      // nb. isValid's strategy (with containsNode) does not work because render
      // trees may be nested and we don't want a false positive in that case.
      var current = node;
      var lastID;
      do {
        lastID = internalGetID(current);
        current = current.parentNode;
        if (current == null) {
          // The passed-in node has been detached from the container it was
          // originally rendered into.
          return null;
        }
      } while (lastID !== reactRootID);
  
      if (current === containersByReactRootID[reactRootID]) {
        return node;
      }
    }
    return null;
  }
  
  /**
   * Temporary (?) hack so that we can store all top-level pending updates on
   * composites instead of having to worry about different types of components
   * here.
   */
  var TopLevelWrapper = function () {};
  TopLevelWrapper.prototype.isReactComponent = {};
  if ('development' !== 'production') {
    TopLevelWrapper.displayName = 'TopLevelWrapper';
  }
  TopLevelWrapper.prototype.render = function () {
    // this.props is actually a ReactElement
    return this.props;
  };
  
  /**
   * Mounting is the process of initializing a React component by creating its
   * representative DOM elements and inserting them into a supplied `container`.
   * Any prior content inside `container` is destroyed in the process.
   *
   *   ReactMount.render(
   *     component,
   *     document.getElementById('container')
   *   );
   *
   *   <div id="container">                   <-- Supplied `container`.
   *     <div data-reactid=".3">              <-- Rendered reactRoot of React
   *       // ...                                 component.
   *     </div>
   *   </div>
   *
   * Inside of `container`, the first element rendered is the "reactRoot".
   */
  var ReactMount = {
  
    TopLevelWrapper: TopLevelWrapper,
  
    /** Exposed for debugging purposes **/
    _instancesByReactRootID: instancesByReactRootID,
  
    /**
     * This is a hook provided to support rendering React components while
     * ensuring that the apparent scroll position of its `container` does not
     * change.
     *
     * @param {DOMElement} container The `container` being rendered into.
     * @param {function} renderCallback This must be called once to do the render.
     */
    scrollMonitor: function (container, renderCallback) {
      renderCallback();
    },
  
    /**
     * Take a component that's already mounted into the DOM and replace its props
     * @param {ReactComponent} prevComponent component instance already in the DOM
     * @param {ReactElement} nextElement component instance to render
     * @param {DOMElement} container container to render into
     * @param {?function} callback function triggered on completion
     */
    _updateRootComponent: function (prevComponent, nextElement, container, callback) {
      ReactMount.scrollMonitor(container, function () {
        ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
        }
      });
  
      if ('development' !== 'production') {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
      }
  
      return prevComponent;
    },
  
    /**
     * Register a component into the instance map and starts scroll value
     * monitoring
     * @param {ReactComponent} nextComponent component instance to render
     * @param {DOMElement} container container to render into
     * @return {string} reactRoot ID prefix
     */
    _registerComponent: function (nextComponent, container) {
      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? 'development' !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
  
      ReactBrowserEventEmitter.ensureScrollValueMonitoring();
  
      var reactRootID = ReactMount.registerContainer(container);
      instancesByReactRootID[reactRootID] = nextComponent;
      return reactRootID;
    },
  
    /**
     * Render a new component into the DOM.
     * @param {ReactElement} nextElement element to render
     * @param {DOMElement} container container to render into
     * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
     * @return {ReactComponent} nextComponent
     */
    _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      'development' !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
  
      var componentInstance = instantiateReactComponent(nextElement, null);
      var reactRootID = ReactMount._registerComponent(componentInstance, container);
  
      // The initial render is synchronous but any updates that happen during
      // rendering, in componentWillMount or componentDidMount, will be batched
      // according to the current batching strategy.
  
      ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
  
      if ('development' !== 'production') {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
      }
  
      return componentInstance;
    },
  
    /**
     * Renders a React component into the DOM in the supplied `container`.
     *
     * If the React component was previously rendered into `container`, this will
     * perform an update on it and only mutate the DOM as necessary to reflect the
     * latest React component.
     *
     * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
     * @param {ReactElement} nextElement Component element to render.
     * @param {DOMElement} container DOM element to render into.
     * @param {?function} callback function triggered on completion
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
      !(parentComponent != null && parentComponent._reactInternalInstance != null) ? 'development' !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
      return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
    },
  
    _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
      !ReactElement.isValidElement(nextElement) ? 'development' !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
      // Check if it quacks like an element
      nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
  
      'development' !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
  
      var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
  
      var prevComponent = instancesByReactRootID[getReactRootID(container)];
  
      if (prevComponent) {
        var prevWrappedElement = prevComponent._currentElement;
        var prevElement = prevWrappedElement.props;
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          var publicInst = prevComponent._renderedComponent.getPublicInstance();
          var updatedCallback = callback && function () {
            callback.call(publicInst);
          };
          ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
          return publicInst;
        } else {
          ReactMount.unmountComponentAtNode(container);
        }
      }
  
      var reactRootElement = getReactRootElementInContainer(container);
      var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
      var containerHasNonRootReactChild = hasNonRootReactChild(container);
  
      if ('development' !== 'production') {
        'development' !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
  
        if (!containerHasReactMarkup || reactRootElement.nextSibling) {
          var rootElementSibling = reactRootElement;
          while (rootElementSibling) {
            if (internalGetID(rootElementSibling)) {
              'development' !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
              break;
            }
            rootElementSibling = rootElementSibling.nextSibling;
          }
        }
      }
  
      var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
      var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
      if (callback) {
        callback.call(component);
      }
      return component;
    },
  
    /**
     * Renders a React component into the DOM in the supplied `container`.
     *
     * If the React component was previously rendered into `container`, this will
     * perform an update on it and only mutate the DOM as necessary to reflect the
     * latest React component.
     *
     * @param {ReactElement} nextElement Component element to render.
     * @param {DOMElement} container DOM element to render into.
     * @param {?function} callback function triggered on completion
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    render: function (nextElement, container, callback) {
      return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
    },
  
    /**
     * Registers a container node into which React components will be rendered.
     * This also creates the "reactRoot" ID that will be assigned to the element
     * rendered within.
     *
     * @param {DOMElement} container DOM element to register as a container.
     * @return {string} The "reactRoot" ID of elements rendered within.
     */
    registerContainer: function (container) {
      var reactRootID = getReactRootID(container);
      if (reactRootID) {
        // If one exists, make sure it is a valid "reactRoot" ID.
        reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
      }
      if (!reactRootID) {
        // No valid "reactRoot" ID found, create one.
        reactRootID = ReactInstanceHandles.createReactRootID();
      }
      containersByReactRootID[reactRootID] = container;
      return reactRootID;
    },
  
    /**
     * Unmounts and destroys the React component rendered in the `container`.
     *
     * @param {DOMElement} container DOM element containing a React component.
     * @return {boolean} True if a component was found in and unmounted from
     *                   `container`
     */
    unmountComponentAtNode: function (container) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case. (Strictly speaking, unmounting won't cause a
      // render but we still don't expect to be in a render call here.)
      'development' !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
  
      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? 'development' !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
  
      var reactRootID = getReactRootID(container);
      var component = instancesByReactRootID[reactRootID];
      if (!component) {
        // Check if the node being unmounted was rendered by React, but isn't a
        // root node.
        var containerHasNonRootReactChild = hasNonRootReactChild(container);
  
        // Check if the container itself is a React root node.
        var containerID = internalGetID(container);
        var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
  
        if ('development' !== 'production') {
          'development' !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
        }
  
        return false;
      }
      ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
      delete instancesByReactRootID[reactRootID];
      delete containersByReactRootID[reactRootID];
      if ('development' !== 'production') {
        delete rootElementsByReactRootID[reactRootID];
      }
      return true;
    },
  
    /**
     * Finds the container DOM element that contains React component to which the
     * supplied DOM `id` belongs.
     *
     * @param {string} id The ID of an element rendered by a React component.
     * @return {?DOMElement} DOM element that contains the `id`.
     */
    findReactContainerForID: function (id) {
      var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
      var container = containersByReactRootID[reactRootID];
  
      if ('development' !== 'production') {
        var rootElement = rootElementsByReactRootID[reactRootID];
        if (rootElement && rootElement.parentNode !== container) {
          'development' !== 'production' ? warning(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
          var containerChild = container.firstChild;
          if (containerChild && reactRootID === internalGetID(containerChild)) {
            // If the container has a new child with the same ID as the old
            // root element, then rootElementsByReactRootID[reactRootID] is
            // just stale and needs to be updated. The case that deserves a
            // warning is when the container is empty.
            rootElementsByReactRootID[reactRootID] = containerChild;
          } else {
            'development' !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
          }
        }
      }
  
      return container;
    },
  
    /**
     * Finds an element rendered by React with the supplied ID.
     *
     * @param {string} id ID of a DOM node in the React component.
     * @return {DOMElement} Root DOM node of the React component.
     */
    findReactNodeByID: function (id) {
      var reactRoot = ReactMount.findReactContainerForID(id);
      return ReactMount.findComponentRoot(reactRoot, id);
    },
  
    /**
     * Traverses up the ancestors of the supplied node to find a node that is a
     * DOM representation of a React component rendered by this copy of React.
     *
     * @param {*} node
     * @return {?DOMEventTarget}
     * @internal
     */
    getFirstReactDOM: function (node) {
      return findFirstReactDOMImpl(node);
    },
  
    /**
     * Finds a node with the supplied `targetID` inside of the supplied
     * `ancestorNode`.  Exploits the ID naming scheme to perform the search
     * quickly.
     *
     * @param {DOMEventTarget} ancestorNode Search from this root.
     * @pararm {string} targetID ID of the DOM representation of the component.
     * @return {DOMEventTarget} DOM node with the supplied `targetID`.
     * @internal
     */
    findComponentRoot: function (ancestorNode, targetID) {
      var firstChildren = findComponentRootReusableArray;
      var childIndex = 0;
  
      var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
  
      if ('development' !== 'production') {
        // This will throw on the next line; give an early warning
        'development' !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
      }
  
      firstChildren[0] = deepestAncestor.firstChild;
      firstChildren.length = 1;
  
      while (childIndex < firstChildren.length) {
        var child = firstChildren[childIndex++];
        var targetChild;
  
        while (child) {
          var childID = ReactMount.getID(child);
          if (childID) {
            // Even if we find the node we're looking for, we finish looping
            // through its siblings to ensure they're cached so that we don't have
            // to revisit this node again. Otherwise, we make n^2 calls to getID
            // when visiting the many children of a single node in order.
  
            if (targetID === childID) {
              targetChild = child;
            } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
              // If we find a child whose ID is an ancestor of the given ID,
              // then we can be sure that we only want to search the subtree
              // rooted at this child, so we can throw out the rest of the
              // search state.
              firstChildren.length = childIndex = 0;
              firstChildren.push(child.firstChild);
            }
          } else {
            // If this child had no ID, then there's a chance that it was
            // injected automatically by the browser, as when a `<table>`
            // element sprouts an extra `<tbody>` child as a side effect of
            // `.innerHTML` parsing. Optimistically continue down this
            // branch, but not before examining the other siblings.
            firstChildren.push(child.firstChild);
          }
  
          child = child.nextSibling;
        }
  
        if (targetChild) {
          // Emptying firstChildren/findComponentRootReusableArray is
          // not necessary for correctness, but it helps the GC reclaim
          // any nodes that were left at the end of the search.
          firstChildren.length = 0;
  
          return targetChild;
        }
      }
  
      firstChildren.length = 0;
  
      !false ? 'development' !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
    },
  
    _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? 'development' !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
  
      if (shouldReuseMarkup) {
        var rootElement = getReactRootElementInContainer(container);
        if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
          return;
        } else {
          var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
          rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
  
          var rootMarkup = rootElement.outerHTML;
          rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
  
          var normalizedMarkup = markup;
          if ('development' !== 'production') {
            // because rootMarkup is retrieved from the DOM, various normalizations
            // will have occurred which will not be present in `markup`. Here,
            // insert markup into a <div> or <iframe> depending on the container
            // type to perform the same normalizations before comparing.
            var normalizer;
            if (container.nodeType === ELEMENT_NODE_TYPE) {
              normalizer = document.createElement('div');
              normalizer.innerHTML = markup;
              normalizedMarkup = normalizer.innerHTML;
            } else {
              normalizer = document.createElement('iframe');
              document.body.appendChild(normalizer);
              normalizer.contentDocument.write(markup);
              normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
              document.body.removeChild(normalizer);
            }
          }
  
          var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
          var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
  
          !(container.nodeType !== DOC_NODE_TYPE) ? 'development' !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
  
          if ('development' !== 'production') {
            'development' !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
          }
        }
      }
  
      !(container.nodeType !== DOC_NODE_TYPE) ? 'development' !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
  
      if (transaction.useCreateElement) {
        while (container.lastChild) {
          container.removeChild(container.lastChild);
        }
        container.appendChild(markup);
      } else {
        setInnerHTML(container, markup);
      }
    },
  
    ownerDocumentContextKey: ownerDocumentContextKey,
  
    /**
     * React ID utilities.
     */
  
    getReactRootID: getReactRootID,
  
    getID: getID,
  
    setID: setID,
  
    getNode: getNode,
  
    getNodeFromInstance: getNodeFromInstance,
  
    isValid: isValid,
  
    purgeID: purgeID
  };
  
  ReactPerf.measureMethods(ReactMount, 'ReactMount', {
    _renderNewRootComponent: '_renderNewRootComponent',
    _mountImageIntoNode: '_mountImageIntoNode'
  });
  
  module.exports = ReactMount;

});

;/*!/node_modules/react/lib/ReactDOMIDOperations.js*/
define('common:node_modules/react/lib/ReactDOMIDOperations', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMIDOperations
   * @typechecks static-only
   */
  
  'use strict';
  
  var DOMChildrenOperations = require('common:node_modules/react/lib/DOMChildrenOperations');
  var DOMPropertyOperations = require('common:node_modules/react/lib/DOMPropertyOperations');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Errors for properties that should not be updated with `updatePropertyByID()`.
   *
   * @type {object}
   * @private
   */
  var INVALID_PROPERTY_ERRORS = {
    dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
    style: '`style` must be set using `updateStylesByID()`.'
  };
  
  /**
   * Operations used to process updates to DOM nodes.
   */
  var ReactDOMIDOperations = {
  
    /**
     * Updates a DOM node with new property values. This should only be used to
     * update DOM properties in `DOMProperty`.
     *
     * @param {string} id ID of the node to update.
     * @param {string} name A valid property name, see `DOMProperty`.
     * @param {*} value New value of the property.
     * @internal
     */
    updatePropertyByID: function (id, name, value) {
      var node = ReactMount.getNode(id);
      !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? 'development' !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
  
      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    },
  
    /**
     * Replaces a DOM node that exists in the document with markup.
     *
     * @param {string} id ID of child to be replaced.
     * @param {string} markup Dangerous markup to inject in place of child.
     * @internal
     * @see {Danger.dangerouslyReplaceNodeWithMarkup}
     */
    dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    },
  
    /**
     * Updates a component's children by processing a series of updates.
     *
     * @param {array<object>} updates List of update configurations.
     * @param {array<string>} markup List of markup strings.
     * @internal
     */
    dangerouslyProcessChildrenUpdates: function (updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  };
  
  ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
    dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
    dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
  });
  
  module.exports = ReactDOMIDOperations;

});

;/*!/node_modules/react/lib/ReactComponentBrowserEnvironment.js*/
define('common:node_modules/react/lib/ReactComponentBrowserEnvironment', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponentBrowserEnvironment
   */
  
  'use strict';
  
  var ReactDOMIDOperations = require('common:node_modules/react/lib/ReactDOMIDOperations');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  
  /**
   * Abstracts away all functionality of the reconciler that requires knowledge of
   * the browser context. TODO: These callers should be refactored to avoid the
   * need for this injection.
   */
  var ReactComponentBrowserEnvironment = {
  
    processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
  
    replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
  
    /**
     * If a particular environment requires that some resources be cleaned up,
     * specify this in the injected Mixin. In the DOM, we would likely want to
     * purge any cached node ID lookups.
     *
     * @private
     */
    unmountIDFromEnvironment: function (rootNodeID) {
      ReactMount.purgeID(rootNodeID);
    }
  
  };
  
  module.exports = ReactComponentBrowserEnvironment;

});

;/*!/node_modules/react/lib/ReactDOMTextComponent.js*/
define('common:node_modules/react/lib/ReactDOMTextComponent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMTextComponent
   * @typechecks static-only
   */
  
  'use strict';
  
  var DOMChildrenOperations = require('common:node_modules/react/lib/DOMChildrenOperations');
  var DOMPropertyOperations = require('common:node_modules/react/lib/DOMPropertyOperations');
  var ReactComponentBrowserEnvironment = require('common:node_modules/react/lib/ReactComponentBrowserEnvironment');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var escapeTextContentForBrowser = require('common:node_modules/react/lib/escapeTextContentForBrowser');
  var setTextContent = require('common:node_modules/react/lib/setTextContent');
  var validateDOMNesting = require('common:node_modules/react/lib/validateDOMNesting');
  
  /**
   * Text nodes violate a couple assumptions that React makes about components:
   *
   *  - When mounting text into the DOM, adjacent text nodes are merged.
   *  - Text nodes cannot be assigned a React root ID.
   *
   * This component is used to wrap strings in elements so that they can undergo
   * the same reconciliation that is applied to elements.
   *
   * TODO: Investigate representing React components in the DOM with text nodes.
   *
   * @class ReactDOMTextComponent
   * @extends ReactComponent
   * @internal
   */
  var ReactDOMTextComponent = function (props) {
    // This constructor and its argument is currently used by mocks.
  };
  
  assign(ReactDOMTextComponent.prototype, {
  
    /**
     * @param {ReactText} text
     * @internal
     */
    construct: function (text) {
      // TODO: This is really a ReactText (ReactNode), not a ReactElement
      this._currentElement = text;
      this._stringText = '' + text;
  
      // Properties
      this._rootNodeID = null;
      this._mountIndex = 0;
    },
  
    /**
     * Creates the markup for this text node. This node is not intended to have
     * any features besides containing text content.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {string} Markup for this text node.
     * @internal
     */
    mountComponent: function (rootID, transaction, context) {
      if ('development' !== 'production') {
        if (context[validateDOMNesting.ancestorInfoContextKey]) {
          validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
        }
      }
  
      this._rootNodeID = rootID;
      if (transaction.useCreateElement) {
        var ownerDocument = context[ReactMount.ownerDocumentContextKey];
        var el = ownerDocument.createElement('span');
        DOMPropertyOperations.setAttributeForID(el, rootID);
        // Populate node cache
        ReactMount.getID(el);
        setTextContent(el, this._stringText);
        return el;
      } else {
        var escapedText = escapeTextContentForBrowser(this._stringText);
  
        if (transaction.renderToStaticMarkup) {
          // Normally we'd wrap this in a `span` for the reasons stated above, but
          // since this is a situation where React won't take over (static pages),
          // we can simply return the text as it is.
          return escapedText;
        }
  
        return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
      }
    },
  
    /**
     * Updates this component by updating the text content.
     *
     * @param {ReactText} nextText The next text content
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function (nextText, transaction) {
      if (nextText !== this._currentElement) {
        this._currentElement = nextText;
        var nextStringText = '' + nextText;
        if (nextStringText !== this._stringText) {
          // TODO: Save this as pending props and use performUpdateIfNecessary
          // and/or updateComponent to do the actual update for consistency with
          // other component types?
          this._stringText = nextStringText;
          var node = ReactMount.getNode(this._rootNodeID);
          DOMChildrenOperations.updateTextContent(node, nextStringText);
        }
      }
    },
  
    unmountComponent: function () {
      ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    }
  
  });
  
  module.exports = ReactDOMTextComponent;

});

;/*!/node_modules/react/lib/EventPropagators.js*/
define('common:node_modules/react/lib/EventPropagators', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPropagators
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var EventPluginHub = require('common:node_modules/react/lib/EventPluginHub');
  
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var accumulateInto = require('common:node_modules/react/lib/accumulateInto');
  var forEachAccumulated = require('common:node_modules/react/lib/forEachAccumulated');
  
  var PropagationPhases = EventConstants.PropagationPhases;
  var getListener = EventPluginHub.getListener;
  
  /**
   * Some event types have a notion of different registration names for different
   * "phases" of propagation. This finds listeners by a given phase.
   */
  function listenerAtPhase(id, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(id, registrationName);
  }
  
  /**
   * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
   * here, allows us to not have to bind or create functions for each event.
   * Mutating the event's members allows us to not have to create a wrapping
   * "dispatch" object that pairs the event with the listener.
   */
  function accumulateDirectionalDispatches(domID, upwards, event) {
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
    }
    var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
    var listener = listenerAtPhase(domID, event, phase);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
    }
  }
  
  /**
   * Collect dispatches (must be entirely collected before dispatching - see unit
   * tests). Lazily allocate the array to conserve memory.  We must loop through
   * each event and perform the traversal for each one. We cannot perform a
   * single traversal for the entire collection of events because each event may
   * have a different target.
   */
  function accumulateTwoPhaseDispatchesSingle(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
    }
  }
  
  /**
   * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
   */
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
    }
  }
  
  /**
   * Accumulates without regard to direction, does not look for phased
   * registration names. Same as `accumulateDirectDispatchesSingle` but without
   * requiring that the `dispatchMarker` be the same as the dispatched ID.
   */
  function accumulateDispatches(id, ignoredDirection, event) {
    if (event && event.dispatchConfig.registrationName) {
      var registrationName = event.dispatchConfig.registrationName;
      var listener = getListener(id, registrationName);
      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
      }
    }
  }
  
  /**
   * Accumulates dispatches on an `SyntheticEvent`, but only for the
   * `dispatchMarker`.
   * @param {SyntheticEvent} event
   */
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      accumulateDispatches(event.dispatchMarker, null, event);
    }
  }
  
  function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
  }
  
  function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
  }
  
  function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
    EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
  }
  
  function accumulateDirectDispatches(events) {
    forEachAccumulated(events, accumulateDirectDispatchesSingle);
  }
  
  /**
   * A small set of propagation patterns, each of which will accept a small amount
   * of information, and generate a set of "dispatch ready event objects" - which
   * are sets of events that have already been annotated with a set of dispatched
   * listener functions/ids. The API is designed this way to discourage these
   * propagation strategies from actually executing the dispatches, since we
   * always want to collect the entire set of dispatches before executing event a
   * single one.
   *
   * @constructor EventPropagators
   */
  var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
  };
  
  module.exports = EventPropagators;

});

;/*!/node_modules/react/lib/getTextContentAccessor.js*/
define('common:node_modules/react/lib/getTextContentAccessor', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getTextContentAccessor
   */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var contentKey = null;
  
  /**
   * Gets the key used to access text content on a DOM node.
   *
   * @return {?string} Key used to access text content.
   * @internal
   */
  function getTextContentAccessor() {
    if (!contentKey && ExecutionEnvironment.canUseDOM) {
      // Prefer textContent to innerText because many browsers support both but
      // SVG <text> elements don't support innerText even when <div> does.
      contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
    }
    return contentKey;
  }
  
  module.exports = getTextContentAccessor;

});

;/*!/node_modules/react/lib/FallbackCompositionState.js*/
define('common:node_modules/react/lib/FallbackCompositionState', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule FallbackCompositionState
   * @typechecks static-only
   */
  
  'use strict';
  
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var getTextContentAccessor = require('common:node_modules/react/lib/getTextContentAccessor');
  
  /**
   * This helper class stores information about text content of a target node,
   * allowing comparison of content before and after a given event.
   *
   * Identify the node where selection currently begins, then observe
   * both its text content and its current position in the DOM. Since the
   * browser may natively replace the target node during composition, we can
   * use its position to find its replacement.
   *
   * @param {DOMEventTarget} root
   */
  function FallbackCompositionState(root) {
    this._root = root;
    this._startText = this.getText();
    this._fallbackText = null;
  }
  
  assign(FallbackCompositionState.prototype, {
    destructor: function () {
      this._root = null;
      this._startText = null;
      this._fallbackText = null;
    },
  
    /**
     * Get current text of input.
     *
     * @return {string}
     */
    getText: function () {
      if ('value' in this._root) {
        return this._root.value;
      }
      return this._root[getTextContentAccessor()];
    },
  
    /**
     * Determine the differing substring between the initially stored
     * text content and the current content.
     *
     * @return {string}
     */
    getData: function () {
      if (this._fallbackText) {
        return this._fallbackText;
      }
  
      var start;
      var startValue = this._startText;
      var startLength = startValue.length;
      var end;
      var endValue = this.getText();
      var endLength = endValue.length;
  
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
  
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
  
      var sliceTail = end > 1 ? 1 - end : undefined;
      this._fallbackText = endValue.slice(start, sliceTail);
      return this._fallbackText;
    }
  });
  
  PooledClass.addPoolingTo(FallbackCompositionState);
  
  module.exports = FallbackCompositionState;

});

;/*!/node_modules/react/lib/SyntheticEvent.js*/
define('common:node_modules/react/lib/SyntheticEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var EventInterface = {
    type: null,
    target: null,
    // currentTarget is set when dispatching; no use in copying it here
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   *
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   */
  function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this.dispatchMarker = dispatchMarker;
    this.nativeEvent = nativeEvent;
  
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (!Interface.hasOwnProperty(propName)) {
        continue;
      }
      var normalize = Interface[propName];
      if (normalize) {
        this[propName] = normalize(nativeEvent);
      } else {
        if (propName === 'target') {
          this.target = nativeEventTarget;
        } else {
          this[propName] = nativeEvent[propName];
        }
      }
    }
  
    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
    if (defaultPrevented) {
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    } else {
      this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  }
  
  assign(SyntheticEvent.prototype, {
  
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if ('development' !== 'production') {
        'development' !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
      }
      if (!event) {
        return;
      }
  
      if (event.preventDefault) {
        event.preventDefault();
      } else {
        event.returnValue = false;
      }
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    },
  
    stopPropagation: function () {
      var event = this.nativeEvent;
      if ('development' !== 'production') {
        'development' !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
      }
      if (!event) {
        return;
      }
  
      if (event.stopPropagation) {
        event.stopPropagation();
      } else {
        event.cancelBubble = true;
      }
      this.isPropagationStopped = emptyFunction.thatReturnsTrue;
    },
  
    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
  
    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: emptyFunction.thatReturnsFalse,
  
    /**
     * `PooledClass` looks for `destructor` on each instance it releases.
     */
    destructor: function () {
      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        this[propName] = null;
      }
      this.dispatchConfig = null;
      this.dispatchMarker = null;
      this.nativeEvent = null;
    }
  
  });
  
  SyntheticEvent.Interface = EventInterface;
  
  /**
   * Helper to reduce boilerplate when creating subclasses.
   *
   * @param {function} Class
   * @param {?object} Interface
   */
  SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this;
  
    var prototype = Object.create(Super.prototype);
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
  
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.augmentClass = Super.augmentClass;
  
    PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
  };
  
  PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
  
  module.exports = SyntheticEvent;

});

;/*!/node_modules/react/lib/SyntheticCompositionEvent.js*/
define('common:node_modules/react/lib/SyntheticCompositionEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticCompositionEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticEvent = require('common:node_modules/react/lib/SyntheticEvent');
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
   */
  var CompositionEventInterface = {
    data: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
  
  module.exports = SyntheticCompositionEvent;

});

;/*!/node_modules/react/lib/SyntheticInputEvent.js*/
define('common:node_modules/react/lib/SyntheticInputEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticInputEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticEvent = require('common:node_modules/react/lib/SyntheticEvent');
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
   *      /#events-inputevents
   */
  var InputEventInterface = {
    data: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
  
  module.exports = SyntheticInputEvent;

});

;/*!/node_modules/fbjs/lib/keyOf.js*/
define('common:node_modules/fbjs/lib/keyOf', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule keyOf
   */
  
  /**
   * Allows extraction of a minified key. Let's the build system minify keys
   * without losing the ability to dynamically use key strings as values
   * themselves. Pass in an object with a single key/val pair and it will return
   * you the string key of that single record. Suppose you want to grab the
   * value for a key 'className' inside of an object. Key/val minification may
   * have aliased that key to be 'xa12'. keyOf({className: null}) will return
   * 'xa12' in that case. Resolve keys you want to use once at startup time, then
   * reuse those resolutions.
   */
  "use strict";
  
  var keyOf = function (oneKeyObj) {
    var key;
    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }
      return key;
    }
    return null;
  };
  
  module.exports = keyOf;

});

;/*!/node_modules/react/lib/BeforeInputEventPlugin.js*/
define('common:node_modules/react/lib/BeforeInputEventPlugin', function(require, exports, module) {

  /**
   * Copyright 2013-2015 Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule BeforeInputEventPlugin
   * @typechecks static-only
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var EventPropagators = require('common:node_modules/react/lib/EventPropagators');
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  var FallbackCompositionState = require('common:node_modules/react/lib/FallbackCompositionState');
  var SyntheticCompositionEvent = require('common:node_modules/react/lib/SyntheticCompositionEvent');
  var SyntheticInputEvent = require('common:node_modules/react/lib/SyntheticInputEvent');
  
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  
  var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
  var START_KEYCODE = 229;
  
  var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
  
  var documentMode = null;
  if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
    documentMode = document.documentMode;
  }
  
  // Webkit offers a very useful `textInput` event that can be used to
  // directly represent `beforeInput`. The IE `textinput` event is not as
  // useful, so we don't use it.
  var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
  
  // In IE9+, we have access to composition events, but the data supplied
  // by the native compositionend event may be incorrect. Japanese ideographic
  // spaces, for instance (\u3000) are not recorded correctly.
  var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
  
  /**
   * Opera <= 12 includes TextEvent in window, but does not fire
   * text input events. Rely on keypress instead.
   */
  function isPresto() {
    var opera = window.opera;
    return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
  }
  
  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
  
  var topLevelTypes = EventConstants.topLevelTypes;
  
  // Events and their corresponding property names.
  var eventTypes = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onBeforeInput: null }),
        captured: keyOf({ onBeforeInputCapture: null })
      },
      dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCompositionEnd: null }),
        captured: keyOf({ onCompositionEndCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCompositionStart: null }),
        captured: keyOf({ onCompositionStartCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCompositionUpdate: null }),
        captured: keyOf({ onCompositionUpdateCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    }
  };
  
  // Track whether we've ever handled a keypress on the space key.
  var hasSpaceKeypress = false;
  
  /**
   * Return whether a native keypress event is assumed to be a command.
   * This is required because Firefox fires `keypress` events for key commands
   * (cut, copy, select-all, etc.) even though no character is inserted.
   */
  function isKeypressCommand(nativeEvent) {
    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey);
  }
  
  /**
   * Translate native top level events into event types.
   *
   * @param {string} topLevelType
   * @return {object}
   */
  function getCompositionEventType(topLevelType) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionStart:
        return eventTypes.compositionStart;
      case topLevelTypes.topCompositionEnd:
        return eventTypes.compositionEnd;
      case topLevelTypes.topCompositionUpdate:
        return eventTypes.compositionUpdate;
    }
  }
  
  /**
   * Does our fallback best-guess model think this event signifies that
   * composition has begun?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionStart(topLevelType, nativeEvent) {
    return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
  }
  
  /**
   * Does our fallback mode think that this event is the end of composition?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionEnd(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topKeyUp:
        // Command keys insert or clear IME input.
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
      case topLevelTypes.topKeyDown:
        // Expect IME keyCode on each keydown. If we get any other
        // code we must have exited earlier.
        return nativeEvent.keyCode !== START_KEYCODE;
      case topLevelTypes.topKeyPress:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topBlur:
        // Events are not possible without cancelling IME.
        return true;
      default:
        return false;
    }
  }
  
  /**
   * Google Input Tools provides composition data via a CustomEvent,
   * with the `data` property populated in the `detail` object. If this
   * is available on the event object, use it. If not, this is a plain
   * composition event and we have nothing special to extract.
   *
   * @param {object} nativeEvent
   * @return {?string}
   */
  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;
    if (typeof detail === 'object' && 'data' in detail) {
      return detail.data;
    }
    return null;
  }
  
  // Track the current IME composition fallback object, if any.
  var currentComposition = null;
  
  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {?object} A SyntheticCompositionEvent.
   */
  function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var eventType;
    var fallbackData;
  
    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }
  
    if (!eventType) {
      return null;
    }
  
    if (useFallbackCompositionData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          fallbackData = currentComposition.getData();
        }
      }
    }
  
    var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
  
    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);
      if (customData !== null) {
        event.data = customData;
      }
    }
  
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
  
  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The string corresponding to this `beforeInput` event.
   */
  function getNativeBeforeInputChars(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionEnd:
        return getDataFromCustomEvent(nativeEvent);
      case topLevelTypes.topKeyPress:
        /**
         * If native `textInput` events are available, our goal is to make
         * use of them. However, there is a special case: the spacebar key.
         * In Webkit, preventing default on a spacebar `textInput` event
         * cancels character insertion, but it *also* causes the browser
         * to fall back to its default spacebar behavior of scrolling the
         * page.
         *
         * Tracking at:
         * https://code.google.com/p/chromium/issues/detail?id=355103
         *
         * To avoid this issue, use the keypress event as if no `textInput`
         * event is available.
         */
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }
  
        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;
  
      case topLevelTypes.topTextInput:
        // Record the characters to be added to the DOM.
        var chars = nativeEvent.data;
  
        // If it's a spacebar character, assume that we have already handled
        // it at the keypress level and bail immediately. Android Chrome
        // doesn't give us keycodes, so we need to blacklist it.
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }
  
        return chars;
  
      default:
        // For other native event types, do nothing.
        return null;
    }
  }
  
  /**
   * For browsers that do not provide the `textInput` event, extract the
   * appropriate string to use for SyntheticInputEvent.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The fallback string for this `beforeInput` event.
   */
  function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
    // If we are currently composing (IME) and using a fallback to do so,
    // try to extract the composed characters from the fallback object.
    if (currentComposition) {
      if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        var chars = currentComposition.getData();
        FallbackCompositionState.release(currentComposition);
        currentComposition = null;
        return chars;
      }
      return null;
    }
  
    switch (topLevelType) {
      case topLevelTypes.topPaste:
        // If a paste event occurs after a keypress, throw out the input
        // chars. Paste events should not lead to BeforeInput events.
        return null;
      case topLevelTypes.topKeyPress:
        /**
         * As of v27, Firefox may fire keypress events even when no character
         * will be inserted. A few possibilities:
         *
         * - `which` is `0`. Arrow keys, Esc key, etc.
         *
         * - `which` is the pressed key code, but no char is available.
         *   Ex: 'AltGr + d` in Polish. There is no modified character for
         *   this key combination and no character is inserted into the
         *   document, but FF fires the keypress for char code `100` anyway.
         *   No `input` event will occur.
         *
         * - `which` is the pressed key code, but a command combination is
         *   being used. Ex: `Cmd+C`. No character is inserted, and no
         *   `input` event will occur.
         */
        if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
          return String.fromCharCode(nativeEvent.which);
        }
        return null;
      case topLevelTypes.topCompositionEnd:
        return useFallbackCompositionData ? null : nativeEvent.data;
      default:
        return null;
    }
  }
  
  /**
   * Extract a SyntheticInputEvent for `beforeInput`, based on either native
   * `textInput` or fallback behavior.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {?object} A SyntheticInputEvent.
   */
  function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var chars;
  
    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
    }
  
    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return null;
    }
  
    var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
  
    event.data = chars;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
  
  /**
   * Create an `onBeforeInput` event to match
   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
   *
   * This event plugin is based on the native `textInput` event
   * available in Chrome, Safari, Opera, and IE. This event fires after
   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
   *
   * `beforeInput` is spec'd but not implemented in any browsers, and
   * the `input` event does not provide any useful information about what has
   * actually been added, contrary to the spec. Thus, `textInput` is the best
   * available event to identify the characters that have actually been inserted
   * into the target node.
   *
   * This plugin is also responsible for emitting `composition` events, thus
   * allowing us to share composition fallback code for both `beforeInput` and
   * `composition` event types.
   */
  var BeforeInputEventPlugin = {
  
    eventTypes: eventTypes,
  
    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
    }
  };
  
  module.exports = BeforeInputEventPlugin;

});

;/*!/node_modules/react/lib/getEventTarget.js*/
define('common:node_modules/react/lib/getEventTarget', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventTarget
   * @typechecks static-only
   */
  
  'use strict';
  
  /**
   * Gets the target node from a native browser event by accounting for
   * inconsistencies in browser DOM APIs.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {DOMEventTarget} Target node.
   */
  function getEventTarget(nativeEvent) {
    var target = nativeEvent.target || nativeEvent.srcElement || window;
    // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
    // @see http://www.quirksmode.org/js/events_properties.html
    return target.nodeType === 3 ? target.parentNode : target;
  }
  
  module.exports = getEventTarget;

});

;/*!/node_modules/react/lib/isTextInputElement.js*/
define('common:node_modules/react/lib/isTextInputElement', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isTextInputElement
   */
  
  'use strict';
  
  /**
   * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
   */
  var supportedInputTypes = {
    'color': true,
    'date': true,
    'datetime': true,
    'datetime-local': true,
    'email': true,
    'month': true,
    'number': true,
    'password': true,
    'range': true,
    'search': true,
    'tel': true,
    'text': true,
    'time': true,
    'url': true,
    'week': true
  };
  
  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
  }
  
  module.exports = isTextInputElement;

});

;/*!/node_modules/react/lib/ChangeEventPlugin.js*/
define('common:node_modules/react/lib/ChangeEventPlugin', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ChangeEventPlugin
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var EventPluginHub = require('common:node_modules/react/lib/EventPluginHub');
  var EventPropagators = require('common:node_modules/react/lib/EventPropagators');
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  var SyntheticEvent = require('common:node_modules/react/lib/SyntheticEvent');
  
  var getEventTarget = require('common:node_modules/react/lib/getEventTarget');
  var isEventSupported = require('common:node_modules/react/lib/isEventSupported');
  var isTextInputElement = require('common:node_modules/react/lib/isTextInputElement');
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  
  var topLevelTypes = EventConstants.topLevelTypes;
  
  var eventTypes = {
    change: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onChange: null }),
        captured: keyOf({ onChangeCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
    }
  };
  
  /**
   * For IE shims
   */
  var activeElement = null;
  var activeElementID = null;
  var activeElementValue = null;
  var activeElementValueProp = null;
  
  /**
   * SECTION: handle `change` event
   */
  function shouldUseChangeEvent(elem) {
    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
  }
  
  var doesChangeEventBubble = false;
  if (ExecutionEnvironment.canUseDOM) {
    // See `handleChange` comment below
    doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
  }
  
  function manualDispatchChangeEvent(nativeEvent) {
    var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
    EventPropagators.accumulateTwoPhaseDispatches(event);
  
    // If change and propertychange bubbled, we'd just bind to it like all the
    // other events and have it go through ReactBrowserEventEmitter. Since it
    // doesn't, we manually listen for the events and so we have to enqueue and
    // process the abstract event manually.
    //
    // Batching is necessary here in order to ensure that all event handlers run
    // before the next rerender (including event handlers attached to ancestor
    // elements instead of directly on the input). Without this, controlled
    // components don't work properly in conjunction with event bubbling because
    // the component is rerendered and the value reverted before all the event
    // handlers can run. See https://github.com/facebook/react/issues/708.
    ReactUpdates.batchedUpdates(runEventInBatch, event);
  }
  
  function runEventInBatch(event) {
    EventPluginHub.enqueueEvents(event);
    EventPluginHub.processEventQueue(false);
  }
  
  function startWatchingForChangeEventIE8(target, targetID) {
    activeElement = target;
    activeElementID = targetID;
    activeElement.attachEvent('onchange', manualDispatchChangeEvent);
  }
  
  function stopWatchingForChangeEventIE8() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onchange', manualDispatchChangeEvent);
    activeElement = null;
    activeElementID = null;
  }
  
  function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topChange) {
      return topLevelTargetID;
    }
  }
  function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topFocus) {
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForChangeEventIE8();
      startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForChangeEventIE8();
    }
  }
  
  /**
   * SECTION: handle `input` event
   */
  var isInputEventSupported = false;
  if (ExecutionEnvironment.canUseDOM) {
    // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events
    isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
  }
  
  /**
   * (For old IE.) Replacement getter/setter for the `value` property that gets
   * set on the active element.
   */
  var newValueProp = {
    get: function () {
      return activeElementValueProp.get.call(this);
    },
    set: function (val) {
      // Cast to a string so we can do equality checks.
      activeElementValue = '' + val;
      activeElementValueProp.set.call(this, val);
    }
  };
  
  /**
   * (For old IE.) Starts tracking propertychange events on the passed-in element
   * and override the value property so that we can distinguish user events from
   * value changes in JS.
   */
  function startWatchingForValueChange(target, targetID) {
    activeElement = target;
    activeElementID = targetID;
    activeElementValue = target.value;
    activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
  
    // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
    // on DOM elements
    Object.defineProperty(activeElement, 'value', newValueProp);
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  }
  
  /**
   * (For old IE.) Removes the event listeners from the currently-tracked element,
   * if any exists.
   */
  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }
  
    // delete restores the original property definition
    delete activeElement.value;
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  
    activeElement = null;
    activeElementID = null;
    activeElementValue = null;
    activeElementValueProp = null;
  }
  
  /**
   * (For old IE.) Handles a propertychange event, sending a `change` event if
   * the value of the active element has changed.
   */
  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }
    var value = nativeEvent.srcElement.value;
    if (value === activeElementValue) {
      return;
    }
    activeElementValue = value;
  
    manualDispatchChangeEvent(nativeEvent);
  }
  
  /**
   * If a `change` event should be fired, returns the target's ID.
   */
  function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topInput) {
      // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
      // what we want so fall through here and trigger an abstract event
      return topLevelTargetID;
    }
  }
  
  // For IE8 and IE9.
  function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topFocus) {
      // In IE8, we can capture almost all .value changes by adding a
      // propertychange handler and looking for events with propertyName
      // equal to 'value'
      // In IE9, propertychange fires for most input events but is buggy and
      // doesn't fire when text is deleted, but conveniently, selectionchange
      // appears to fire in all of the remaining cases so we catch those and
      // forward the event if the value has changed
      // In either case, we don't want to call the event handler if the value
      // is changed from JS so we redefine a setter for `.value` that updates
      // our activeElementValue variable, allowing us to ignore those changes
      //
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForValueChange();
      startWatchingForValueChange(topLevelTarget, topLevelTargetID);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForValueChange();
    }
  }
  
  // For IE8 and IE9.
  function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
      // On the selectionchange event, the target is just document which isn't
      // helpful for us so just check activeElement instead.
      //
      // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
      // propertychange on the first input event after setting `value` from a
      // script and fires only keydown, keypress, keyup. Catching keyup usually
      // gets it and catching keydown lets us fire an event for the first
      // keystroke if user does a key repeat (it'll be a little delayed: right
      // before the second keystroke). Other input methods (e.g., paste) seem to
      // fire selectionchange normally.
      if (activeElement && activeElement.value !== activeElementValue) {
        activeElementValue = activeElement.value;
        return activeElementID;
      }
    }
  }
  
  /**
   * SECTION: handle `click` event
   */
  function shouldUseClickEvent(elem) {
    // Use the `click` event to detect changes to checkbox and radio inputs.
    // This approach works across all browsers, whereas `change` does not fire
    // until `blur` in IE8.
    return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
  }
  
  function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topClick) {
      return topLevelTargetID;
    }
  }
  
  /**
   * This plugin creates an `onChange` event that normalizes change events
   * across form elements. This event fires at a time when it's possible to
   * change the element's value without seeing a flicker.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - select
   */
  var ChangeEventPlugin = {
  
    eventTypes: eventTypes,
  
    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  
      var getTargetIDFunc, handleEventFunc;
      if (shouldUseChangeEvent(topLevelTarget)) {
        if (doesChangeEventBubble) {
          getTargetIDFunc = getTargetIDForChangeEvent;
        } else {
          handleEventFunc = handleEventsForChangeEventIE8;
        }
      } else if (isTextInputElement(topLevelTarget)) {
        if (isInputEventSupported) {
          getTargetIDFunc = getTargetIDForInputEvent;
        } else {
          getTargetIDFunc = getTargetIDForInputEventIE;
          handleEventFunc = handleEventsForInputEventIE;
        }
      } else if (shouldUseClickEvent(topLevelTarget)) {
        getTargetIDFunc = getTargetIDForClickEvent;
      }
  
      if (getTargetIDFunc) {
        var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
        if (targetID) {
          var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
          event.type = 'change';
          EventPropagators.accumulateTwoPhaseDispatches(event);
          return event;
        }
      }
  
      if (handleEventFunc) {
        handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
      }
    }
  
  };
  
  module.exports = ChangeEventPlugin;

});

;/*!/node_modules/react/lib/ClientReactRootIndex.js*/
define('common:node_modules/react/lib/ClientReactRootIndex', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ClientReactRootIndex
   * @typechecks
   */
  
  'use strict';
  
  var nextReactRootIndex = 0;
  
  var ClientReactRootIndex = {
    createReactRootIndex: function () {
      return nextReactRootIndex++;
    }
  };
  
  module.exports = ClientReactRootIndex;

});

;/*!/node_modules/react/lib/DefaultEventPluginOrder.js*/
define('common:node_modules/react/lib/DefaultEventPluginOrder', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DefaultEventPluginOrder
   */
  
  'use strict';
  
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  
  /**
   * Module that is injectable into `EventPluginHub`, that specifies a
   * deterministic ordering of `EventPlugin`s. A convenient way to reason about
   * plugins, without having to package every one of them. This is better than
   * having plugins be ordered in the same order that they are injected because
   * that ordering would be influenced by the packaging order.
   * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
   * preventing default on events is convenient in `SimpleEventPlugin` handlers.
   */
  var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];
  
  module.exports = DefaultEventPluginOrder;

});

;/*!/node_modules/react/lib/SyntheticUIEvent.js*/
define('common:node_modules/react/lib/SyntheticUIEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticUIEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticEvent = require('common:node_modules/react/lib/SyntheticEvent');
  
  var getEventTarget = require('common:node_modules/react/lib/getEventTarget');
  
  /**
   * @interface UIEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var UIEventInterface = {
    view: function (event) {
      if (event.view) {
        return event.view;
      }
  
      var target = getEventTarget(event);
      if (target != null && target.window === target) {
        // target is a window object
        return target;
      }
  
      var doc = target.ownerDocument;
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      if (doc) {
        return doc.defaultView || doc.parentWindow;
      } else {
        return window;
      }
    },
    detail: function (event) {
      return event.detail || 0;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
  
  module.exports = SyntheticUIEvent;

});

;/*!/node_modules/react/lib/getEventModifierState.js*/
define('common:node_modules/react/lib/getEventModifierState', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventModifierState
   * @typechecks static-only
   */
  
  'use strict';
  
  /**
   * Translation from modifier key to the associated property in the event.
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
   */
  
  var modifierKeyToProp = {
    'Alt': 'altKey',
    'Control': 'ctrlKey',
    'Meta': 'metaKey',
    'Shift': 'shiftKey'
  };
  
  // IE8 does not implement getModifierState so we simply map it to the only
  // modifier keys exposed by the event itself, does not support Lock-keys.
  // Currently, all major browsers except Chrome seems to support Lock-keys.
  function modifierStateGetter(keyArg) {
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;
    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }
    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }
  
  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }
  
  module.exports = getEventModifierState;

});

;/*!/node_modules/react/lib/SyntheticMouseEvent.js*/
define('common:node_modules/react/lib/SyntheticMouseEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticMouseEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticUIEvent = require('common:node_modules/react/lib/SyntheticUIEvent');
  var ViewportMetrics = require('common:node_modules/react/lib/ViewportMetrics');
  
  var getEventModifierState = require('common:node_modules/react/lib/getEventModifierState');
  
  /**
   * @interface MouseEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var MouseEventInterface = {
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: getEventModifierState,
    button: function (event) {
      // Webkit, Firefox, IE9+
      // which:  1 2 3
      // button: 0 1 2 (standard)
      var button = event.button;
      if ('which' in event) {
        return button;
      }
      // IE<9
      // which:  undefined
      // button: 0 0 0
      // button: 1 4 2 (onmouseup)
      return button === 2 ? 2 : button === 4 ? 1 : 0;
    },
    buttons: null,
    relatedTarget: function (event) {
      return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
    },
    // "Proprietary" Interface.
    pageX: function (event) {
      return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
    },
    pageY: function (event) {
      return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
  
  module.exports = SyntheticMouseEvent;

});

;/*!/node_modules/react/lib/EnterLeaveEventPlugin.js*/
define('common:node_modules/react/lib/EnterLeaveEventPlugin', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EnterLeaveEventPlugin
   * @typechecks static-only
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var EventPropagators = require('common:node_modules/react/lib/EventPropagators');
  var SyntheticMouseEvent = require('common:node_modules/react/lib/SyntheticMouseEvent');
  
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  
  var topLevelTypes = EventConstants.topLevelTypes;
  var getFirstReactDOM = ReactMount.getFirstReactDOM;
  
  var eventTypes = {
    mouseEnter: {
      registrationName: keyOf({ onMouseEnter: null }),
      dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
    },
    mouseLeave: {
      registrationName: keyOf({ onMouseLeave: null }),
      dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
    }
  };
  
  var extractedEvents = [null, null];
  
  var EnterLeaveEventPlugin = {
  
    eventTypes: eventTypes,
  
    /**
     * For almost every interaction we care about, there will be both a top-level
     * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
     * we do not extract duplicate events. However, moving the mouse into the
     * browser from outside will not fire a `mouseout` event. In this case, we use
     * the `mouseover` top-level event.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
        return null;
      }
      if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
        // Must not be a mouse in or mouse out - ignoring.
        return null;
      }
  
      var win;
      if (topLevelTarget.window === topLevelTarget) {
        // `topLevelTarget` is probably a window object.
        win = topLevelTarget;
      } else {
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        var doc = topLevelTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
  
      var from;
      var to;
      var fromID = '';
      var toID = '';
      if (topLevelType === topLevelTypes.topMouseOut) {
        from = topLevelTarget;
        fromID = topLevelTargetID;
        to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
        if (to) {
          toID = ReactMount.getID(to);
        } else {
          to = win;
        }
        to = to || win;
      } else {
        from = win;
        to = topLevelTarget;
        toID = topLevelTargetID;
      }
  
      if (from === to) {
        // Nothing pertains to our managed components.
        return null;
      }
  
      var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
      leave.type = 'mouseleave';
      leave.target = from;
      leave.relatedTarget = to;
  
      var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
      enter.type = 'mouseenter';
      enter.target = to;
      enter.relatedTarget = from;
  
      EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
  
      extractedEvents[0] = leave;
      extractedEvents[1] = enter;
  
      return extractedEvents;
    }
  
  };
  
  module.exports = EnterLeaveEventPlugin;

});

;/*!/node_modules/react/lib/HTMLDOMPropertyConfig.js*/
define('common:node_modules/react/lib/HTMLDOMPropertyConfig', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule HTMLDOMPropertyConfig
   */
  
  'use strict';
  
  var DOMProperty = require('common:node_modules/react/lib/DOMProperty');
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
  var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
  var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
  var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
  var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
  var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
  var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
  
  var hasSVG;
  if (ExecutionEnvironment.canUseDOM) {
    var implementation = document.implementation;
    hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
  }
  
  var HTMLDOMPropertyConfig = {
    isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
    Properties: {
      /**
       * Standard Properties
       */
      accept: null,
      acceptCharset: null,
      accessKey: null,
      action: null,
      allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      allowTransparency: MUST_USE_ATTRIBUTE,
      alt: null,
      async: HAS_BOOLEAN_VALUE,
      autoComplete: null,
      // autoFocus is polyfilled/normalized by AutoFocusUtils
      // autoFocus: HAS_BOOLEAN_VALUE,
      autoPlay: HAS_BOOLEAN_VALUE,
      capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      cellPadding: null,
      cellSpacing: null,
      charSet: MUST_USE_ATTRIBUTE,
      challenge: MUST_USE_ATTRIBUTE,
      checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      classID: MUST_USE_ATTRIBUTE,
      // To set className on SVG elements, it's necessary to use .setAttribute;
      // this works on HTML elements too in all browsers except IE8. Conveniently,
      // IE8 doesn't support SVG and so we can simply use the attribute in
      // browsers that support SVG and the property in browsers that don't,
      // regardless of whether the element is HTML or SVG.
      className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
      cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      colSpan: null,
      content: null,
      contentEditable: null,
      contextMenu: MUST_USE_ATTRIBUTE,
      controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      coords: null,
      crossOrigin: null,
      data: null, // For `<object />` acts as `src`.
      dateTime: MUST_USE_ATTRIBUTE,
      'default': HAS_BOOLEAN_VALUE,
      defer: HAS_BOOLEAN_VALUE,
      dir: null,
      disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      download: HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable: null,
      encType: null,
      form: MUST_USE_ATTRIBUTE,
      formAction: MUST_USE_ATTRIBUTE,
      formEncType: MUST_USE_ATTRIBUTE,
      formMethod: MUST_USE_ATTRIBUTE,
      formNoValidate: HAS_BOOLEAN_VALUE,
      formTarget: MUST_USE_ATTRIBUTE,
      frameBorder: MUST_USE_ATTRIBUTE,
      headers: null,
      height: MUST_USE_ATTRIBUTE,
      hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      high: null,
      href: null,
      hrefLang: null,
      htmlFor: null,
      httpEquiv: null,
      icon: null,
      id: MUST_USE_PROPERTY,
      inputMode: MUST_USE_ATTRIBUTE,
      integrity: null,
      is: MUST_USE_ATTRIBUTE,
      keyParams: MUST_USE_ATTRIBUTE,
      keyType: MUST_USE_ATTRIBUTE,
      kind: null,
      label: null,
      lang: null,
      list: MUST_USE_ATTRIBUTE,
      loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      low: null,
      manifest: MUST_USE_ATTRIBUTE,
      marginHeight: null,
      marginWidth: null,
      max: null,
      maxLength: MUST_USE_ATTRIBUTE,
      media: MUST_USE_ATTRIBUTE,
      mediaGroup: null,
      method: null,
      min: null,
      minLength: MUST_USE_ATTRIBUTE,
      multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      name: null,
      nonce: MUST_USE_ATTRIBUTE,
      noValidate: HAS_BOOLEAN_VALUE,
      open: HAS_BOOLEAN_VALUE,
      optimum: null,
      pattern: null,
      placeholder: null,
      poster: null,
      preload: null,
      radioGroup: null,
      readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      rel: null,
      required: HAS_BOOLEAN_VALUE,
      reversed: HAS_BOOLEAN_VALUE,
      role: MUST_USE_ATTRIBUTE,
      rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      rowSpan: null,
      sandbox: null,
      scope: null,
      scoped: HAS_BOOLEAN_VALUE,
      scrolling: null,
      seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      shape: null,
      size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      sizes: MUST_USE_ATTRIBUTE,
      span: HAS_POSITIVE_NUMERIC_VALUE,
      spellCheck: null,
      src: null,
      srcDoc: MUST_USE_PROPERTY,
      srcLang: null,
      srcSet: MUST_USE_ATTRIBUTE,
      start: HAS_NUMERIC_VALUE,
      step: null,
      style: null,
      summary: null,
      tabIndex: null,
      target: null,
      title: null,
      type: null,
      useMap: null,
      value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
      width: MUST_USE_ATTRIBUTE,
      wmode: MUST_USE_ATTRIBUTE,
      wrap: null,
  
      /**
       * RDFa Properties
       */
      about: MUST_USE_ATTRIBUTE,
      datatype: MUST_USE_ATTRIBUTE,
      inlist: MUST_USE_ATTRIBUTE,
      prefix: MUST_USE_ATTRIBUTE,
      // property is also supported for OpenGraph in meta tags.
      property: MUST_USE_ATTRIBUTE,
      resource: MUST_USE_ATTRIBUTE,
      'typeof': MUST_USE_ATTRIBUTE,
      vocab: MUST_USE_ATTRIBUTE,
  
      /**
       * Non-standard Properties
       */
      // autoCapitalize and autoCorrect are supported in Mobile Safari for
      // keyboard hints.
      autoCapitalize: MUST_USE_ATTRIBUTE,
      autoCorrect: MUST_USE_ATTRIBUTE,
      // autoSave allows WebKit/Blink to persist values of input fields on page reloads
      autoSave: null,
      // color is for Safari mask-icon link
      color: null,
      // itemProp, itemScope, itemType are for
      // Microdata support. See http://schema.org/docs/gs.html
      itemProp: MUST_USE_ATTRIBUTE,
      itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      itemType: MUST_USE_ATTRIBUTE,
      // itemID and itemRef are for Microdata support as well but
      // only specified in the the WHATWG spec document. See
      // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
      itemID: MUST_USE_ATTRIBUTE,
      itemRef: MUST_USE_ATTRIBUTE,
      // results show looking glass icon and recent searches on input
      // search fields in WebKit/Blink
      results: null,
      // IE-only attribute that specifies security restrictions on an iframe
      // as an alternative to the sandbox attribute on IE<10
      security: MUST_USE_ATTRIBUTE,
      // IE-only attribute that controls focus behavior
      unselectable: MUST_USE_ATTRIBUTE
    },
    DOMAttributeNames: {
      acceptCharset: 'accept-charset',
      className: 'class',
      htmlFor: 'for',
      httpEquiv: 'http-equiv'
    },
    DOMPropertyNames: {
      autoComplete: 'autocomplete',
      autoFocus: 'autofocus',
      autoPlay: 'autoplay',
      autoSave: 'autosave',
      // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
      // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
      encType: 'encoding',
      hrefLang: 'hreflang',
      radioGroup: 'radiogroup',
      spellCheck: 'spellcheck',
      srcDoc: 'srcdoc',
      srcSet: 'srcset'
    }
  };
  
  module.exports = HTMLDOMPropertyConfig;

});

;/*!/node_modules/react/lib/findDOMNode.js*/
define('common:node_modules/react/lib/findDOMNode', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule findDOMNode
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  var ReactInstanceMap = require('common:node_modules/react/lib/ReactInstanceMap');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * Returns the DOM node rendered by this element.
   *
   * @param {ReactComponent|DOMElement} componentOrElement
   * @return {?DOMElement} The root node of this element.
   */
  function findDOMNode(componentOrElement) {
    if ('development' !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        'development' !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === 1) {
      return componentOrElement;
    }
    if (ReactInstanceMap.has(componentOrElement)) {
      return ReactMount.getNodeFromInstance(componentOrElement);
    }
    !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? 'development' !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
    !false ? 'development' !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
  }
  
  module.exports = findDOMNode;

});

;/*!/node_modules/react/lib/ReactBrowserComponentMixin.js*/
define('common:node_modules/react/lib/ReactBrowserComponentMixin', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactBrowserComponentMixin
   */
  
  'use strict';
  
  var ReactInstanceMap = require('common:node_modules/react/lib/ReactInstanceMap');
  
  var findDOMNode = require('common:node_modules/react/lib/findDOMNode');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var didWarnKey = '_getDOMNodeDidWarn';
  
  var ReactBrowserComponentMixin = {
    /**
     * Returns the DOM node rendered by this component.
     *
     * @return {DOMElement} The root node of this component.
     * @final
     * @protected
     */
    getDOMNode: function () {
      'development' !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
      this.constructor[didWarnKey] = true;
      return findDOMNode(this);
    }
  };
  
  module.exports = ReactBrowserComponentMixin;

});

;/*!/node_modules/react/lib/ReactDefaultBatchingStrategy.js*/
define('common:node_modules/react/lib/ReactDefaultBatchingStrategy', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultBatchingStrategy
   */
  
  'use strict';
  
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  var Transaction = require('common:node_modules/react/lib/Transaction');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  
  var RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function () {
      ReactDefaultBatchingStrategy.isBatchingUpdates = false;
    }
  };
  
  var FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
  };
  
  var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
  
  function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
  }
  
  assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    }
  });
  
  var transaction = new ReactDefaultBatchingStrategyTransaction();
  
  var ReactDefaultBatchingStrategy = {
    isBatchingUpdates: false,
  
    /**
     * Call the provided function in a context within which calls to `setState`
     * and friends are batched such that components aren't updated unnecessarily.
     */
    batchedUpdates: function (callback, a, b, c, d, e) {
      var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
  
      ReactDefaultBatchingStrategy.isBatchingUpdates = true;
  
      // The code is written this way to avoid extra allocations
      if (alreadyBatchingUpdates) {
        callback(a, b, c, d, e);
      } else {
        transaction.perform(callback, null, a, b, c, d, e);
      }
    }
  };
  
  module.exports = ReactDefaultBatchingStrategy;

});

;/*!/node_modules/fbjs/lib/focusNode.js*/
define('common:node_modules/fbjs/lib/focusNode', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule focusNode
   */
  
  'use strict';
  
  /**
   * @param {DOMElement} node input/textarea to focus
   */
  function focusNode(node) {
    // IE8 can throw "Can't move focus to the control because it is invisible,
    // not enabled, or of a type that does not accept the focus." for all kinds of
    // reasons that are too expensive and fragile to test.
    try {
      node.focus();
    } catch (e) {}
  }
  
  module.exports = focusNode;

});

;/*!/node_modules/react/lib/AutoFocusUtils.js*/
define('common:node_modules/react/lib/AutoFocusUtils', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule AutoFocusUtils
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  
  var findDOMNode = require('common:node_modules/react/lib/findDOMNode');
  var focusNode = require('common:node_modules/fbjs/lib/focusNode');
  
  var Mixin = {
    componentDidMount: function () {
      if (this.props.autoFocus) {
        focusNode(findDOMNode(this));
      }
    }
  };
  
  var AutoFocusUtils = {
    Mixin: Mixin,
  
    focusDOMComponent: function () {
      focusNode(ReactMount.getNode(this._rootNodeID));
    }
  };
  
  module.exports = AutoFocusUtils;

});

;/*!/node_modules/react/lib/CSSProperty.js*/
define('common:node_modules/react/lib/CSSProperty', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CSSProperty
   */
  
  'use strict';
  
  /**
   * CSS properties which accept numbers but are not in units of "px".
   */
  var isUnitlessNumber = {
    animationIterationCount: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
  
    // SVG-related properties
    fillOpacity: true,
    stopOpacity: true,
    strokeDashoffset: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  
  /**
   * @param {string} prefix vendor-specific prefix, eg: Webkit
   * @param {string} key style name, eg: transitionDuration
   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
   * WebkitTransitionDuration
   */
  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }
  
  /**
   * Support style names that may come passed in prefixed by adding permutations
   * of vendor prefixes.
   */
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
  
  // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
  // infinite loop, because it iterates over the newly added props too.
  Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });
  
  /**
   * Most style properties can be unset by doing .style[prop] = '' but IE8
   * doesn't like doing that with shorthand properties so for the properties that
   * IE8 breaks on, which are listed here, we instead unset each of the
   * individual properties. See http://bugs.jquery.com/ticket/12385.
   * The 4-value 'clock' properties like margin, padding, border-width seem to
   * behave without any problems. Curiously, list-style works too without any
   * special prodding.
   */
  var shorthandPropertyExpansions = {
    background: {
      backgroundAttachment: true,
      backgroundColor: true,
      backgroundImage: true,
      backgroundPositionX: true,
      backgroundPositionY: true,
      backgroundRepeat: true
    },
    backgroundPosition: {
      backgroundPositionX: true,
      backgroundPositionY: true
    },
    border: {
      borderWidth: true,
      borderStyle: true,
      borderColor: true
    },
    borderBottom: {
      borderBottomWidth: true,
      borderBottomStyle: true,
      borderBottomColor: true
    },
    borderLeft: {
      borderLeftWidth: true,
      borderLeftStyle: true,
      borderLeftColor: true
    },
    borderRight: {
      borderRightWidth: true,
      borderRightStyle: true,
      borderRightColor: true
    },
    borderTop: {
      borderTopWidth: true,
      borderTopStyle: true,
      borderTopColor: true
    },
    font: {
      fontStyle: true,
      fontVariant: true,
      fontWeight: true,
      fontSize: true,
      lineHeight: true,
      fontFamily: true
    },
    outline: {
      outlineWidth: true,
      outlineStyle: true,
      outlineColor: true
    }
  };
  
  var CSSProperty = {
    isUnitlessNumber: isUnitlessNumber,
    shorthandPropertyExpansions: shorthandPropertyExpansions
  };
  
  module.exports = CSSProperty;

});

;/*!/node_modules/fbjs/lib/camelize.js*/
define('common:node_modules/fbjs/lib/camelize', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule camelize
   * @typechecks
   */
  
  "use strict";
  
  var _hyphenPattern = /-(.)/g;
  
  /**
   * Camelcases a hyphenated string, for example:
   *
   *   > camelize('background-color')
   *   < "backgroundColor"
   *
   * @param {string} string
   * @return {string}
   */
  function camelize(string) {
    return string.replace(_hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  }
  
  module.exports = camelize;

});

;/*!/node_modules/fbjs/lib/camelizeStyleName.js*/
define('common:node_modules/fbjs/lib/camelizeStyleName', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule camelizeStyleName
   * @typechecks
   */
  
  'use strict';
  
  var camelize = require('common:node_modules/fbjs/lib/camelize');
  
  var msPattern = /^-ms-/;
  
  /**
   * Camelcases a hyphenated CSS property name, for example:
   *
   *   > camelizeStyleName('background-color')
   *   < "backgroundColor"
   *   > camelizeStyleName('-moz-transition')
   *   < "MozTransition"
   *   > camelizeStyleName('-ms-transition')
   *   < "msTransition"
   *
   * As Andi Smith suggests
   * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
   * is converted to lowercase `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function camelizeStyleName(string) {
    return camelize(string.replace(msPattern, 'ms-'));
  }
  
  module.exports = camelizeStyleName;

});

;/*!/node_modules/react/lib/dangerousStyleValue.js*/
define('common:node_modules/react/lib/dangerousStyleValue', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule dangerousStyleValue
   * @typechecks static-only
   */
  
  'use strict';
  
  var CSSProperty = require('common:node_modules/react/lib/CSSProperty');
  
  var isUnitlessNumber = CSSProperty.isUnitlessNumber;
  
  /**
   * Convert a value into the proper css writable value. The style name `name`
   * should be logical (no hyphens), as specified
   * in `CSSProperty.isUnitlessNumber`.
   *
   * @param {string} name CSS property name such as `topMargin`.
   * @param {*} value CSS property value such as `10px`.
   * @return {string} Normalized style value with dimensions applied.
   */
  function dangerousStyleValue(name, value) {
    // Note that we've removed escapeTextForBrowser() calls here since the
    // whole string will be escaped when the attribute is injected into
    // the markup. If you provide unsafe user data here they can inject
    // arbitrary CSS which may be problematic (I couldn't repro this):
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
    // This is not an XSS hole but instead a potential CSS injection issue
    // which has lead to a greater discussion about how we're going to
    // trust URLs moving forward. See #2115901
  
    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }
  
    var isNonNumeric = isNaN(value);
    if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
      return '' + value; // cast to string
    }
  
    if (typeof value === 'string') {
      value = value.trim();
    }
    return value + 'px';
  }
  
  module.exports = dangerousStyleValue;

});

;/*!/node_modules/fbjs/lib/hyphenate.js*/
define('common:node_modules/fbjs/lib/hyphenate', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule hyphenate
   * @typechecks
   */
  
  'use strict';
  
  var _uppercasePattern = /([A-Z])/g;
  
  /**
   * Hyphenates a camelcased string, for example:
   *
   *   > hyphenate('backgroundColor')
   *   < "background-color"
   *
   * For CSS style names, use `hyphenateStyleName` instead which works properly
   * with all vendor prefixes, including `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenate(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
  }
  
  module.exports = hyphenate;

});

;/*!/node_modules/fbjs/lib/hyphenateStyleName.js*/
define('common:node_modules/fbjs/lib/hyphenateStyleName', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule hyphenateStyleName
   * @typechecks
   */
  
  'use strict';
  
  var hyphenate = require('common:node_modules/fbjs/lib/hyphenate');
  
  var msPattern = /^ms-/;
  
  /**
   * Hyphenates a camelcased CSS property name, for example:
   *
   *   > hyphenateStyleName('backgroundColor')
   *   < "background-color"
   *   > hyphenateStyleName('MozTransition')
   *   < "-moz-transition"
   *   > hyphenateStyleName('msTransition')
   *   < "-ms-transition"
   *
   * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
   * is converted to `-ms-`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, '-ms-');
  }
  
  module.exports = hyphenateStyleName;

});

;/*!/node_modules/fbjs/lib/memoizeStringOnly.js*/
define('common:node_modules/fbjs/lib/memoizeStringOnly', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule memoizeStringOnly
   * @typechecks static-only
   */
  
  'use strict';
  
  /**
   * Memoizes the return value of a function that accepts one string argument.
   *
   * @param {function} callback
   * @return {function}
   */
  function memoizeStringOnly(callback) {
    var cache = {};
    return function (string) {
      if (!cache.hasOwnProperty(string)) {
        cache[string] = callback.call(this, string);
      }
      return cache[string];
    };
  }
  
  module.exports = memoizeStringOnly;

});

;/*!/node_modules/react/lib/CSSPropertyOperations.js*/
define('common:node_modules/react/lib/CSSPropertyOperations', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CSSPropertyOperations
   * @typechecks static-only
   */
  
  'use strict';
  
  var CSSProperty = require('common:node_modules/react/lib/CSSProperty');
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  
  var camelizeStyleName = require('common:node_modules/fbjs/lib/camelizeStyleName');
  var dangerousStyleValue = require('common:node_modules/react/lib/dangerousStyleValue');
  var hyphenateStyleName = require('common:node_modules/fbjs/lib/hyphenateStyleName');
  var memoizeStringOnly = require('common:node_modules/fbjs/lib/memoizeStringOnly');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var processStyleName = memoizeStringOnly(function (styleName) {
    return hyphenateStyleName(styleName);
  });
  
  var hasShorthandPropertyBug = false;
  var styleFloatAccessor = 'cssFloat';
  if (ExecutionEnvironment.canUseDOM) {
    var tempStyle = document.createElement('div').style;
    try {
      // IE8 throws "Invalid argument." if resetting shorthand style properties.
      tempStyle.font = '';
    } catch (e) {
      hasShorthandPropertyBug = true;
    }
    // IE8 only supports accessing cssFloat (standard) as styleFloat
    if (document.documentElement.style.cssFloat === undefined) {
      styleFloatAccessor = 'styleFloat';
    }
  }
  
  if ('development' !== 'production') {
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  
    // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
  
    var warnedStyleNames = {};
    var warnedStyleValues = {};
  
    var warnHyphenatedStyleName = function (name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
  
      warnedStyleNames[name] = true;
      'development' !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
    };
  
    var warnBadVendoredStyleName = function (name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
  
      warnedStyleNames[name] = true;
      'development' !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
    };
  
    var warnStyleValueWithSemicolon = function (name, value) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }
  
      warnedStyleValues[value] = true;
      'development' !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
    };
  
    /**
     * @param {string} name
     * @param {*} value
     */
    var warnValidStyle = function (name, value) {
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value);
      }
    };
  }
  
  /**
   * Operations for dealing with CSS properties.
   */
  var CSSPropertyOperations = {
  
    /**
     * Serializes a mapping of style properties for use as inline styles:
     *
     *   > createMarkupForStyles({width: '200px', height: 0})
     *   "width:200px;height:0;"
     *
     * Undefined values are ignored so that declarative programming is easier.
     * The result should be HTML-escaped before insertion into the DOM.
     *
     * @param {object} styles
     * @return {?string}
     */
    createMarkupForStyles: function (styles) {
      var serialized = '';
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var styleValue = styles[styleName];
        if ('development' !== 'production') {
          warnValidStyle(styleName, styleValue);
        }
        if (styleValue != null) {
          serialized += processStyleName(styleName) + ':';
          serialized += dangerousStyleValue(styleName, styleValue) + ';';
        }
      }
      return serialized || null;
    },
  
    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */
    setValueForStyles: function (node, styles) {
      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        if ('development' !== 'production') {
          warnValidStyle(styleName, styles[styleName]);
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName]);
        if (styleName === 'float') {
          styleName = styleFloatAccessor;
        }
        if (styleValue) {
          style[styleName] = styleValue;
        } else {
          var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
          if (expansion) {
            // Shorthand property that IE8 won't like unsetting, so unset each
            // component to placate it
            for (var individualStyleName in expansion) {
              style[individualStyleName] = '';
            }
          } else {
            style[styleName] = '';
          }
        }
      }
    }
  
  };
  
  ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
    setValueForStyles: 'setValueForStyles'
  });
  
  module.exports = CSSPropertyOperations;

});

;/*!/node_modules/react/lib/ReactDOMButton.js*/
define('common:node_modules/react/lib/ReactDOMButton', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMButton
   */
  
  'use strict';
  
  var mouseListenerNames = {
    onClick: true,
    onDoubleClick: true,
    onMouseDown: true,
    onMouseMove: true,
    onMouseUp: true,
  
    onClickCapture: true,
    onDoubleClickCapture: true,
    onMouseDownCapture: true,
    onMouseMoveCapture: true,
    onMouseUpCapture: true
  };
  
  /**
   * Implements a <button> native component that does not receive mouse events
   * when `disabled` is set.
   */
  var ReactDOMButton = {
    getNativeProps: function (inst, props, context) {
      if (!props.disabled) {
        return props;
      }
  
      // Copy the props, except the mouse listeners
      var nativeProps = {};
      for (var key in props) {
        if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
          nativeProps[key] = props[key];
        }
      }
  
      return nativeProps;
    }
  };
  
  module.exports = ReactDOMButton;

});

;/*!/node_modules/react/lib/getIteratorFn.js*/
define('common:node_modules/react/lib/getIteratorFn', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getIteratorFn
   * @typechecks static-only
   */
  
  'use strict';
  
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
  
  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  
  module.exports = getIteratorFn;

});

;/*!/node_modules/react/lib/ReactPropTypes.js*/
define('common:node_modules/react/lib/ReactPropTypes', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypes
   */
  
  'use strict';
  
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactPropTypeLocationNames = require('common:node_modules/react/lib/ReactPropTypeLocationNames');
  
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  var getIteratorFn = require('common:node_modules/react/lib/getIteratorFn');
  
  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */
  
  var ANONYMOUS = '<<anonymous>>';
  
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
  
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };
  
  function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (props[propName] == null) {
        var locationName = ReactPropTypeLocationNames[location];
        if (isRequired) {
          return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
  
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
  
    return chainedCheckType;
  }
  
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var locationName = ReactPropTypeLocationNames[location];
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
  
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturns(null));
  }
  
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var locationName = ReactPropTypeLocationNames[location];
        var propType = getPropType(propValue);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!ReactElement.isValidElement(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var locationName = ReactPropTypeLocationNames[location];
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      return createChainableTypeChecker(function () {
        return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
      });
    }
  
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (propValue === expectedValues[i]) {
          return null;
        }
      }
  
      var locationName = ReactPropTypeLocationNames[location];
      var valuesString = JSON.stringify(expectedValues);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      return createChainableTypeChecker(function () {
        return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
      });
    }
  
    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName) == null) {
          return null;
        }
      }
  
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }
  
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || ReactElement.isValidElement(propValue)) {
          return true;
        }
  
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
  
        return true;
      default:
        return false;
    }
  }
  
  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    return propType;
  }
  
  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }
  
  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return '<<anonymous>>';
    }
    return propValue.constructor.name;
  }
  
  module.exports = ReactPropTypes;

});

;/*!/node_modules/react/lib/LinkedValueUtils.js*/
define('common:node_modules/react/lib/LinkedValueUtils', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule LinkedValueUtils
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactPropTypes = require('common:node_modules/react/lib/ReactPropTypes');
  var ReactPropTypeLocations = require('common:node_modules/react/lib/ReactPropTypeLocations');
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var hasReadOnlyValue = {
    'button': true,
    'checkbox': true,
    'image': true,
    'hidden': true,
    'radio': true,
    'reset': true,
    'submit': true
  };
  
  function _assertSingleLink(inputProps) {
    !(inputProps.checkedLink == null || inputProps.valueLink == null) ? 'development' !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
  }
  function _assertValueLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.value == null && inputProps.onChange == null) ? 'development' !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
  }
  
  function _assertCheckedLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.checked == null && inputProps.onChange == null) ? 'development' !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
  }
  
  var propTypes = {
    value: function (props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    onChange: ReactPropTypes.func
  };
  
  var loggedTypeFailures = {};
  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  var LinkedValueUtils = {
    checkPropTypes: function (tagName, props, owner) {
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
  
          var addendum = getDeclarationErrorAddendum(owner);
          'development' !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
        }
      }
    },
  
    /**
     * @param {object} inputProps Props for form component
     * @return {*} current value of the input either from value prop or link.
     */
    getValue: function (inputProps) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.value;
      }
      return inputProps.value;
    },
  
    /**
     * @param {object} inputProps Props for form component
     * @return {*} current checked status of the input either from checked prop
     *             or link.
     */
    getChecked: function (inputProps) {
      if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.value;
      }
      return inputProps.checked;
    },
  
    /**
     * @param {object} inputProps Props for form component
     * @param {SyntheticEvent} event change event to handle
     */
    executeOnChange: function (inputProps, event) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.requestChange(event.target.value);
      } else if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.requestChange(event.target.checked);
      } else if (inputProps.onChange) {
        return inputProps.onChange.call(undefined, event);
      }
    }
  };
  
  module.exports = LinkedValueUtils;

});

;/*!/node_modules/react/lib/ReactDOMInput.js*/
define('common:node_modules/react/lib/ReactDOMInput', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMInput
   */
  
  'use strict';
  
  var ReactDOMIDOperations = require('common:node_modules/react/lib/ReactDOMIDOperations');
  var LinkedValueUtils = require('common:node_modules/react/lib/LinkedValueUtils');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  var instancesByReactID = {};
  
  function forceUpdateIfMounted() {
    if (this._rootNodeID) {
      // DOM component is still mounted; update
      ReactDOMInput.updateWrapper(this);
    }
  }
  
  /**
   * Implements an <input> native component that allows setting these optional
   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
   *
   * If `checked` or `value` are not supplied (or null/undefined), user actions
   * that affect the checked state or value will trigger updates to the element.
   *
   * If they are supplied (and not null/undefined), the rendered element will not
   * trigger updates to the element. Instead, the props must change in order for
   * the rendered element to be updated.
   *
   * The rendered element will be initialized as unchecked (or `defaultChecked`)
   * with an empty value (or `defaultValue`).
   *
   * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
   */
  var ReactDOMInput = {
    getNativeProps: function (inst, props, context) {
      var value = LinkedValueUtils.getValue(props);
      var checked = LinkedValueUtils.getChecked(props);
  
      var nativeProps = assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: value != null ? value : inst._wrapperState.initialValue,
        checked: checked != null ? checked : inst._wrapperState.initialChecked,
        onChange: inst._wrapperState.onChange
      });
  
      return nativeProps;
    },
  
    mountWrapper: function (inst, props) {
      if ('development' !== 'production') {
        LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
      }
  
      var defaultValue = props.defaultValue;
      inst._wrapperState = {
        initialChecked: props.defaultChecked || false,
        initialValue: defaultValue != null ? defaultValue : null,
        onChange: _handleChange.bind(inst)
      };
    },
  
    mountReadyWrapper: function (inst) {
      // Can't be in mountWrapper or else server rendering leaks.
      instancesByReactID[inst._rootNodeID] = inst;
    },
  
    unmountWrapper: function (inst) {
      delete instancesByReactID[inst._rootNodeID];
    },
  
    updateWrapper: function (inst) {
      var props = inst._currentElement.props;
  
      // TODO: Shouldn't this be getChecked(props)?
      var checked = props.checked;
      if (checked != null) {
        ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
      }
  
      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
      }
    }
  };
  
  function _handleChange(event) {
    var props = this._currentElement.props;
  
    var returnValue = LinkedValueUtils.executeOnChange(props, event);
  
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);
  
    var name = props.name;
    if (props.type === 'radio' && name != null) {
      var rootNode = ReactMount.getNode(this._rootNodeID);
      var queryRoot = rootNode;
  
      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }
  
      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
  
      for (var i = 0; i < group.length; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode || otherNode.form !== rootNode.form) {
          continue;
        }
        // This will throw if radio buttons rendered by different copies of React
        // and the same name are rendered into the same form (same as #1939).
        // That's probably okay; we don't support it just as we don't support
        // mixing React with non-React.
        var otherID = ReactMount.getID(otherNode);
        !otherID ? 'development' !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
        var otherInstance = instancesByReactID[otherID];
        !otherInstance ? 'development' !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }
  
    return returnValue;
  }
  
  module.exports = ReactDOMInput;

});

;/*!/node_modules/react/lib/traverseAllChildren.js*/
define('common:node_modules/react/lib/traverseAllChildren', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule traverseAllChildren
   */
  
  'use strict';
  
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactInstanceHandles = require('common:node_modules/react/lib/ReactInstanceHandles');
  
  var getIteratorFn = require('common:node_modules/react/lib/getIteratorFn');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var SEPARATOR = ReactInstanceHandles.SEPARATOR;
  var SUBSEPARATOR = ':';
  
  /**
   * TODO: Test that a single child and an array with one item have the same key
   * pattern.
   */
  
  var userProvidedKeyEscaperLookup = {
    '=': '=0',
    '.': '=1',
    ':': '=2'
  };
  
  var userProvidedKeyEscapeRegex = /[=.:]/g;
  
  var didWarnAboutMaps = false;
  
  function userProvidedKeyEscaper(match) {
    return userProvidedKeyEscaperLookup[match];
  }
  
  /**
   * Generate a key string that identifies a component within a set.
   *
   * @param {*} component A component that could contain a manual key.
   * @param {number} index Index that is used if a manual key is not provided.
   * @return {string}
   */
  function getComponentKey(component, index) {
    if (component && component.key != null) {
      // Explicit key
      return wrapUserProvidedKey(component.key);
    }
    // Implicit key determined by the index in the set
    return index.toString(36);
  }
  
  /**
   * Escape a component key so that it is safe to use in a reactid.
   *
   * @param {*} text Component key to be escaped.
   * @return {string} An escaped string.
   */
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
  }
  
  /**
   * Wrap a `key` value explicitly provided by the user to distinguish it from
   * implicitly-generated keys generated by a component's index in its parent.
   *
   * @param {string} key Value of a user-provided `key` attribute
   * @return {string}
   */
  function wrapUserProvidedKey(key) {
    return '$' + escapeUserProvidedKey(key);
  }
  
  /**
   * @param {?*} children Children tree container.
   * @param {!string} nameSoFar Name of the key path so far.
   * @param {!function} callback Callback to invoke with each child found.
   * @param {?*} traverseContext Used to pass information throughout the traversal
   * process.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
  
    if (type === 'undefined' || type === 'boolean') {
      // All of the above are perceived as null.
      children = null;
    }
  
    if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
      callback(traverseContext, children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
      return 1;
    }
  
    var child;
    var nextName;
    var subtreeCount = 0; // Count of children found in the current subtree.
    var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
  
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = nextNamePrefix + getComponentKey(child, i);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else {
      var iteratorFn = getIteratorFn(children);
      if (iteratorFn) {
        var iterator = iteratorFn.call(children);
        var step;
        if (iteratorFn !== children.entries) {
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          if ('development' !== 'production') {
            'development' !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
            didWarnAboutMaps = true;
          }
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              child = entry[1];
              nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          }
        }
      } else if (type === 'object') {
        var addendum = '';
        if ('development' !== 'production') {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
          if (children._isReactElement) {
            addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
          }
          if (ReactCurrentOwner.current) {
            var name = ReactCurrentOwner.current.getName();
            if (name) {
              addendum += ' Check the render method of `' + name + '`.';
            }
          }
        }
        var childrenString = String(children);
        !false ? 'development' !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
      }
    }
  
    return subtreeCount;
  }
  
  /**
   * Traverses children that are typically specified as `props.children`, but
   * might also be specified through attributes:
   *
   * - `traverseAllChildren(this.props.children, ...)`
   * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
   *
   * The `traverseContext` is an optional argument that is passed through the
   * entire traversal. It can be used to store accumulations or anything else that
   * the callback might find relevant.
   *
   * @param {?*} children Children tree object.
   * @param {!function} callback To invoke upon traversing each child.
   * @param {?*} traverseContext Context for traversal.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildren(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }
  
    return traverseAllChildrenImpl(children, '', callback, traverseContext);
  }
  
  module.exports = traverseAllChildren;

});

;/*!/node_modules/react/lib/ReactChildren.js*/
define('common:node_modules/react/lib/ReactChildren', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactChildren
   */
  
  'use strict';
  
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  var traverseAllChildren = require('common:node_modules/react/lib/traverseAllChildren');
  
  var twoArgumentPooler = PooledClass.twoArgumentPooler;
  var fourArgumentPooler = PooledClass.fourArgumentPooler;
  
  var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
  }
  
  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * traversal. Allows avoiding binding callbacks.
   *
   * @constructor ForEachBookKeeping
   * @param {!function} forEachFunction Function to perform traversal with.
   * @param {?*} forEachContext Context to perform context with.
   */
  function ForEachBookKeeping(forEachFunction, forEachContext) {
    this.func = forEachFunction;
    this.context = forEachContext;
    this.count = 0;
  }
  ForEachBookKeeping.prototype.destructor = function () {
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
  
  function forEachSingleChild(bookKeeping, child, name) {
    var func = bookKeeping.func;
    var context = bookKeeping.context;
  
    func.call(context, child, bookKeeping.count++);
  }
  
  /**
   * Iterates through children that are typically specified as `props.children`.
   *
   * The provided forEachFunc(child, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} forEachFunc
   * @param {*} forEachContext Context for forEachContext.
   */
  function forEachChildren(children, forEachFunc, forEachContext) {
    if (children == null) {
      return children;
    }
    var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
    traverseAllChildren(children, forEachSingleChild, traverseContext);
    ForEachBookKeeping.release(traverseContext);
  }
  
  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * mapping. Allows avoiding binding callbacks.
   *
   * @constructor MapBookKeeping
   * @param {!*} mapResult Object containing the ordered map of results.
   * @param {!function} mapFunction Function to perform mapping with.
   * @param {?*} mapContext Context to perform mapping with.
   */
  function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
    this.result = mapResult;
    this.keyPrefix = keyPrefix;
    this.func = mapFunction;
    this.context = mapContext;
    this.count = 0;
  }
  MapBookKeeping.prototype.destructor = function () {
    this.result = null;
    this.keyPrefix = null;
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
  
  function mapSingleChildIntoContext(bookKeeping, child, childKey) {
    var result = bookKeeping.result;
    var keyPrefix = bookKeeping.keyPrefix;
    var func = bookKeeping.func;
    var context = bookKeeping.context;
  
    var mappedChild = func.call(context, child, bookKeeping.count++);
    if (Array.isArray(mappedChild)) {
      mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
    } else if (mappedChild != null) {
      if (ReactElement.isValidElement(mappedChild)) {
        mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
        // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
      }
      result.push(mappedChild);
    }
  }
  
  function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
    var escapedPrefix = '';
    if (prefix != null) {
      escapedPrefix = escapeUserProvidedKey(prefix) + '/';
    }
    var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
    MapBookKeeping.release(traverseContext);
  }
  
  /**
   * Maps children that are typically specified as `props.children`.
   *
   * The provided mapFunction(child, key, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} func The map function.
   * @param {*} context Context for mapFunction.
   * @return {object} Object containing the ordered map of results.
   */
  function mapChildren(children, func, context) {
    if (children == null) {
      return children;
    }
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
    return result;
  }
  
  function forEachSingleChildDummy(traverseContext, child, name) {
    return null;
  }
  
  /**
   * Count the number of children that are typically specified as
   * `props.children`.
   *
   * @param {?*} children Children tree container.
   * @return {number} The number of children.
   */
  function countChildren(children, context) {
    return traverseAllChildren(children, forEachSingleChildDummy, null);
  }
  
  /**
   * Flatten a children object (typically specified as `props.children`) and
   * return an array with appropriately re-keyed children.
   */
  function toArray(children) {
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
    return result;
  }
  
  var ReactChildren = {
    forEach: forEachChildren,
    map: mapChildren,
    mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
    count: countChildren,
    toArray: toArray
  };
  
  module.exports = ReactChildren;

});

;/*!/node_modules/react/lib/ReactDOMSelect.js*/
define('common:node_modules/react/lib/ReactDOMSelect', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMSelect
   */
  
  'use strict';
  
  var LinkedValueUtils = require('common:node_modules/react/lib/LinkedValueUtils');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
  
  function updateOptionsIfPendingUpdateAndMounted() {
    if (this._rootNodeID && this._wrapperState.pendingUpdate) {
      this._wrapperState.pendingUpdate = false;
  
      var props = this._currentElement.props;
      var value = LinkedValueUtils.getValue(props);
  
      if (value != null) {
        updateOptions(this, Boolean(props.multiple), value);
      }
    }
  }
  
  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  var valuePropNames = ['value', 'defaultValue'];
  
  /**
   * Validation function for `value` and `defaultValue`.
   * @private
   */
  function checkSelectPropTypes(inst, props) {
    var owner = inst._currentElement._owner;
    LinkedValueUtils.checkPropTypes('select', props, owner);
  
    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];
      if (props[propName] == null) {
        continue;
      }
      if (props.multiple) {
        'development' !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
      } else {
        'development' !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
      }
    }
  }
  
  /**
   * @param {ReactDOMComponent} inst
   * @param {boolean} multiple
   * @param {*} propValue A stringable (with `multiple`, a list of stringables).
   * @private
   */
  function updateOptions(inst, multiple, propValue) {
    var selectedValue, i;
    var options = ReactMount.getNode(inst._rootNodeID).options;
  
    if (multiple) {
      selectedValue = {};
      for (i = 0; i < propValue.length; i++) {
        selectedValue['' + propValue[i]] = true;
      }
      for (i = 0; i < options.length; i++) {
        var selected = selectedValue.hasOwnProperty(options[i].value);
        if (options[i].selected !== selected) {
          options[i].selected = selected;
        }
      }
    } else {
      // Do not set `select.value` as exact behavior isn't consistent across all
      // browsers for all cases.
      selectedValue = '' + propValue;
      for (i = 0; i < options.length; i++) {
        if (options[i].value === selectedValue) {
          options[i].selected = true;
          return;
        }
      }
      if (options.length) {
        options[0].selected = true;
      }
    }
  }
  
  /**
   * Implements a <select> native component that allows optionally setting the
   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
   * stringable. If `multiple` is true, the prop must be an array of stringables.
   *
   * If `value` is not supplied (or null/undefined), user actions that change the
   * selected option will trigger updates to the rendered options.
   *
   * If it is supplied (and not null/undefined), the rendered options will not
   * update in response to user actions. Instead, the `value` prop must change in
   * order for the rendered options to update.
   *
   * If `defaultValue` is provided, any options with the supplied values will be
   * selected.
   */
  var ReactDOMSelect = {
    valueContextKey: valueContextKey,
  
    getNativeProps: function (inst, props, context) {
      return assign({}, props, {
        onChange: inst._wrapperState.onChange,
        value: undefined
      });
    },
  
    mountWrapper: function (inst, props) {
      if ('development' !== 'production') {
        checkSelectPropTypes(inst, props);
      }
  
      var value = LinkedValueUtils.getValue(props);
      inst._wrapperState = {
        pendingUpdate: false,
        initialValue: value != null ? value : props.defaultValue,
        onChange: _handleChange.bind(inst),
        wasMultiple: Boolean(props.multiple)
      };
    },
  
    processChildContext: function (inst, props, context) {
      // Pass down initial value so initial generated markup has correct
      // `selected` attributes
      var childContext = assign({}, context);
      childContext[valueContextKey] = inst._wrapperState.initialValue;
      return childContext;
    },
  
    postUpdateWrapper: function (inst) {
      var props = inst._currentElement.props;
  
      // After the initial mount, we control selected-ness manually so don't pass
      // the context value down
      inst._wrapperState.initialValue = undefined;
  
      var wasMultiple = inst._wrapperState.wasMultiple;
      inst._wrapperState.wasMultiple = Boolean(props.multiple);
  
      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        inst._wrapperState.pendingUpdate = false;
        updateOptions(inst, Boolean(props.multiple), value);
      } else if (wasMultiple !== Boolean(props.multiple)) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(inst, Boolean(props.multiple), props.defaultValue);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
        }
      }
    }
  };
  
  function _handleChange(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils.executeOnChange(props, event);
  
    this._wrapperState.pendingUpdate = true;
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }
  
  module.exports = ReactDOMSelect;

});

;/*!/node_modules/react/lib/ReactDOMOption.js*/
define('common:node_modules/react/lib/ReactDOMOption', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMOption
   */
  
  'use strict';
  
  var ReactChildren = require('common:node_modules/react/lib/ReactChildren');
  var ReactDOMSelect = require('common:node_modules/react/lib/ReactDOMSelect');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var valueContextKey = ReactDOMSelect.valueContextKey;
  
  /**
   * Implements an <option> native component that warns when `selected` is set.
   */
  var ReactDOMOption = {
    mountWrapper: function (inst, props, context) {
      // TODO (yungsters): Remove support for `selected` in <option>.
      if ('development' !== 'production') {
        'development' !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
      }
  
      // Look up whether this option is 'selected' via context
      var selectValue = context[valueContextKey];
  
      // If context key is null (e.g., no specified value or after initial mount)
      // or missing (e.g., for <datalist>), we don't change props.selected
      var selected = null;
      if (selectValue != null) {
        selected = false;
        if (Array.isArray(selectValue)) {
          // multiple
          for (var i = 0; i < selectValue.length; i++) {
            if ('' + selectValue[i] === '' + props.value) {
              selected = true;
              break;
            }
          }
        } else {
          selected = '' + selectValue === '' + props.value;
        }
      }
  
      inst._wrapperState = { selected: selected };
    },
  
    getNativeProps: function (inst, props, context) {
      var nativeProps = assign({ selected: undefined, children: undefined }, props);
  
      // Read state only from initial mount because <select> updates value
      // manually; we need the initial state only for server rendering
      if (inst._wrapperState.selected != null) {
        nativeProps.selected = inst._wrapperState.selected;
      }
  
      var content = '';
  
      // Flatten children and warn if they aren't strings or numbers;
      // invalid types are ignored.
      ReactChildren.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }
        if (typeof child === 'string' || typeof child === 'number') {
          content += child;
        } else {
          'development' !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
        }
      });
  
      if (content) {
        nativeProps.children = content;
      }
  
      return nativeProps;
    }
  
  };
  
  module.exports = ReactDOMOption;

});

;/*!/node_modules/react/lib/ReactDOMTextarea.js*/
define('common:node_modules/react/lib/ReactDOMTextarea', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMTextarea
   */
  
  'use strict';
  
  var LinkedValueUtils = require('common:node_modules/react/lib/LinkedValueUtils');
  var ReactDOMIDOperations = require('common:node_modules/react/lib/ReactDOMIDOperations');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  function forceUpdateIfMounted() {
    if (this._rootNodeID) {
      // DOM component is still mounted; update
      ReactDOMTextarea.updateWrapper(this);
    }
  }
  
  /**
   * Implements a <textarea> native component that allows setting `value`, and
   * `defaultValue`. This differs from the traditional DOM API because value is
   * usually set as PCDATA children.
   *
   * If `value` is not supplied (or null/undefined), user actions that affect the
   * value will trigger updates to the element.
   *
   * If `value` is supplied (and not null/undefined), the rendered element will
   * not trigger updates to the element. Instead, the `value` prop must change in
   * order for the rendered element to be updated.
   *
   * The rendered element will be initialized with an empty value, the prop
   * `defaultValue` if specified, or the children content (deprecated).
   */
  var ReactDOMTextarea = {
    getNativeProps: function (inst, props, context) {
      !(props.dangerouslySetInnerHTML == null) ? 'development' !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
  
      // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.
      var nativeProps = assign({}, props, {
        defaultValue: undefined,
        value: undefined,
        children: inst._wrapperState.initialValue,
        onChange: inst._wrapperState.onChange
      });
  
      return nativeProps;
    },
  
    mountWrapper: function (inst, props) {
      if ('development' !== 'production') {
        LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      }
  
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if ('development' !== 'production') {
          'development' !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
        }
        !(defaultValue == null) ? 'development' !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? 'development' !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
          children = children[0];
        }
  
        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      var value = LinkedValueUtils.getValue(props);
  
      inst._wrapperState = {
        // We save the initial value so that `ReactDOMComponent` doesn't update
        // `textContent` (unnecessary since we update value).
        // The initial value can be a boolean or object so that's why it's
        // forced to be a string.
        initialValue: '' + (value != null ? value : defaultValue),
        onChange: _handleChange.bind(inst)
      };
    },
  
    updateWrapper: function (inst) {
      var props = inst._currentElement.props;
      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
      }
    }
  };
  
  function _handleChange(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils.executeOnChange(props, event);
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }
  
  module.exports = ReactDOMTextarea;

});

;/*!/node_modules/react/lib/ReactChildReconciler.js*/
define('common:node_modules/react/lib/ReactChildReconciler', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactChildReconciler
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactReconciler = require('common:node_modules/react/lib/ReactReconciler');
  
  var instantiateReactComponent = require('common:node_modules/react/lib/instantiateReactComponent');
  var shouldUpdateReactComponent = require('common:node_modules/react/lib/shouldUpdateReactComponent');
  var traverseAllChildren = require('common:node_modules/react/lib/traverseAllChildren');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  function instantiateChild(childInstances, child, name) {
    // We found a component instance.
    var keyUnique = childInstances[name] === undefined;
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
    }
    if (child != null && keyUnique) {
      childInstances[name] = instantiateReactComponent(child, null);
    }
  }
  
  /**
   * ReactChildReconciler provides helpers for initializing or updating a set of
   * children. Its output is suitable for passing it onto ReactMultiChild which
   * does diffed reordering and insertion.
   */
  var ReactChildReconciler = {
    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildNodes Nested child maps.
     * @return {?object} A set of child instances.
     * @internal
     */
    instantiateChildren: function (nestedChildNodes, transaction, context) {
      if (nestedChildNodes == null) {
        return null;
      }
      var childInstances = {};
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
      return childInstances;
    },
  
    /**
     * Updates the rendered children and returns a new set of children.
     *
     * @param {?object} prevChildren Previously initialized set of children.
     * @param {?object} nextChildren Flat child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @return {?object} A new set of child instances.
     * @internal
     */
    updateChildren: function (prevChildren, nextChildren, transaction, context) {
      // We currently don't have a way to track moves here but if we use iterators
      // instead of for..in we can zip the iterators and check if an item has
      // moved.
      // TODO: If nothing has changed, return the prevChildren object so that we
      // can quickly bailout if nothing has changed.
      if (!nextChildren && !prevChildren) {
        return null;
      }
      var name;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
          ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
          nextChildren[name] = prevChild;
        } else {
          if (prevChild) {
            ReactReconciler.unmountComponent(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(nextElement, null);
          nextChildren[name] = nextChildInstance;
        }
      }
      // Unmount children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          ReactReconciler.unmountComponent(prevChildren[name]);
        }
      }
      return nextChildren;
    },
  
    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @param {?object} renderedChildren Previously initialized set of children.
     * @internal
     */
    unmountChildren: function (renderedChildren) {
      for (var name in renderedChildren) {
        if (renderedChildren.hasOwnProperty(name)) {
          var renderedChild = renderedChildren[name];
          ReactReconciler.unmountComponent(renderedChild);
        }
      }
    }
  
  };
  
  module.exports = ReactChildReconciler;

});

;/*!/node_modules/react/lib/flattenChildren.js*/
define('common:node_modules/react/lib/flattenChildren', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule flattenChildren
   */
  
  'use strict';
  
  var traverseAllChildren = require('common:node_modules/react/lib/traverseAllChildren');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * @param {function} traverseContext Context passed through traversal.
   * @param {?ReactComponent} child React child component.
   * @param {!string} name String name of key path to child.
   */
  function flattenSingleChildIntoContext(traverseContext, child, name) {
    // We found a component instance.
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
  
  /**
   * Flattens children that are typically specified as `props.children`. Any null
   * children will not be included in the resulting object.
   * @return {!object} flattened children keyed by name.
   */
  function flattenChildren(children) {
    if (children == null) {
      return children;
    }
    var result = {};
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
    return result;
  }
  
  module.exports = flattenChildren;

});

;/*!/node_modules/react/lib/ReactMultiChild.js*/
define('common:node_modules/react/lib/ReactMultiChild', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMultiChild
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactComponentEnvironment = require('common:node_modules/react/lib/ReactComponentEnvironment');
  var ReactMultiChildUpdateTypes = require('common:node_modules/react/lib/ReactMultiChildUpdateTypes');
  
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  var ReactReconciler = require('common:node_modules/react/lib/ReactReconciler');
  var ReactChildReconciler = require('common:node_modules/react/lib/ReactChildReconciler');
  
  var flattenChildren = require('common:node_modules/react/lib/flattenChildren');
  
  /**
   * Updating children of a component may trigger recursive updates. The depth is
   * used to batch recursive updates to render markup more efficiently.
   *
   * @type {number}
   * @private
   */
  var updateDepth = 0;
  
  /**
   * Queue of update configuration objects.
   *
   * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
   *
   * @type {array<object>}
   * @private
   */
  var updateQueue = [];
  
  /**
   * Queue of markup to be rendered.
   *
   * @type {array<string>}
   * @private
   */
  var markupQueue = [];
  
  /**
   * Enqueues markup to be rendered and inserted at a supplied index.
   *
   * @param {string} parentID ID of the parent component.
   * @param {string} markup Markup that renders into an element.
   * @param {number} toIndex Destination index.
   * @private
   */
  function enqueueInsertMarkup(parentID, markup, toIndex) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
      markupIndex: markupQueue.push(markup) - 1,
      content: null,
      fromIndex: null,
      toIndex: toIndex
    });
  }
  
  /**
   * Enqueues moving an existing element to another index.
   *
   * @param {string} parentID ID of the parent component.
   * @param {number} fromIndex Source index of the existing element.
   * @param {number} toIndex Destination index of the element.
   * @private
   */
  function enqueueMove(parentID, fromIndex, toIndex) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
      markupIndex: null,
      content: null,
      fromIndex: fromIndex,
      toIndex: toIndex
    });
  }
  
  /**
   * Enqueues removing an element at an index.
   *
   * @param {string} parentID ID of the parent component.
   * @param {number} fromIndex Index of the element to remove.
   * @private
   */
  function enqueueRemove(parentID, fromIndex) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.REMOVE_NODE,
      markupIndex: null,
      content: null,
      fromIndex: fromIndex,
      toIndex: null
    });
  }
  
  /**
   * Enqueues setting the markup of a node.
   *
   * @param {string} parentID ID of the parent component.
   * @param {string} markup Markup that renders into an element.
   * @private
   */
  function enqueueSetMarkup(parentID, markup) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.SET_MARKUP,
      markupIndex: null,
      content: markup,
      fromIndex: null,
      toIndex: null
    });
  }
  
  /**
   * Enqueues setting the text content.
   *
   * @param {string} parentID ID of the parent component.
   * @param {string} textContent Text content to set.
   * @private
   */
  function enqueueTextContent(parentID, textContent) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
      markupIndex: null,
      content: textContent,
      fromIndex: null,
      toIndex: null
    });
  }
  
  /**
   * Processes any enqueued updates.
   *
   * @private
   */
  function processQueue() {
    if (updateQueue.length) {
      ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
      clearQueue();
    }
  }
  
  /**
   * Clears any enqueued updates.
   *
   * @private
   */
  function clearQueue() {
    updateQueue.length = 0;
    markupQueue.length = 0;
  }
  
  /**
   * ReactMultiChild are capable of reconciling multiple children.
   *
   * @class ReactMultiChild
   * @internal
   */
  var ReactMultiChild = {
  
    /**
     * Provides common functionality for components that must reconcile multiple
     * children. This is used by `ReactDOMComponent` to mount, update, and
     * unmount child components.
     *
     * @lends {ReactMultiChild.prototype}
     */
    Mixin: {
  
      _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
        if ('development' !== 'production') {
          if (this._currentElement) {
            try {
              ReactCurrentOwner.current = this._currentElement._owner;
              return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
            } finally {
              ReactCurrentOwner.current = null;
            }
          }
        }
        return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
      },
  
      _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
        var nextChildren;
        if ('development' !== 'production') {
          if (this._currentElement) {
            try {
              ReactCurrentOwner.current = this._currentElement._owner;
              nextChildren = flattenChildren(nextNestedChildrenElements);
            } finally {
              ReactCurrentOwner.current = null;
            }
            return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
          }
        }
        nextChildren = flattenChildren(nextNestedChildrenElements);
        return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
      },
  
      /**
       * Generates a "mount image" for each of the supplied children. In the case
       * of `ReactDOMComponent`, a mount image is a string of markup.
       *
       * @param {?object} nestedChildren Nested child maps.
       * @return {array} An array of mounted representations.
       * @internal
       */
      mountChildren: function (nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;
        var mountImages = [];
        var index = 0;
        for (var name in children) {
          if (children.hasOwnProperty(name)) {
            var child = children[name];
            // Inlined for performance, see `ReactInstanceHandles.createReactID`.
            var rootID = this._rootNodeID + name;
            var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
            child._mountIndex = index++;
            mountImages.push(mountImage);
          }
        }
        return mountImages;
      },
  
      /**
       * Replaces any rendered children with a text content string.
       *
       * @param {string} nextContent String of content.
       * @internal
       */
      updateTextContent: function (nextContent) {
        updateDepth++;
        var errorThrown = true;
        try {
          var prevChildren = this._renderedChildren;
          // Remove any rendered children.
          ReactChildReconciler.unmountChildren(prevChildren);
          // TODO: The setTextContent operation should be enough
          for (var name in prevChildren) {
            if (prevChildren.hasOwnProperty(name)) {
              this._unmountChild(prevChildren[name]);
            }
          }
          // Set new text content.
          this.setTextContent(nextContent);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }
        }
      },
  
      /**
       * Replaces any rendered children with a markup string.
       *
       * @param {string} nextMarkup String of markup.
       * @internal
       */
      updateMarkup: function (nextMarkup) {
        updateDepth++;
        var errorThrown = true;
        try {
          var prevChildren = this._renderedChildren;
          // Remove any rendered children.
          ReactChildReconciler.unmountChildren(prevChildren);
          for (var name in prevChildren) {
            if (prevChildren.hasOwnProperty(name)) {
              this._unmountChildByName(prevChildren[name], name);
            }
          }
          this.setMarkup(nextMarkup);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }
        }
      },
  
      /**
       * Updates the rendered children with new children.
       *
       * @param {?object} nextNestedChildrenElements Nested child element maps.
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      updateChildren: function (nextNestedChildrenElements, transaction, context) {
        updateDepth++;
        var errorThrown = true;
        try {
          this._updateChildren(nextNestedChildrenElements, transaction, context);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }
        }
      },
  
      /**
       * Improve performance by isolating this hot code path from the try/catch
       * block in `updateChildren`.
       *
       * @param {?object} nextNestedChildrenElements Nested child element maps.
       * @param {ReactReconcileTransaction} transaction
       * @final
       * @protected
       */
      _updateChildren: function (nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren;
        var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
        this._renderedChildren = nextChildren;
        if (!nextChildren && !prevChildren) {
          return;
        }
        var name;
        // `nextIndex` will increment for each child in `nextChildren`, but
        // `lastIndex` will be the last index visited in `prevChildren`.
        var lastIndex = 0;
        var nextIndex = 0;
        for (name in nextChildren) {
          if (!nextChildren.hasOwnProperty(name)) {
            continue;
          }
          var prevChild = prevChildren && prevChildren[name];
          var nextChild = nextChildren[name];
          if (prevChild === nextChild) {
            this.moveChild(prevChild, nextIndex, lastIndex);
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            prevChild._mountIndex = nextIndex;
          } else {
            if (prevChild) {
              // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
              lastIndex = Math.max(prevChild._mountIndex, lastIndex);
              this._unmountChild(prevChild);
            }
            // The child must be instantiated before it's mounted.
            this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
          }
          nextIndex++;
        }
        // Remove children that are no longer present.
        for (name in prevChildren) {
          if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
            this._unmountChild(prevChildren[name]);
          }
        }
      },
  
      /**
       * Unmounts all rendered children. This should be used to clean up children
       * when this component is unmounted.
       *
       * @internal
       */
      unmountChildren: function () {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler.unmountChildren(renderedChildren);
        this._renderedChildren = null;
      },
  
      /**
       * Moves a child component to the supplied index.
       *
       * @param {ReactComponent} child Component to move.
       * @param {number} toIndex Destination index of the element.
       * @param {number} lastIndex Last index visited of the siblings of `child`.
       * @protected
       */
      moveChild: function (child, toIndex, lastIndex) {
        // If the index of `child` is less than `lastIndex`, then it needs to
        // be moved. Otherwise, we do not need to move it because a child will be
        // inserted or moved before `child`.
        if (child._mountIndex < lastIndex) {
          enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
        }
      },
  
      /**
       * Creates a child component.
       *
       * @param {ReactComponent} child Component to create.
       * @param {string} mountImage Markup to insert.
       * @protected
       */
      createChild: function (child, mountImage) {
        enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
      },
  
      /**
       * Removes a child component.
       *
       * @param {ReactComponent} child Child to remove.
       * @protected
       */
      removeChild: function (child) {
        enqueueRemove(this._rootNodeID, child._mountIndex);
      },
  
      /**
       * Sets this text content string.
       *
       * @param {string} textContent Text content to set.
       * @protected
       */
      setTextContent: function (textContent) {
        enqueueTextContent(this._rootNodeID, textContent);
      },
  
      /**
       * Sets this markup string.
       *
       * @param {string} markup Markup to set.
       * @protected
       */
      setMarkup: function (markup) {
        enqueueSetMarkup(this._rootNodeID, markup);
      },
  
      /**
       * Mounts a child with the supplied name.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to mount.
       * @param {string} name Name of the child.
       * @param {number} index Index at which to insert the child.
       * @param {ReactReconcileTransaction} transaction
       * @private
       */
      _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
        // Inlined for performance, see `ReactInstanceHandles.createReactID`.
        var rootID = this._rootNodeID + name;
        var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
        child._mountIndex = index;
        this.createChild(child, mountImage);
      },
  
      /**
       * Unmounts a rendered child.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to unmount.
       * @private
       */
      _unmountChild: function (child) {
        this.removeChild(child);
        child._mountIndex = null;
      }
  
    }
  
  };
  
  module.exports = ReactMultiChild;

});

;/*!/node_modules/fbjs/lib/shallowEqual.js*/
define('common:node_modules/fbjs/lib/shallowEqual', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule shallowEqual
   * @typechecks
   * 
   */
  
  'use strict';
  
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  
  /**
   * Performs equality by iterating through keys on an object and returning false
   * when any key has values which are not strictly equal between the arguments.
   * Returns true when the values of all keys are strictly equal.
   */
  function shallowEqual(objA, objB) {
    if (objA === objB) {
      return true;
    }
  
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }
  
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
  
    if (keysA.length !== keysB.length) {
      return false;
    }
  
    // Test for A's keys different from B.
    var bHasOwnProperty = hasOwnProperty.bind(objB);
    for (var i = 0; i < keysA.length; i++) {
      if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
        return false;
      }
    }
  
    return true;
  }
  
  module.exports = shallowEqual;

});

;/*!/node_modules/react/lib/ReactDOMComponent.js*/
define('common:node_modules/react/lib/ReactDOMComponent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMComponent
   * @typechecks static-only
   */
  
  /* global hasOwnProperty:true */
  
  'use strict';
  
  var AutoFocusUtils = require('common:node_modules/react/lib/AutoFocusUtils');
  var CSSPropertyOperations = require('common:node_modules/react/lib/CSSPropertyOperations');
  var DOMProperty = require('common:node_modules/react/lib/DOMProperty');
  var DOMPropertyOperations = require('common:node_modules/react/lib/DOMPropertyOperations');
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var ReactBrowserEventEmitter = require('common:node_modules/react/lib/ReactBrowserEventEmitter');
  var ReactComponentBrowserEnvironment = require('common:node_modules/react/lib/ReactComponentBrowserEnvironment');
  var ReactDOMButton = require('common:node_modules/react/lib/ReactDOMButton');
  var ReactDOMInput = require('common:node_modules/react/lib/ReactDOMInput');
  var ReactDOMOption = require('common:node_modules/react/lib/ReactDOMOption');
  var ReactDOMSelect = require('common:node_modules/react/lib/ReactDOMSelect');
  var ReactDOMTextarea = require('common:node_modules/react/lib/ReactDOMTextarea');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactMultiChild = require('common:node_modules/react/lib/ReactMultiChild');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  var ReactUpdateQueue = require('common:node_modules/react/lib/ReactUpdateQueue');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var canDefineProperty = require('common:node_modules/react/lib/canDefineProperty');
  var escapeTextContentForBrowser = require('common:node_modules/react/lib/escapeTextContentForBrowser');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var isEventSupported = require('common:node_modules/react/lib/isEventSupported');
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  var setInnerHTML = require('common:node_modules/react/lib/setInnerHTML');
  var setTextContent = require('common:node_modules/react/lib/setTextContent');
  var shallowEqual = require('common:node_modules/fbjs/lib/shallowEqual');
  var validateDOMNesting = require('common:node_modules/react/lib/validateDOMNesting');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var deleteListener = ReactBrowserEventEmitter.deleteListener;
  var listenTo = ReactBrowserEventEmitter.listenTo;
  var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
  
  // For quickly matching children type, to test if can be treated as content.
  var CONTENT_TYPES = { 'string': true, 'number': true };
  
  var CHILDREN = keyOf({ children: null });
  var STYLE = keyOf({ style: null });
  var HTML = keyOf({ __html: null });
  
  var ELEMENT_NODE_TYPE = 1;
  
  function getDeclarationErrorAddendum(internalInstance) {
    if (internalInstance) {
      var owner = internalInstance._currentElement._owner || null;
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' This DOM node was rendered by `' + name + '`.';
        }
      }
    }
    return '';
  }
  
  var legacyPropsDescriptor;
  if ('development' !== 'production') {
    legacyPropsDescriptor = {
      props: {
        enumerable: false,
        get: function () {
          var component = this._reactInternalComponent;
          'development' !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
          return component._currentElement.props;
        }
      }
    };
  }
  
  function legacyGetDOMNode() {
    if ('development' !== 'production') {
      var component = this._reactInternalComponent;
      'development' !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    return this;
  }
  
  function legacyIsMounted() {
    var component = this._reactInternalComponent;
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    return !!component;
  }
  
  function legacySetStateEtc() {
    if ('development' !== 'production') {
      var component = this._reactInternalComponent;
      'development' !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
  }
  
  function legacySetProps(partialProps, callback) {
    var component = this._reactInternalComponent;
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    if (!component) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallbackInternal(component, callback);
    }
  }
  
  function legacyReplaceProps(partialProps, callback) {
    var component = this._reactInternalComponent;
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    if (!component) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallbackInternal(component, callback);
    }
  }
  
  function friendlyStringify(obj) {
    if (typeof obj === 'object') {
      if (Array.isArray(obj)) {
        return '[' + obj.map(friendlyStringify).join(', ') + ']';
      } else {
        var pairs = [];
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
            pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
          }
        }
        return '{' + pairs.join(', ') + '}';
      }
    } else if (typeof obj === 'string') {
      return JSON.stringify(obj);
    } else if (typeof obj === 'function') {
      return '[function object]';
    }
    // Differs from JSON.stringify in that undefined becauses undefined and that
    // inf and nan don't become null
    return String(obj);
  }
  
  var styleMutationWarning = {};
  
  function checkAndWarnForMutatedStyle(style1, style2, component) {
    if (style1 == null || style2 == null) {
      return;
    }
    if (shallowEqual(style1, style2)) {
      return;
    }
  
    var componentName = component._tag;
    var owner = component._currentElement._owner;
    var ownerName;
    if (owner) {
      ownerName = owner.getName();
    }
  
    var hash = ownerName + '|' + componentName;
  
    if (styleMutationWarning.hasOwnProperty(hash)) {
      return;
    }
  
    styleMutationWarning[hash] = true;
  
    'development' !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
  }
  
  /**
   * @param {object} component
   * @param {?object} props
   */
  function assertValidProps(component, props) {
    if (!props) {
      return;
    }
    // Note the use of `==` which checks for null or undefined.
    if ('development' !== 'production') {
      if (voidElementTags[component._tag]) {
        'development' !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
      }
    }
    if (props.dangerouslySetInnerHTML != null) {
      !(props.children == null) ? 'development' !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
      !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? 'development' !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
    }
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
      'development' !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
    }
    !(props.style == null || typeof props.style === 'object') ? 'development' !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
  }
  
  function enqueuePutListener(id, registrationName, listener, transaction) {
    if ('development' !== 'production') {
      // IE8 has no API for event capturing and the `onScroll` event doesn't
      // bubble.
      'development' !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
    }
    var container = ReactMount.findReactContainerForID(id);
    if (container) {
      var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
      listenTo(registrationName, doc);
    }
    transaction.getReactMountReady().enqueue(putListener, {
      id: id,
      registrationName: registrationName,
      listener: listener
    });
  }
  
  function putListener() {
    var listenerToPut = this;
    ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
  }
  
  // There are so many media events, it makes sense to just
  // maintain a list rather than create a `trapBubbledEvent` for each
  var mediaEvents = {
    topAbort: 'abort',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTimeUpdate: 'timeupdate',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting'
  };
  
  function trapBubbledEventsLocal() {
    var inst = this;
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    !inst._rootNodeID ? 'development' !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
    var node = ReactMount.getNode(inst._rootNodeID);
    !node ? 'development' !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
  
    switch (inst._tag) {
      case 'iframe':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
        break;
      case 'video':
      case 'audio':
  
        inst._wrapperState.listeners = [];
        // create listener for each media event
        for (var event in mediaEvents) {
          if (mediaEvents.hasOwnProperty(event)) {
            inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
          }
        }
  
        break;
      case 'img':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
        break;
      case 'form':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
        break;
    }
  }
  
  function mountReadyInputWrapper() {
    ReactDOMInput.mountReadyWrapper(this);
  }
  
  function postUpdateSelectWrapper() {
    ReactDOMSelect.postUpdateWrapper(this);
  }
  
  // For HTML, certain tags should omit their close tag. We keep a whitelist for
  // those special cased tags.
  
  var omittedCloseTags = {
    'area': true,
    'base': true,
    'br': true,
    'col': true,
    'embed': true,
    'hr': true,
    'img': true,
    'input': true,
    'keygen': true,
    'link': true,
    'meta': true,
    'param': true,
    'source': true,
    'track': true,
    'wbr': true
  };
  
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
  var newlineEatingTags = {
    'listing': true,
    'pre': true,
    'textarea': true
  };
  
  // For HTML, certain tags cannot have children. This has the same purpose as
  // `omittedCloseTags` except that `menuitem` should still have its closing tag.
  
  var voidElementTags = assign({
    'menuitem': true
  }, omittedCloseTags);
  
  // We accept any tag to be rendered but since this gets injected into arbitrary
  // HTML, we want to make sure that it's a safe tag.
  // http://www.w3.org/TR/REC-xml/#NT-Name
  
  var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
  var validatedTagCache = {};
  var hasOwnProperty = ({}).hasOwnProperty;
  
  function validateDangerousTag(tag) {
    if (!hasOwnProperty.call(validatedTagCache, tag)) {
      !VALID_TAG_REGEX.test(tag) ? 'development' !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
      validatedTagCache[tag] = true;
    }
  }
  
  function processChildContextDev(context, inst) {
    // Pass down our tag name to child components for validation purposes
    context = assign({}, context);
    var info = context[validateDOMNesting.ancestorInfoContextKey];
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
    return context;
  }
  
  function isCustomComponent(tagName, props) {
    return tagName.indexOf('-') >= 0 || props.is != null;
  }
  
  /**
   * Creates a new React class that is idempotent and capable of containing other
   * React components. It accepts event listeners and DOM properties that are
   * valid according to `DOMProperty`.
   *
   *  - Event listeners: `onClick`, `onMouseDown`, etc.
   *  - DOM properties: `className`, `name`, `title`, etc.
   *
   * The `style` property functions differently from the DOM API. It accepts an
   * object mapping of style properties to values.
   *
   * @constructor ReactDOMComponent
   * @extends ReactMultiChild
   */
  function ReactDOMComponent(tag) {
    validateDangerousTag(tag);
    this._tag = tag.toLowerCase();
    this._renderedChildren = null;
    this._previousStyle = null;
    this._previousStyleCopy = null;
    this._rootNodeID = null;
    this._wrapperState = null;
    this._topLevelWrapper = null;
    this._nodeWithLegacyProperties = null;
    if ('development' !== 'production') {
      this._unprocessedContextDev = null;
      this._processedContextDev = null;
    }
  }
  
  ReactDOMComponent.displayName = 'ReactDOMComponent';
  
  ReactDOMComponent.Mixin = {
  
    construct: function (element) {
      this._currentElement = element;
    },
  
    /**
     * Generates root tag markup then recurses. This method has side effects and
     * is not idempotent.
     *
     * @internal
     * @param {string} rootID The root DOM ID for this node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} context
     * @return {string} The computed markup.
     */
    mountComponent: function (rootID, transaction, context) {
      this._rootNodeID = rootID;
  
      var props = this._currentElement.props;
  
      switch (this._tag) {
        case 'iframe':
        case 'img':
        case 'form':
        case 'video':
        case 'audio':
          this._wrapperState = {
            listeners: null
          };
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'button':
          props = ReactDOMButton.getNativeProps(this, props, context);
          break;
        case 'input':
          ReactDOMInput.mountWrapper(this, props, context);
          props = ReactDOMInput.getNativeProps(this, props, context);
          break;
        case 'option':
          ReactDOMOption.mountWrapper(this, props, context);
          props = ReactDOMOption.getNativeProps(this, props, context);
          break;
        case 'select':
          ReactDOMSelect.mountWrapper(this, props, context);
          props = ReactDOMSelect.getNativeProps(this, props, context);
          context = ReactDOMSelect.processChildContext(this, props, context);
          break;
        case 'textarea':
          ReactDOMTextarea.mountWrapper(this, props, context);
          props = ReactDOMTextarea.getNativeProps(this, props, context);
          break;
      }
  
      assertValidProps(this, props);
      if ('development' !== 'production') {
        if (context[validateDOMNesting.ancestorInfoContextKey]) {
          validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
        }
      }
  
      if ('development' !== 'production') {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
        context = this._processedContextDev;
      }
  
      var mountImage;
      if (transaction.useCreateElement) {
        var ownerDocument = context[ReactMount.ownerDocumentContextKey];
        var el = ownerDocument.createElement(this._currentElement.type);
        DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
        // Populate node cache
        ReactMount.getID(el);
        this._updateDOMProperties({}, props, transaction, el);
        this._createInitialChildren(transaction, props, context, el);
        mountImage = el;
      } else {
        var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
        var tagContent = this._createContentMarkup(transaction, props, context);
        if (!tagContent && omittedCloseTags[this._tag]) {
          mountImage = tagOpen + '/>';
        } else {
          mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
        }
      }
  
      switch (this._tag) {
        case 'input':
          transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
        // falls through
        case 'button':
        case 'select':
        case 'textarea':
          if (props.autoFocus) {
            transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
          }
          break;
      }
  
      return mountImage;
    },
  
    /**
     * Creates markup for the open tag and all attributes.
     *
     * This method has side effects because events get registered.
     *
     * Iterating over object properties is faster than iterating over arrays.
     * @see http://jsperf.com/obj-vs-arr-iteration
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} props
     * @return {string} Markup of opening tag.
     */
    _createOpenTagMarkupAndPutListeners: function (transaction, props) {
      var ret = '<' + this._currentElement.type;
  
      for (var propKey in props) {
        if (!props.hasOwnProperty(propKey)) {
          continue;
        }
        var propValue = props[propKey];
        if (propValue == null) {
          continue;
        }
        if (registrationNameModules.hasOwnProperty(propKey)) {
          if (propValue) {
            enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
          }
        } else {
          if (propKey === STYLE) {
            if (propValue) {
              if ('development' !== 'production') {
                // See `_updateDOMProperties`. style block
                this._previousStyle = propValue;
              }
              propValue = this._previousStyleCopy = assign({}, props.style);
            }
            propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
          }
          var markup = null;
          if (this._tag != null && isCustomComponent(this._tag, props)) {
            if (propKey !== CHILDREN) {
              markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
            }
          } else {
            markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
          }
          if (markup) {
            ret += ' ' + markup;
          }
        }
      }
  
      // For static pages, no need to put React ID and checksum. Saves lots of
      // bytes.
      if (transaction.renderToStaticMarkup) {
        return ret;
      }
  
      var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
      return ret + ' ' + markupForID;
    },
  
    /**
     * Creates markup for the content between the tags.
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} props
     * @param {object} context
     * @return {string} Content markup.
     */
    _createContentMarkup: function (transaction, props, context) {
      var ret = '';
  
      // Intentional use of != to avoid catching zero/false.
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          ret = innerHTML.__html;
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          // TODO: Validate that text is allowed as a child of this node
          ret = escapeTextContentForBrowser(contentToUse);
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          ret = mountImages.join('');
        }
      }
      if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
        // text/html ignores the first character in these tags if it's a newline
        // Prefer to break application/xml over text/html (for now) by adding
        // a newline specifically to get eaten by the parser. (Alternately for
        // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
        // \r is normalized out by HTMLTextAreaElement#value.)
        // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
        // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
        // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
        // See: Parsing of "textarea" "listing" and "pre" elements
        //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
        return '\n' + ret;
      } else {
        return ret;
      }
    },
  
    _createInitialChildren: function (transaction, props, context, el) {
      // Intentional use of != to avoid catching zero/false.
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          setInnerHTML(el, innerHTML.__html);
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          // TODO: Validate that text is allowed as a child of this node
          setTextContent(el, contentToUse);
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          for (var i = 0; i < mountImages.length; i++) {
            el.appendChild(mountImages[i]);
          }
        }
      }
    },
  
    /**
     * Receives a next element and updates the component.
     *
     * @internal
     * @param {ReactElement} nextElement
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} context
     */
    receiveComponent: function (nextElement, transaction, context) {
      var prevElement = this._currentElement;
      this._currentElement = nextElement;
      this.updateComponent(transaction, prevElement, nextElement, context);
    },
  
    /**
     * Updates a native DOM component after it has already been allocated and
     * attached to the DOM. Reconciles the root DOM node, then recurses.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevElement
     * @param {ReactElement} nextElement
     * @internal
     * @overridable
     */
    updateComponent: function (transaction, prevElement, nextElement, context) {
      var lastProps = prevElement.props;
      var nextProps = this._currentElement.props;
  
      switch (this._tag) {
        case 'button':
          lastProps = ReactDOMButton.getNativeProps(this, lastProps);
          nextProps = ReactDOMButton.getNativeProps(this, nextProps);
          break;
        case 'input':
          ReactDOMInput.updateWrapper(this);
          lastProps = ReactDOMInput.getNativeProps(this, lastProps);
          nextProps = ReactDOMInput.getNativeProps(this, nextProps);
          break;
        case 'option':
          lastProps = ReactDOMOption.getNativeProps(this, lastProps);
          nextProps = ReactDOMOption.getNativeProps(this, nextProps);
          break;
        case 'select':
          lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
          nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
          break;
        case 'textarea':
          ReactDOMTextarea.updateWrapper(this);
          lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
          nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
          break;
      }
  
      if ('development' !== 'production') {
        // If the context is reference-equal to the old one, pass down the same
        // processed object so the update bailout in ReactReconciler behaves
        // correctly (and identically in dev and prod). See #5005.
        if (this._unprocessedContextDev !== context) {
          this._unprocessedContextDev = context;
          this._processedContextDev = processChildContextDev(context, this);
        }
        context = this._processedContextDev;
      }
  
      assertValidProps(this, nextProps);
      this._updateDOMProperties(lastProps, nextProps, transaction, null);
      this._updateDOMChildren(lastProps, nextProps, transaction, context);
  
      if (!canDefineProperty && this._nodeWithLegacyProperties) {
        this._nodeWithLegacyProperties.props = nextProps;
      }
  
      if (this._tag === 'select') {
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
      }
    },
  
    /**
     * Reconciles the properties by detecting differences in property values and
     * updating the DOM as necessary. This function is probably the single most
     * critical path for performance optimization.
     *
     * TODO: Benchmark whether checking for changed values in memory actually
     *       improves performance (especially statically positioned elements).
     * TODO: Benchmark the effects of putting this at the top since 99% of props
     *       do not change for a given reconciliation.
     * TODO: Benchmark areas that can be improved with caching.
     *
     * @private
     * @param {object} lastProps
     * @param {object} nextProps
     * @param {ReactReconcileTransaction} transaction
     * @param {?DOMElement} node
     */
    _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
      var propKey;
      var styleName;
      var styleUpdates;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = this._previousStyleCopy;
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          this._previousStyleCopy = null;
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (lastProps[propKey]) {
            // Only call deleteListener if there was a listener previously or
            // else willDeleteListener gets called when there wasn't actually a
            // listener (e.g., onClick={null})
            deleteListener(this._rootNodeID, propKey);
          }
        } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
          if (!node) {
            node = ReactMount.getNode(this._rootNodeID);
          }
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
          continue;
        }
        if (propKey === STYLE) {
          if (nextProp) {
            if ('development' !== 'production') {
              checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
              this._previousStyle = nextProp;
            }
            nextProp = this._previousStyleCopy = assign({}, nextProp);
          } else {
            this._previousStyleCopy = null;
          }
          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = '';
              }
            }
            // Update styles that changed since `lastProp`.
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            styleUpdates = nextProp;
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp) {
            enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
          } else if (lastProp) {
            deleteListener(this._rootNodeID, propKey);
          }
        } else if (isCustomComponent(this._tag, nextProps)) {
          if (!node) {
            node = ReactMount.getNode(this._rootNodeID);
          }
          if (propKey === CHILDREN) {
            nextProp = null;
          }
          DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
        } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
          if (!node) {
            node = ReactMount.getNode(this._rootNodeID);
          }
          // If we're updating to null or undefined, we should remove the property
          // from the DOM node instead of inadvertantly setting to a string. This
          // brings us in line with the same behavior we have on initial render.
          if (nextProp != null) {
            DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
          } else {
            DOMPropertyOperations.deleteValueForProperty(node, propKey);
          }
        }
      }
      if (styleUpdates) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        CSSPropertyOperations.setValueForStyles(node, styleUpdates);
      }
    },
  
    /**
     * Reconciles the children with the various properties that affect the
     * children content.
     *
     * @param {object} lastProps
     * @param {object} nextProps
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     */
    _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
      var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
      var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
  
      var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
      var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
  
      // Note the use of `!=` which checks for null or undefined.
      var lastChildren = lastContent != null ? null : lastProps.children;
      var nextChildren = nextContent != null ? null : nextProps.children;
  
      // If we're switching from children to content/html or vice versa, remove
      // the old content
      var lastHasContentOrHtml = lastContent != null || lastHtml != null;
      var nextHasContentOrHtml = nextContent != null || nextHtml != null;
      if (lastChildren != null && nextChildren == null) {
        this.updateChildren(null, transaction, context);
      } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
        this.updateTextContent('');
      }
  
      if (nextContent != null) {
        if (lastContent !== nextContent) {
          this.updateTextContent('' + nextContent);
        }
      } else if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          this.updateMarkup('' + nextHtml);
        }
      } else if (nextChildren != null) {
        this.updateChildren(nextChildren, transaction, context);
      }
    },
  
    /**
     * Destroys all event registrations for this instance. Does not remove from
     * the DOM. That must be done by the parent.
     *
     * @internal
     */
    unmountComponent: function () {
      switch (this._tag) {
        case 'iframe':
        case 'img':
        case 'form':
        case 'video':
        case 'audio':
          var listeners = this._wrapperState.listeners;
          if (listeners) {
            for (var i = 0; i < listeners.length; i++) {
              listeners[i].remove();
            }
          }
          break;
        case 'input':
          ReactDOMInput.unmountWrapper(this);
          break;
        case 'html':
        case 'head':
        case 'body':
          /**
           * Components like <html> <head> and <body> can't be removed or added
           * easily in a cross-browser way, however it's valuable to be able to
           * take advantage of React's reconciliation for styling and <title>
           * management. So we just document it and throw in dangerous cases.
           */
          !false ? 'development' !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
          break;
      }
  
      this.unmountChildren();
      ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
      ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._wrapperState = null;
      if (this._nodeWithLegacyProperties) {
        var node = this._nodeWithLegacyProperties;
        node._reactInternalComponent = null;
        this._nodeWithLegacyProperties = null;
      }
    },
  
    getPublicInstance: function () {
      if (!this._nodeWithLegacyProperties) {
        var node = ReactMount.getNode(this._rootNodeID);
  
        node._reactInternalComponent = this;
        node.getDOMNode = legacyGetDOMNode;
        node.isMounted = legacyIsMounted;
        node.setState = legacySetStateEtc;
        node.replaceState = legacySetStateEtc;
        node.forceUpdate = legacySetStateEtc;
        node.setProps = legacySetProps;
        node.replaceProps = legacyReplaceProps;
  
        if ('development' !== 'production') {
          if (canDefineProperty) {
            Object.defineProperties(node, legacyPropsDescriptor);
          } else {
            // updateComponent will update this property on subsequent renders
            node.props = this._currentElement.props;
          }
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
  
        this._nodeWithLegacyProperties = node;
      }
      return this._nodeWithLegacyProperties;
    }
  
  };
  
  ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent'
  });
  
  assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
  
  module.exports = ReactDOMComponent;

});

;/*!/node_modules/fbjs/lib/EventListener.js*/
define('common:node_modules/fbjs/lib/EventListener', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * @providesModule EventListener
   * @typechecks
   */
  
  'use strict';
  
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  
  /**
   * Upstream version of event listener. Does not take into account specific
   * nature of platform.
   */
  var EventListener = {
    /**
     * Listen to DOM events during the bubble phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    listen: function (target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, false);
        return {
          remove: function () {
            target.removeEventListener(eventType, callback, false);
          }
        };
      } else if (target.attachEvent) {
        target.attachEvent('on' + eventType, callback);
        return {
          remove: function () {
            target.detachEvent('on' + eventType, callback);
          }
        };
      }
    },
  
    /**
     * Listen to DOM events during the capture phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    capture: function (target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, true);
        return {
          remove: function () {
            target.removeEventListener(eventType, callback, true);
          }
        };
      } else {
        if ('development' !== 'production') {
          console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
        }
        return {
          remove: emptyFunction
        };
      }
    },
  
    registerDefault: function () {}
  };
  
  module.exports = EventListener;

});

;/*!/node_modules/fbjs/lib/getUnboundedScrollPosition.js*/
define('common:node_modules/fbjs/lib/getUnboundedScrollPosition', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getUnboundedScrollPosition
   * @typechecks
   */
  
  'use strict';
  
  /**
   * Gets the scroll position of the supplied element or window.
   *
   * The return values are unbounded, unlike `getScrollPosition`. This means they
   * may be negative or exceed the element boundaries (which is possible using
   * inertial scrolling).
   *
   * @param {DOMWindow|DOMElement} scrollable
   * @return {object} Map with `x` and `y` keys.
   */
  function getUnboundedScrollPosition(scrollable) {
    if (scrollable === window) {
      return {
        x: window.pageXOffset || document.documentElement.scrollLeft,
        y: window.pageYOffset || document.documentElement.scrollTop
      };
    }
    return {
      x: scrollable.scrollLeft,
      y: scrollable.scrollTop
    };
  }
  
  module.exports = getUnboundedScrollPosition;

});

;/*!/node_modules/react/lib/ReactEventListener.js*/
define('common:node_modules/react/lib/ReactEventListener', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEventListener
   * @typechecks static-only
   */
  
  'use strict';
  
  var EventListener = require('common:node_modules/fbjs/lib/EventListener');
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  var ReactInstanceHandles = require('common:node_modules/react/lib/ReactInstanceHandles');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var getEventTarget = require('common:node_modules/react/lib/getEventTarget');
  var getUnboundedScrollPosition = require('common:node_modules/fbjs/lib/getUnboundedScrollPosition');
  
  var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
  
  /**
   * Finds the parent React component of `node`.
   *
   * @param {*} node
   * @return {?DOMEventTarget} Parent container, or `null` if the specified node
   *                           is not nested.
   */
  function findParent(node) {
    // TODO: It may be a good idea to cache this to prevent unnecessary DOM
    // traversal, but caching is difficult to do correctly without using a
    // mutation observer to listen for all DOM changes.
    var nodeID = ReactMount.getID(node);
    var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
    var container = ReactMount.findReactContainerForID(rootID);
    var parent = ReactMount.getFirstReactDOM(container);
    return parent;
  }
  
  // Used to store ancestor hierarchy in top level callback
  function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
    this.topLevelType = topLevelType;
    this.nativeEvent = nativeEvent;
    this.ancestors = [];
  }
  assign(TopLevelCallbackBookKeeping.prototype, {
    destructor: function () {
      this.topLevelType = null;
      this.nativeEvent = null;
      this.ancestors.length = 0;
    }
  });
  PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
  
  function handleTopLevelImpl(bookKeeping) {
    // TODO: Re-enable event.path handling
    //
    // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
    //   // New browsers have a path attribute on native events
    //   handleTopLevelWithPath(bookKeeping);
    // } else {
    //   // Legacy browsers don't have a path attribute on native events
    //   handleTopLevelWithoutPath(bookKeeping);
    // }
  
    void handleTopLevelWithPath; // temporarily unused
    handleTopLevelWithoutPath(bookKeeping);
  }
  
  // Legacy browsers don't have a path attribute on native events
  function handleTopLevelWithoutPath(bookKeeping) {
    var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
  
    // Loop through the hierarchy, in case there's any nested components.
    // It's important that we build the array of ancestors before calling any
    // event handlers, because event handlers can modify the DOM, leading to
    // inconsistencies with ReactMount's node cache. See #1105.
    var ancestor = topLevelTarget;
    while (ancestor) {
      bookKeeping.ancestors.push(ancestor);
      ancestor = findParent(ancestor);
    }
  
    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
      topLevelTarget = bookKeeping.ancestors[i];
      var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
    }
  }
  
  // New browsers have a path attribute on native events
  function handleTopLevelWithPath(bookKeeping) {
    var path = bookKeeping.nativeEvent.path;
    var currentNativeTarget = path[0];
    var eventsFired = 0;
    for (var i = 0; i < path.length; i++) {
      var currentPathElement = path[i];
      if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
        currentNativeTarget = path[i + 1];
      }
      // TODO: slow
      var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
      if (reactParent === currentPathElement) {
        var currentPathElementID = ReactMount.getID(currentPathElement);
        var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
        bookKeeping.ancestors.push(currentPathElement);
  
        var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
        eventsFired++;
        ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
  
        // Jump to the root of this React render tree
        while (currentPathElementID !== newRootID) {
          i++;
          currentPathElement = path[i];
          currentPathElementID = ReactMount.getID(currentPathElement);
        }
      }
    }
    if (eventsFired === 0) {
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
    }
  }
  
  function scrollValueMonitor(cb) {
    var scrollPosition = getUnboundedScrollPosition(window);
    cb(scrollPosition);
  }
  
  var ReactEventListener = {
    _enabled: true,
    _handleTopLevel: null,
  
    WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
  
    setHandleTopLevel: function (handleTopLevel) {
      ReactEventListener._handleTopLevel = handleTopLevel;
    },
  
    setEnabled: function (enabled) {
      ReactEventListener._enabled = !!enabled;
    },
  
    isEnabled: function () {
      return ReactEventListener._enabled;
    },
  
    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} handle Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },
  
    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} handle Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },
  
    monitorScrollValue: function (refresh) {
      var callback = scrollValueMonitor.bind(null, refresh);
      EventListener.listen(window, 'scroll', callback);
    },
  
    dispatchEvent: function (topLevelType, nativeEvent) {
      if (!ReactEventListener._enabled) {
        return;
      }
  
      var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
      } finally {
        TopLevelCallbackBookKeeping.release(bookKeeping);
      }
    }
  };
  
  module.exports = ReactEventListener;

});

;/*!/node_modules/react/lib/ReactNoopUpdateQueue.js*/
define('common:node_modules/react/lib/ReactNoopUpdateQueue', function(require, exports, module) {

  /**
   * Copyright 2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactNoopUpdateQueue
   */
  
  'use strict';
  
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  function warnTDZ(publicInstance, callerName) {
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
    }
  }
  
  /**
   * This is the abstract API for an update queue.
   */
  var ReactNoopUpdateQueue = {
  
    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function (publicInstance) {
      return false;
    },
  
    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @internal
     */
    enqueueCallback: function (publicInstance, callback) {},
  
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
    enqueueForceUpdate: function (publicInstance) {
      warnTDZ(publicInstance, 'forceUpdate');
    },
  
    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @internal
     */
    enqueueReplaceState: function (publicInstance, completeState) {
      warnTDZ(publicInstance, 'replaceState');
    },
  
    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @internal
     */
    enqueueSetState: function (publicInstance, partialState) {
      warnTDZ(publicInstance, 'setState');
    },
  
    /**
     * Sets a subset of the props.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialProps Subset of the next props.
     * @internal
     */
    enqueueSetProps: function (publicInstance, partialProps) {
      warnTDZ(publicInstance, 'setProps');
    },
  
    /**
     * Replaces all of the props.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} props New props.
     * @internal
     */
    enqueueReplaceProps: function (publicInstance, props) {
      warnTDZ(publicInstance, 'replaceProps');
    }
  
  };
  
  module.exports = ReactNoopUpdateQueue;

});

;/*!/node_modules/react/lib/ReactComponent.js*/
define('common:node_modules/react/lib/ReactComponent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponent
   */
  
  'use strict';
  
  var ReactNoopUpdateQueue = require('common:node_modules/react/lib/ReactNoopUpdateQueue');
  
  var canDefineProperty = require('common:node_modules/react/lib/canDefineProperty');
  var emptyObject = require('common:node_modules/fbjs/lib/emptyObject');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * Base class helpers for the updating state of a component.
   */
  function ReactComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    // We initialize the default updater but the real one gets injected by the
    // renderer.
    this.updater = updater || ReactNoopUpdateQueue;
  }
  
  ReactComponent.prototype.isReactComponent = {};
  
  /**
   * Sets a subset of the state. Always use this to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * When a function is provided to setState, it will be called at some point in
   * the future (not synchronously). It will be called with the up to date
   * component arguments (state, props, context). These values can be different
   * from this.* because your function may be called after receiveProps but before
   * shouldComponentUpdate, and this new state, props, and context will not yet be
   * assigned to this.
   *
   * @param {object|function} partialState Next partial state or function to
   *        produce next partial state to be merged with current state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  ReactComponent.prototype.setState = function (partialState, callback) {
    !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? 'development' !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
    if ('development' !== 'production') {
      'development' !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
    }
    this.updater.enqueueSetState(this, partialState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  };
  
  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  ReactComponent.prototype.forceUpdate = function (callback) {
    this.updater.enqueueForceUpdate(this);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  };
  
  /**
   * Deprecated APIs. These APIs used to exist on classic React classes but since
   * we would like to deprecate them, we're not going to move them over to this
   * modern base class. Instead, we define a getter that warns if it's accessed.
   */
  if ('development' !== 'production') {
    var deprecatedAPIs = {
      getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
      replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
      setProps: ['setProps', 'Instead, call render again at the top level.']
    };
    var defineDeprecationWarning = function (methodName, info) {
      if (canDefineProperty) {
        Object.defineProperty(ReactComponent.prototype, methodName, {
          get: function () {
            'development' !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
            return undefined;
          }
        });
      }
    };
    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }
  
  module.exports = ReactComponent;

});

;/*!/node_modules/react/lib/ReactClass.js*/
define('common:node_modules/react/lib/ReactClass', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactClass
   */
  
  'use strict';
  
  var ReactComponent = require('common:node_modules/react/lib/ReactComponent');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactPropTypeLocations = require('common:node_modules/react/lib/ReactPropTypeLocations');
  var ReactPropTypeLocationNames = require('common:node_modules/react/lib/ReactPropTypeLocationNames');
  var ReactNoopUpdateQueue = require('common:node_modules/react/lib/ReactNoopUpdateQueue');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var emptyObject = require('common:node_modules/fbjs/lib/emptyObject');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var keyMirror = require('common:node_modules/fbjs/lib/keyMirror');
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  var MIXINS_KEY = keyOf({ mixins: null });
  
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */
  var SpecPolicy = keyMirror({
    /**
     * These methods may be defined only once by the class specification or mixin.
     */
    DEFINE_ONCE: null,
    /**
     * These methods may be defined by both the class specification and mixins.
     * Subsequent definitions will be chained. These methods must return void.
     */
    DEFINE_MANY: null,
    /**
     * These methods are overriding the base class.
     */
    OVERRIDE_BASE: null,
    /**
     * These methods are similar to DEFINE_MANY, except we assume they return
     * objects. We try to merge the keys of the return values of all the mixed in
     * functions. If there is a key conflict we throw.
     */
    DEFINE_MANY_MERGED: null
  });
  
  var injectedMixins = [];
  
  var warnedSetProps = false;
  function warnSetProps() {
    if (!warnedSetProps) {
      warnedSetProps = true;
      'development' !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
    }
  }
  
  /**
   * Composite components are higher-level components that compose other composite
   * or native components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
  
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: SpecPolicy.DEFINE_MANY,
  
    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: SpecPolicy.DEFINE_MANY,
  
    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: SpecPolicy.DEFINE_MANY,
  
    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: SpecPolicy.DEFINE_MANY,
  
    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: SpecPolicy.DEFINE_MANY,
  
    // ==== Definition methods ====
  
    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
  
    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
  
    /**
     * @return {object}
     * @optional
     */
    getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
  
    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @nosideeffects
     * @required
     */
    render: SpecPolicy.DEFINE_ONCE,
  
    // ==== Delegate methods ====
  
    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: SpecPolicy.DEFINE_MANY,
  
    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: SpecPolicy.DEFINE_MANY,
  
    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
  
    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
  
    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: SpecPolicy.DEFINE_MANY,
  
    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: SpecPolicy.DEFINE_MANY,
  
    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: SpecPolicy.DEFINE_MANY,
  
    // ==== Advanced methods ====
  
    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: SpecPolicy.OVERRIDE_BASE
  
  };
  
  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function (Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function (Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function (Constructor, childContextTypes) {
      if ('development' !== 'production') {
        validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
      }
      Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
    },
    contextTypes: function (Constructor, contextTypes) {
      if ('development' !== 'production') {
        validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
      }
      Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function (Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function (Constructor, propTypes) {
      if ('development' !== 'production') {
        validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
      }
      Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
    },
    statics: function (Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function () {} };
  
  // noop
  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an invariant so components
        // don't show up in prod but not in __DEV__
        'development' !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
      }
    }
  }
  
  function validateMethodOverride(proto, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
  
    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? 'development' !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
    }
  
    // Disallow defining methods more than once unless explicitly allowed.
    if (proto.hasOwnProperty(name)) {
      !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? 'development' !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
    }
  }
  
  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classses.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      return;
    }
  
    !(typeof spec !== 'function') ? 'development' !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
    !!ReactElement.isValidElement(spec) ? 'development' !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  
    var proto = Constructor.prototype;
  
    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }
  
    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }
  
      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }
  
      var property = spec[name];
      validateMethodOverride(proto, name);
  
      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isAlreadyDefined = proto.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
  
        if (shouldAutoBind) {
          if (!proto.__reactAutoBindMap) {
            proto.__reactAutoBindMap = {};
          }
          proto.__reactAutoBindMap[name] = property;
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];
  
            // These cases should already be caught by validateMethodOverride.
            !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? 'development' !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
  
            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if ('development' !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }
  
  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }
  
      var isReserved = (name in RESERVED_SPEC_KEYS);
      !!isReserved ? 'development' !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
  
      var isInherited = (name in Constructor);
      !!isInherited ? 'development' !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
      Constructor[name] = property;
    }
  }
  
  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    !(one && two && typeof one === 'object' && typeof two === 'object') ? 'development' !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
  
    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        !(one[key] === undefined) ? 'development' !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
        one[key] = two[key];
      }
    }
    return one;
  }
  
  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }
  
  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }
  
  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if ('development' !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      /* eslint-disable block-scoped-var, no-undef */
      boundMethod.bind = function (newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
  
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          'development' !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
        } else if (!args.length) {
          'development' !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
        /* eslint-enable */
      };
    }
    return boundMethod;
  }
  
  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    for (var autoBindKey in component.__reactAutoBindMap) {
      if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        var method = component.__reactAutoBindMap[autoBindKey];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }
  }
  
  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
  
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function (newState, callback) {
      this.updater.enqueueReplaceState(this, newState);
      if (callback) {
        this.updater.enqueueCallback(this, callback);
      }
    },
  
    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function () {
      return this.updater.isMounted(this);
    },
  
    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     * @deprecated
     */
    setProps: function (partialProps, callback) {
      if ('development' !== 'production') {
        warnSetProps();
      }
      this.updater.enqueueSetProps(this, partialProps);
      if (callback) {
        this.updater.enqueueCallback(this, callback);
      }
    },
  
    /**
     * Replace all the props.
     *
     * @param {object} newProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     * @deprecated
     */
    replaceProps: function (newProps, callback) {
      if ('development' !== 'production') {
        warnSetProps();
      }
      this.updater.enqueueReplaceProps(this, newProps);
      if (callback) {
        this.updater.enqueueCallback(this, callback);
      }
    }
  };
  
  var ReactClassComponent = function () {};
  assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
  
  /**
   * Module for creating composite components.
   *
   * @class ReactClass
   */
  var ReactClass = {
  
    /**
     * Creates a composite component class given a class specification.
     *
     * @param {object} spec Class specification (which must define `render`).
     * @return {function} Component constructor function.
     * @public
     */
    createClass: function (spec) {
      var Constructor = function (props, context, updater) {
        // This constructor is overridden by mocks. The argument is used
        // by mocks to assert on what gets mounted.
  
        if ('development' !== 'production') {
          'development' !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
        }
  
        // Wire up auto-binding
        if (this.__reactAutoBindMap) {
          bindAutoBindMethods(this);
        }
  
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
  
        this.state = null;
  
        // ReactClasses doesn't have constructors. Instead, they use the
        // getInitialState and componentWillMount methods for initialization.
  
        var initialState = this.getInitialState ? this.getInitialState() : null;
        if ('development' !== 'production') {
          // We allow auto-mocks to proceed as if they're returning null.
          if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
            // This is probably bad practice. Consider warning here and
            // deprecating this convenience.
            initialState = null;
          }
        }
        !(typeof initialState === 'object' && !Array.isArray(initialState)) ? 'development' !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
  
        this.state = initialState;
      };
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
  
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
  
      mixSpecIntoComponent(Constructor, spec);
  
      // Initialize the defaultProps property after all mixins have been merged.
      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }
  
      if ('development' !== 'production') {
        // This is a tag to indicate that the use of these method names is ok,
        // since it's used with createClass. If it's not, then it's likely a
        // mistake so we'll warn you to use the static property, property
        // initializer or constructor respectively.
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }
        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }
  
      !Constructor.prototype.render ? 'development' !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
  
      if ('development' !== 'production') {
        'development' !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
        'development' !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
      }
  
      // Reduce time spent doing lookups by setting these on the prototype.
      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }
  
      return Constructor;
    },
  
    injection: {
      injectMixin: function (mixin) {
        injectedMixins.push(mixin);
      }
    }
  
  };
  
  module.exports = ReactClass;

});

;/*!/node_modules/react/lib/ReactInjection.js*/
define('common:node_modules/react/lib/ReactInjection', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInjection
   */
  
  'use strict';
  
  var DOMProperty = require('common:node_modules/react/lib/DOMProperty');
  var EventPluginHub = require('common:node_modules/react/lib/EventPluginHub');
  var ReactComponentEnvironment = require('common:node_modules/react/lib/ReactComponentEnvironment');
  var ReactClass = require('common:node_modules/react/lib/ReactClass');
  var ReactEmptyComponent = require('common:node_modules/react/lib/ReactEmptyComponent');
  var ReactBrowserEventEmitter = require('common:node_modules/react/lib/ReactBrowserEventEmitter');
  var ReactNativeComponent = require('common:node_modules/react/lib/ReactNativeComponent');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  var ReactRootIndex = require('common:node_modules/react/lib/ReactRootIndex');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var ReactInjection = {
    Component: ReactComponentEnvironment.injection,
    Class: ReactClass.injection,
    DOMProperty: DOMProperty.injection,
    EmptyComponent: ReactEmptyComponent.injection,
    EventPluginHub: EventPluginHub.injection,
    EventEmitter: ReactBrowserEventEmitter.injection,
    NativeComponent: ReactNativeComponent.injection,
    Perf: ReactPerf.injection,
    RootIndex: ReactRootIndex.injection,
    Updates: ReactUpdates.injection
  };
  
  module.exports = ReactInjection;

});

;/*!/node_modules/react/lib/getNodeForCharacterOffset.js*/
define('common:node_modules/react/lib/getNodeForCharacterOffset', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getNodeForCharacterOffset
   */
  
  'use strict';
  
  /**
   * Given any node return the first leaf node without children.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {DOMElement|DOMTextNode}
   */
  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  }
  
  /**
   * Get the next sibling within a container. This will walk up the
   * DOM if a node's siblings have been exhausted.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {?DOMElement|DOMTextNode}
   */
  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  }
  
  /**
   * Get object describing the nodes which contain characters at offset.
   *
   * @param {DOMElement|DOMTextNode} root
   * @param {number} offset
   * @return {?object}
   */
  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;
  
    while (node) {
      if (node.nodeType === 3) {
        nodeEnd = nodeStart + node.textContent.length;
  
        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }
  
        nodeStart = nodeEnd;
      }
  
      node = getLeafNode(getSiblingNode(node));
    }
  }
  
  module.exports = getNodeForCharacterOffset;

});

;/*!/node_modules/react/lib/ReactDOMSelection.js*/
define('common:node_modules/react/lib/ReactDOMSelection', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMSelection
   */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var getNodeForCharacterOffset = require('common:node_modules/react/lib/getNodeForCharacterOffset');
  var getTextContentAccessor = require('common:node_modules/react/lib/getTextContentAccessor');
  
  /**
   * While `isCollapsed` is available on the Selection object and `collapsed`
   * is available on the Range object, IE11 sometimes gets them wrong.
   * If the anchor/focus nodes and offsets are the same, the range is collapsed.
   */
  function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
    return anchorNode === focusNode && anchorOffset === focusOffset;
  }
  
  /**
   * Get the appropriate anchor and focus node/offset pairs for IE.
   *
   * The catch here is that IE's selection API doesn't provide information
   * about whether the selection is forward or backward, so we have to
   * behave as though it's always forward.
   *
   * IE text differs from modern selection in that it behaves as though
   * block elements end with a new line. This means character offsets will
   * differ between the two APIs.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getIEOffsets(node) {
    var selection = document.selection;
    var selectedRange = selection.createRange();
    var selectedLength = selectedRange.text.length;
  
    // Duplicate selection so we can move range without breaking user selection.
    var fromStart = selectedRange.duplicate();
    fromStart.moveToElementText(node);
    fromStart.setEndPoint('EndToStart', selectedRange);
  
    var startOffset = fromStart.text.length;
    var endOffset = startOffset + selectedLength;
  
    return {
      start: startOffset,
      end: endOffset
    };
  }
  
  /**
   * @param {DOMElement} node
   * @return {?object}
   */
  function getModernOffsets(node) {
    var selection = window.getSelection && window.getSelection();
  
    if (!selection || selection.rangeCount === 0) {
      return null;
    }
  
    var anchorNode = selection.anchorNode;
    var anchorOffset = selection.anchorOffset;
    var focusNode = selection.focusNode;
    var focusOffset = selection.focusOffset;
  
    var currentRange = selection.getRangeAt(0);
  
    // In Firefox, range.startContainer and range.endContainer can be "anonymous
    // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
    // divs do not seem to expose properties, triggering a "Permission denied
    // error" if any of its properties are accessed. The only seemingly possible
    // way to avoid erroring is to access a property that typically works for
    // non-anonymous divs and catch any error that may otherwise arise. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
    try {
      /* eslint-disable no-unused-expressions */
      currentRange.startContainer.nodeType;
      currentRange.endContainer.nodeType;
      /* eslint-enable no-unused-expressions */
    } catch (e) {
      return null;
    }
  
    // If the node and offset values are the same, the selection is collapsed.
    // `Selection.isCollapsed` is available natively, but IE sometimes gets
    // this value wrong.
    var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
  
    var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
  
    var tempRange = currentRange.cloneRange();
    tempRange.selectNodeContents(node);
    tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
  
    var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
  
    var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
    var end = start + rangeLength;
  
    // Detect whether the selection is backward.
    var detectionRange = document.createRange();
    detectionRange.setStart(anchorNode, anchorOffset);
    detectionRange.setEnd(focusNode, focusOffset);
    var isBackward = detectionRange.collapsed;
  
    return {
      start: isBackward ? end : start,
      end: isBackward ? start : end
    };
  }
  
  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setIEOffsets(node, offsets) {
    var range = document.selection.createRange().duplicate();
    var start, end;
  
    if (typeof offsets.end === 'undefined') {
      start = offsets.start;
      end = start;
    } else if (offsets.start > offsets.end) {
      start = offsets.end;
      end = offsets.start;
    } else {
      start = offsets.start;
      end = offsets.end;
    }
  
    range.moveToElementText(node);
    range.moveStart('character', start);
    range.setEndPoint('EndToStart', range);
    range.moveEnd('character', end - start);
    range.select();
  }
  
  /**
   * In modern non-IE browsers, we can support both forward and backward
   * selections.
   *
   * Note: IE10+ supports the Selection object, but it does not support
   * the `extend` method, which means that even in modern IE, it's not possible
   * to programatically create a backward selection. Thus, for all IE
   * versions, we use the old IE API to create our selections.
   *
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setModernOffsets(node, offsets) {
    if (!window.getSelection) {
      return;
    }
  
    var selection = window.getSelection();
    var length = node[getTextContentAccessor()].length;
    var start = Math.min(offsets.start, length);
    var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
  
    // IE 11 uses modern selection, but doesn't support the extend method.
    // Flip backward selections, so we can set with a single range.
    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }
  
    var startMarker = getNodeForCharacterOffset(node, start);
    var endMarker = getNodeForCharacterOffset(node, end);
  
    if (startMarker && endMarker) {
      var range = document.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();
  
      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }
  
  var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
  
  var ReactDOMSelection = {
    /**
     * @param {DOMElement} node
     */
    getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
  
    /**
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
  };
  
  module.exports = ReactDOMSelection;

});

;/*!/node_modules/fbjs/lib/getActiveElement.js*/
define('common:node_modules/fbjs/lib/getActiveElement', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getActiveElement
   * @typechecks
   */
  
  /* eslint-disable fb-www/typeof-undefined */
  
  /**
   * Same as document.activeElement but wraps in a try-catch block. In IE it is
   * not safe to call document.activeElement if there is nothing focused.
   *
   * The activeElement will be null only if the document or document body is not
   * yet defined.
   */
  'use strict';
  
  function getActiveElement() /*?DOMElement*/{
    if (typeof document === 'undefined') {
      return null;
    }
    try {
      return document.activeElement || document.body;
    } catch (e) {
      return document.body;
    }
  }
  
  module.exports = getActiveElement;

});

;/*!/node_modules/react/lib/ReactInputSelection.js*/
define('common:node_modules/react/lib/ReactInputSelection', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInputSelection
   */
  
  'use strict';
  
  var ReactDOMSelection = require('common:node_modules/react/lib/ReactDOMSelection');
  
  var containsNode = require('common:node_modules/fbjs/lib/containsNode');
  var focusNode = require('common:node_modules/fbjs/lib/focusNode');
  var getActiveElement = require('common:node_modules/fbjs/lib/getActiveElement');
  
  function isInDocument(node) {
    return containsNode(document.documentElement, node);
  }
  
  /**
   * @ReactInputSelection: React input selection module. Based on Selection.js,
   * but modified to be suitable for react and has a couple of bug fixes (doesn't
   * assume buttons have range selections allowed).
   * Input selection module for React.
   */
  var ReactInputSelection = {
  
    hasSelectionCapabilities: function (elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
    },
  
    getSelectionInformation: function () {
      var focusedElem = getActiveElement();
      return {
        focusedElem: focusedElem,
        selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
      };
    },
  
    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */
    restoreSelection: function (priorSelectionInformation) {
      var curFocusedElem = getActiveElement();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
          ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
        }
        focusNode(priorFocusedElem);
      }
    },
  
    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */
    getSelection: function (input) {
      var selection;
  
      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
        // IE8 input.
        var range = document.selection.createRange();
        // There can only be one selection per document in IE, so it must
        // be in our element.
        if (range.parentElement() === input) {
          selection = {
            start: -range.moveStart('character', -input.value.length),
            end: -range.moveEnd('character', -input.value.length)
          };
        }
      } else {
        // Content editable or old IE textarea.
        selection = ReactDOMSelection.getOffsets(input);
      }
  
      return selection || { start: 0, end: 0 };
    },
  
    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */
    setSelection: function (input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (typeof end === 'undefined') {
        end = start;
      }
  
      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
        var range = input.createTextRange();
        range.collapse(true);
        range.moveStart('character', start);
        range.moveEnd('character', end - start);
        range.select();
      } else {
        ReactDOMSelection.setOffsets(input, offsets);
      }
    }
  };
  
  module.exports = ReactInputSelection;

});

;/*!/node_modules/react/lib/ReactReconcileTransaction.js*/
define('common:node_modules/react/lib/ReactReconcileTransaction', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactReconcileTransaction
   * @typechecks static-only
   */
  
  'use strict';
  
  var CallbackQueue = require('common:node_modules/react/lib/CallbackQueue');
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  var ReactBrowserEventEmitter = require('common:node_modules/react/lib/ReactBrowserEventEmitter');
  var ReactDOMFeatureFlags = require('common:node_modules/react/lib/ReactDOMFeatureFlags');
  var ReactInputSelection = require('common:node_modules/react/lib/ReactInputSelection');
  var Transaction = require('common:node_modules/react/lib/Transaction');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  
  /**
   * Ensures that, when possible, the selection range (currently selected text
   * input) is not disturbed by performing the transaction.
   */
  var SELECTION_RESTORATION = {
    /**
     * @return {Selection} Selection information.
     */
    initialize: ReactInputSelection.getSelectionInformation,
    /**
     * @param {Selection} sel Selection information returned from `initialize`.
     */
    close: ReactInputSelection.restoreSelection
  };
  
  /**
   * Suppresses events (blur/focus) that could be inadvertently dispatched due to
   * high level DOM manipulations (like temporarily removing a text input from the
   * DOM).
   */
  var EVENT_SUPPRESSION = {
    /**
     * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
     * the reconciliation.
     */
    initialize: function () {
      var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
      ReactBrowserEventEmitter.setEnabled(false);
      return currentlyEnabled;
    },
  
    /**
     * @param {boolean} previouslyEnabled Enabled status of
     *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
     *   restores the previous value.
     */
    close: function (previouslyEnabled) {
      ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
    }
  };
  
  /**
   * Provides a queue for collecting `componentDidMount` and
   * `componentDidUpdate` callbacks during the the transaction.
   */
  var ON_DOM_READY_QUEUEING = {
    /**
     * Initializes the internal `onDOMReady` queue.
     */
    initialize: function () {
      this.reactMountReady.reset();
    },
  
    /**
     * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
     */
    close: function () {
      this.reactMountReady.notifyAll();
    }
  };
  
  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
  
  /**
   * Currently:
   * - The order that these are listed in the transaction is critical:
   * - Suppresses events.
   * - Restores selection range.
   *
   * Future:
   * - Restore document/overflow scroll positions that were unintentionally
   *   modified via DOM insertions above the top viewport boundary.
   * - Implement/integrate with customized constraint based layout system and keep
   *   track of which dimensions must be remeasured.
   *
   * @class ReactReconcileTransaction
   */
  function ReactReconcileTransaction(forceHTML) {
    this.reinitializeTransaction();
    // Only server-side rendering really needs this option (see
    // `ReactServerRendering`), but server-side uses
    // `ReactServerRenderingTransaction` instead. This option is here so that it's
    // accessible and defaults to false when `ReactDOMComponent` and
    // `ReactTextComponent` checks it in `mountComponent`.`
    this.renderToStaticMarkup = false;
    this.reactMountReady = CallbackQueue.getPooled(null);
    this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
  }
  
  var Mixin = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array<object>} List of operation wrap procedures.
     *   TODO: convert to array<TransactionWrapper>
     */
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    },
  
    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function () {
      return this.reactMountReady;
    },
  
    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be reused.
     */
    destructor: function () {
      CallbackQueue.release(this.reactMountReady);
      this.reactMountReady = null;
    }
  };
  
  assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
  
  PooledClass.addPoolingTo(ReactReconcileTransaction);
  
  module.exports = ReactReconcileTransaction;

});

;/*!/node_modules/react/lib/SelectEventPlugin.js*/
define('common:node_modules/react/lib/SelectEventPlugin', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SelectEventPlugin
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var EventPropagators = require('common:node_modules/react/lib/EventPropagators');
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  var ReactInputSelection = require('common:node_modules/react/lib/ReactInputSelection');
  var SyntheticEvent = require('common:node_modules/react/lib/SyntheticEvent');
  
  var getActiveElement = require('common:node_modules/fbjs/lib/getActiveElement');
  var isTextInputElement = require('common:node_modules/react/lib/isTextInputElement');
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  var shallowEqual = require('common:node_modules/fbjs/lib/shallowEqual');
  
  var topLevelTypes = EventConstants.topLevelTypes;
  
  var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
  
  var eventTypes = {
    select: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSelect: null }),
        captured: keyOf({ onSelectCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
    }
  };
  
  var activeElement = null;
  var activeElementID = null;
  var lastSelection = null;
  var mouseDown = false;
  
  // Track whether a listener exists for this plugin. If none exist, we do
  // not extract events.
  var hasListener = false;
  var ON_SELECT_KEY = keyOf({ onSelect: null });
  
  /**
   * Get an object which is a unique representation of the current selection.
   *
   * The return value will not be consistent across nodes or browsers, but
   * two identical selections on the same node will return identical objects.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getSelection(node) {
    if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else if (window.getSelection) {
      var selection = window.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    } else if (document.selection) {
      var range = document.selection.createRange();
      return {
        parentElement: range.parentElement(),
        text: range.text,
        top: range.boundingTop,
        left: range.boundingLeft
      };
    }
  }
  
  /**
   * Poll selection to see whether it's changed.
   *
   * @param {object} nativeEvent
   * @return {?SyntheticEvent}
   */
  function constructSelectEvent(nativeEvent, nativeEventTarget) {
    // Ensure we have the right element, and that the user is not dragging a
    // selection (this matches native `select` event behavior). In HTML5, select
    // fires only on input and textarea thus if there's no focused element we
    // won't dispatch.
    if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
      return null;
    }
  
    // Only fire when selection has actually changed.
    var currentSelection = getSelection(activeElement);
    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
      lastSelection = currentSelection;
  
      var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
  
      syntheticEvent.type = 'select';
      syntheticEvent.target = activeElement;
  
      EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
  
      return syntheticEvent;
    }
  
    return null;
  }
  
  /**
   * This plugin creates an `onSelect` event that normalizes select events
   * across form elements.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - contentEditable
   *
   * This differs from native browser implementations in the following ways:
   * - Fires on contentEditable fields as well as inputs.
   * - Fires for collapsed selection.
   * - Fires after user input.
   */
  var SelectEventPlugin = {
  
    eventTypes: eventTypes,
  
    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      if (!hasListener) {
        return null;
      }
  
      switch (topLevelType) {
        // Track the input node that has focus.
        case topLevelTypes.topFocus:
          if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
            activeElement = topLevelTarget;
            activeElementID = topLevelTargetID;
            lastSelection = null;
          }
          break;
        case topLevelTypes.topBlur:
          activeElement = null;
          activeElementID = null;
          lastSelection = null;
          break;
  
        // Don't fire the event while the user is dragging. This matches the
        // semantics of the native select event.
        case topLevelTypes.topMouseDown:
          mouseDown = true;
          break;
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topMouseUp:
          mouseDown = false;
          return constructSelectEvent(nativeEvent, nativeEventTarget);
  
        // Chrome and IE fire non-standard event when selection is changed (and
        // sometimes when it hasn't). IE's event fires out of order with respect
        // to key and input events on deletion, so we discard it.
        //
        // Firefox doesn't support selectionchange, so check selection status
        // after each key entry. The selection changes after keydown and before
        // keyup, but we check on keydown as well in the case of holding down a
        // key, when multiple keydown events are fired but only one keyup is.
        // This is also our approach for IE handling, for the reason above.
        case topLevelTypes.topSelectionChange:
          if (skipSelectionChangeEvent) {
            break;
          }
        // falls through
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          return constructSelectEvent(nativeEvent, nativeEventTarget);
      }
  
      return null;
    },
  
    didPutListener: function (id, registrationName, listener) {
      if (registrationName === ON_SELECT_KEY) {
        hasListener = true;
      }
    }
  };
  
  module.exports = SelectEventPlugin;

});

;/*!/node_modules/react/lib/ServerReactRootIndex.js*/
define('common:node_modules/react/lib/ServerReactRootIndex', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ServerReactRootIndex
   * @typechecks
   */
  
  'use strict';
  
  /**
   * Size of the reactRoot ID space. We generate random numbers for React root
   * IDs and if there's a collision the events and DOM update system will
   * get confused. In the future we need a way to generate GUIDs but for
   * now this will work on a smaller scale.
   */
  var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
  
  var ServerReactRootIndex = {
    createReactRootIndex: function () {
      return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
    }
  };
  
  module.exports = ServerReactRootIndex;

});

;/*!/node_modules/react/lib/SyntheticClipboardEvent.js*/
define('common:node_modules/react/lib/SyntheticClipboardEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticClipboardEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticEvent = require('common:node_modules/react/lib/SyntheticEvent');
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/clipboard-apis/
   */
  var ClipboardEventInterface = {
    clipboardData: function (event) {
      return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
  
  module.exports = SyntheticClipboardEvent;

});

;/*!/node_modules/react/lib/SyntheticFocusEvent.js*/
define('common:node_modules/react/lib/SyntheticFocusEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticFocusEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticUIEvent = require('common:node_modules/react/lib/SyntheticUIEvent');
  
  /**
   * @interface FocusEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var FocusEventInterface = {
    relatedTarget: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
  
  module.exports = SyntheticFocusEvent;

});

;/*!/node_modules/react/lib/getEventCharCode.js*/
define('common:node_modules/react/lib/getEventCharCode', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventCharCode
   * @typechecks static-only
   */
  
  'use strict';
  
  /**
   * `charCode` represents the actual "character code" and is safe to use with
   * `String.fromCharCode`. As such, only keys that correspond to printable
   * characters produce a valid `charCode`, the only exception to this is Enter.
   * The Tab-key is considered non-printable and does not have a `charCode`,
   * presumably because it does not produce a tab-character in browsers.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {number} Normalized `charCode` property.
   */
  function getEventCharCode(nativeEvent) {
    var charCode;
    var keyCode = nativeEvent.keyCode;
  
    if ('charCode' in nativeEvent) {
      charCode = nativeEvent.charCode;
  
      // FF does not set `charCode` for the Enter-key, check against `keyCode`.
      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      // IE8 does not implement `charCode`, but `keyCode` has the correct value.
      charCode = keyCode;
    }
  
    // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
    // Must not discard the (non-)printable Enter-key.
    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }
  
    return 0;
  }
  
  module.exports = getEventCharCode;

});

;/*!/node_modules/react/lib/getEventKey.js*/
define('common:node_modules/react/lib/getEventKey', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventKey
   * @typechecks static-only
   */
  
  'use strict';
  
  var getEventCharCode = require('common:node_modules/react/lib/getEventCharCode');
  
  /**
   * Normalization of deprecated HTML5 `key` values
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var normalizeKey = {
    'Esc': 'Escape',
    'Spacebar': ' ',
    'Left': 'ArrowLeft',
    'Up': 'ArrowUp',
    'Right': 'ArrowRight',
    'Down': 'ArrowDown',
    'Del': 'Delete',
    'Win': 'OS',
    'Menu': 'ContextMenu',
    'Apps': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'MozPrintableKey': 'Unidentified'
  };
  
  /**
   * Translation from legacy `keyCode` to HTML5 `key`
   * Only special keys supported, all others depend on keyboard layout or browser
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var translateToKey = {
    8: 'Backspace',
    9: 'Tab',
    12: 'Clear',
    13: 'Enter',
    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    19: 'Pause',
    20: 'CapsLock',
    27: 'Escape',
    32: ' ',
    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',
    37: 'ArrowLeft',
    38: 'ArrowUp',
    39: 'ArrowRight',
    40: 'ArrowDown',
    45: 'Insert',
    46: 'Delete',
    112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
    118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
    144: 'NumLock',
    145: 'ScrollLock',
    224: 'Meta'
  };
  
  /**
   * @param {object} nativeEvent Native browser event.
   * @return {string} Normalized `key` property.
   */
  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      // Normalize inconsistent values reported by browsers due to
      // implementations of a working draft specification.
  
      // FireFox implements `key` but returns `MozPrintableKey` for all
      // printable characters (normalized to `Unidentified`), ignore it.
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
      if (key !== 'Unidentified') {
        return key;
      }
    }
  
    // Browser does not implement `key`, polyfill as much of it as we can.
    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode(nativeEvent);
  
      // The enter-key is technically both printable and non-printable and can
      // thus be captured by `keypress`, no other non-printable key should.
      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }
    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      // While user keyboard layout determines the actual meaning of each
      // `keyCode` value, almost all function keys have a universal value.
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }
    return '';
  }
  
  module.exports = getEventKey;

});

;/*!/node_modules/react/lib/SyntheticKeyboardEvent.js*/
define('common:node_modules/react/lib/SyntheticKeyboardEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticKeyboardEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticUIEvent = require('common:node_modules/react/lib/SyntheticUIEvent');
  
  var getEventCharCode = require('common:node_modules/react/lib/getEventCharCode');
  var getEventKey = require('common:node_modules/react/lib/getEventKey');
  var getEventModifierState = require('common:node_modules/react/lib/getEventModifierState');
  
  /**
   * @interface KeyboardEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var KeyboardEventInterface = {
    key: getEventKey,
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: getEventModifierState,
    // Legacy Interface
    charCode: function (event) {
      // `charCode` is the result of a KeyPress event and represents the value of
      // the actual printable character.
  
      // KeyPress is deprecated, but its replacement is not yet final and not
      // implemented in any major browser. Only KeyPress has charCode.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      return 0;
    },
    keyCode: function (event) {
      // `keyCode` is the result of a KeyDown/Up event and represents the value of
      // physical keyboard key.
  
      // The actual meaning of the value depends on the users' keyboard layout
      // which cannot be detected. Assuming that it is a US keyboard layout
      // provides a surprisingly accurate mapping for US and European users.
      // Due to this, it is left to the user to implement at this time.
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    },
    which: function (event) {
      // `which` is an alias for either `keyCode` or `charCode` depending on the
      // type of the event.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
  
  module.exports = SyntheticKeyboardEvent;

});

;/*!/node_modules/react/lib/SyntheticDragEvent.js*/
define('common:node_modules/react/lib/SyntheticDragEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticDragEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticMouseEvent = require('common:node_modules/react/lib/SyntheticMouseEvent');
  
  /**
   * @interface DragEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var DragEventInterface = {
    dataTransfer: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
  
  module.exports = SyntheticDragEvent;

});

;/*!/node_modules/react/lib/SyntheticTouchEvent.js*/
define('common:node_modules/react/lib/SyntheticTouchEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticTouchEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticUIEvent = require('common:node_modules/react/lib/SyntheticUIEvent');
  
  var getEventModifierState = require('common:node_modules/react/lib/getEventModifierState');
  
  /**
   * @interface TouchEvent
   * @see http://www.w3.org/TR/touch-events/
   */
  var TouchEventInterface = {
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: getEventModifierState
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
  
  module.exports = SyntheticTouchEvent;

});

;/*!/node_modules/react/lib/SyntheticWheelEvent.js*/
define('common:node_modules/react/lib/SyntheticWheelEvent', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticWheelEvent
   * @typechecks static-only
   */
  
  'use strict';
  
  var SyntheticMouseEvent = require('common:node_modules/react/lib/SyntheticMouseEvent');
  
  /**
   * @interface WheelEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var WheelEventInterface = {
    deltaX: function (event) {
      return 'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
    },
    deltaY: function (event) {
      return 'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0;
    },
    deltaZ: null,
  
    // Browsers without "deltaMode" is reporting in raw wheel delta where one
    // notch on the scroll is always +/- 120, roughly equivalent to pixels.
    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
    deltaMode: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticMouseEvent}
   */
  function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
  
  module.exports = SyntheticWheelEvent;

});

;/*!/node_modules/react/lib/SimpleEventPlugin.js*/
define('common:node_modules/react/lib/SimpleEventPlugin', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SimpleEventPlugin
   */
  
  'use strict';
  
  var EventConstants = require('common:node_modules/react/lib/EventConstants');
  var EventListener = require('common:node_modules/fbjs/lib/EventListener');
  var EventPropagators = require('common:node_modules/react/lib/EventPropagators');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var SyntheticClipboardEvent = require('common:node_modules/react/lib/SyntheticClipboardEvent');
  var SyntheticEvent = require('common:node_modules/react/lib/SyntheticEvent');
  var SyntheticFocusEvent = require('common:node_modules/react/lib/SyntheticFocusEvent');
  var SyntheticKeyboardEvent = require('common:node_modules/react/lib/SyntheticKeyboardEvent');
  var SyntheticMouseEvent = require('common:node_modules/react/lib/SyntheticMouseEvent');
  var SyntheticDragEvent = require('common:node_modules/react/lib/SyntheticDragEvent');
  var SyntheticTouchEvent = require('common:node_modules/react/lib/SyntheticTouchEvent');
  var SyntheticUIEvent = require('common:node_modules/react/lib/SyntheticUIEvent');
  var SyntheticWheelEvent = require('common:node_modules/react/lib/SyntheticWheelEvent');
  
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  var getEventCharCode = require('common:node_modules/react/lib/getEventCharCode');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var keyOf = require('common:node_modules/fbjs/lib/keyOf');
  
  var topLevelTypes = EventConstants.topLevelTypes;
  
  var eventTypes = {
    abort: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onAbort: true }),
        captured: keyOf({ onAbortCapture: true })
      }
    },
    blur: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onBlur: true }),
        captured: keyOf({ onBlurCapture: true })
      }
    },
    canPlay: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCanPlay: true }),
        captured: keyOf({ onCanPlayCapture: true })
      }
    },
    canPlayThrough: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCanPlayThrough: true }),
        captured: keyOf({ onCanPlayThroughCapture: true })
      }
    },
    click: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onClick: true }),
        captured: keyOf({ onClickCapture: true })
      }
    },
    contextMenu: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onContextMenu: true }),
        captured: keyOf({ onContextMenuCapture: true })
      }
    },
    copy: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCopy: true }),
        captured: keyOf({ onCopyCapture: true })
      }
    },
    cut: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCut: true }),
        captured: keyOf({ onCutCapture: true })
      }
    },
    doubleClick: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDoubleClick: true }),
        captured: keyOf({ onDoubleClickCapture: true })
      }
    },
    drag: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDrag: true }),
        captured: keyOf({ onDragCapture: true })
      }
    },
    dragEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragEnd: true }),
        captured: keyOf({ onDragEndCapture: true })
      }
    },
    dragEnter: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragEnter: true }),
        captured: keyOf({ onDragEnterCapture: true })
      }
    },
    dragExit: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragExit: true }),
        captured: keyOf({ onDragExitCapture: true })
      }
    },
    dragLeave: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragLeave: true }),
        captured: keyOf({ onDragLeaveCapture: true })
      }
    },
    dragOver: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragOver: true }),
        captured: keyOf({ onDragOverCapture: true })
      }
    },
    dragStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragStart: true }),
        captured: keyOf({ onDragStartCapture: true })
      }
    },
    drop: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDrop: true }),
        captured: keyOf({ onDropCapture: true })
      }
    },
    durationChange: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDurationChange: true }),
        captured: keyOf({ onDurationChangeCapture: true })
      }
    },
    emptied: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onEmptied: true }),
        captured: keyOf({ onEmptiedCapture: true })
      }
    },
    encrypted: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onEncrypted: true }),
        captured: keyOf({ onEncryptedCapture: true })
      }
    },
    ended: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onEnded: true }),
        captured: keyOf({ onEndedCapture: true })
      }
    },
    error: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onError: true }),
        captured: keyOf({ onErrorCapture: true })
      }
    },
    focus: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onFocus: true }),
        captured: keyOf({ onFocusCapture: true })
      }
    },
    input: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onInput: true }),
        captured: keyOf({ onInputCapture: true })
      }
    },
    keyDown: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onKeyDown: true }),
        captured: keyOf({ onKeyDownCapture: true })
      }
    },
    keyPress: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onKeyPress: true }),
        captured: keyOf({ onKeyPressCapture: true })
      }
    },
    keyUp: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onKeyUp: true }),
        captured: keyOf({ onKeyUpCapture: true })
      }
    },
    load: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoad: true }),
        captured: keyOf({ onLoadCapture: true })
      }
    },
    loadedData: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoadedData: true }),
        captured: keyOf({ onLoadedDataCapture: true })
      }
    },
    loadedMetadata: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoadedMetadata: true }),
        captured: keyOf({ onLoadedMetadataCapture: true })
      }
    },
    loadStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoadStart: true }),
        captured: keyOf({ onLoadStartCapture: true })
      }
    },
    // Note: We do not allow listening to mouseOver events. Instead, use the
    // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
    mouseDown: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseDown: true }),
        captured: keyOf({ onMouseDownCapture: true })
      }
    },
    mouseMove: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseMove: true }),
        captured: keyOf({ onMouseMoveCapture: true })
      }
    },
    mouseOut: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseOut: true }),
        captured: keyOf({ onMouseOutCapture: true })
      }
    },
    mouseOver: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseOver: true }),
        captured: keyOf({ onMouseOverCapture: true })
      }
    },
    mouseUp: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseUp: true }),
        captured: keyOf({ onMouseUpCapture: true })
      }
    },
    paste: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPaste: true }),
        captured: keyOf({ onPasteCapture: true })
      }
    },
    pause: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPause: true }),
        captured: keyOf({ onPauseCapture: true })
      }
    },
    play: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPlay: true }),
        captured: keyOf({ onPlayCapture: true })
      }
    },
    playing: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPlaying: true }),
        captured: keyOf({ onPlayingCapture: true })
      }
    },
    progress: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onProgress: true }),
        captured: keyOf({ onProgressCapture: true })
      }
    },
    rateChange: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onRateChange: true }),
        captured: keyOf({ onRateChangeCapture: true })
      }
    },
    reset: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onReset: true }),
        captured: keyOf({ onResetCapture: true })
      }
    },
    scroll: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onScroll: true }),
        captured: keyOf({ onScrollCapture: true })
      }
    },
    seeked: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSeeked: true }),
        captured: keyOf({ onSeekedCapture: true })
      }
    },
    seeking: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSeeking: true }),
        captured: keyOf({ onSeekingCapture: true })
      }
    },
    stalled: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onStalled: true }),
        captured: keyOf({ onStalledCapture: true })
      }
    },
    submit: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSubmit: true }),
        captured: keyOf({ onSubmitCapture: true })
      }
    },
    suspend: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSuspend: true }),
        captured: keyOf({ onSuspendCapture: true })
      }
    },
    timeUpdate: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTimeUpdate: true }),
        captured: keyOf({ onTimeUpdateCapture: true })
      }
    },
    touchCancel: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchCancel: true }),
        captured: keyOf({ onTouchCancelCapture: true })
      }
    },
    touchEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchEnd: true }),
        captured: keyOf({ onTouchEndCapture: true })
      }
    },
    touchMove: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchMove: true }),
        captured: keyOf({ onTouchMoveCapture: true })
      }
    },
    touchStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchStart: true }),
        captured: keyOf({ onTouchStartCapture: true })
      }
    },
    volumeChange: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onVolumeChange: true }),
        captured: keyOf({ onVolumeChangeCapture: true })
      }
    },
    waiting: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onWaiting: true }),
        captured: keyOf({ onWaitingCapture: true })
      }
    },
    wheel: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onWheel: true }),
        captured: keyOf({ onWheelCapture: true })
      }
    }
  };
  
  var topLevelEventsToDispatchConfig = {
    topAbort: eventTypes.abort,
    topBlur: eventTypes.blur,
    topCanPlay: eventTypes.canPlay,
    topCanPlayThrough: eventTypes.canPlayThrough,
    topClick: eventTypes.click,
    topContextMenu: eventTypes.contextMenu,
    topCopy: eventTypes.copy,
    topCut: eventTypes.cut,
    topDoubleClick: eventTypes.doubleClick,
    topDrag: eventTypes.drag,
    topDragEnd: eventTypes.dragEnd,
    topDragEnter: eventTypes.dragEnter,
    topDragExit: eventTypes.dragExit,
    topDragLeave: eventTypes.dragLeave,
    topDragOver: eventTypes.dragOver,
    topDragStart: eventTypes.dragStart,
    topDrop: eventTypes.drop,
    topDurationChange: eventTypes.durationChange,
    topEmptied: eventTypes.emptied,
    topEncrypted: eventTypes.encrypted,
    topEnded: eventTypes.ended,
    topError: eventTypes.error,
    topFocus: eventTypes.focus,
    topInput: eventTypes.input,
    topKeyDown: eventTypes.keyDown,
    topKeyPress: eventTypes.keyPress,
    topKeyUp: eventTypes.keyUp,
    topLoad: eventTypes.load,
    topLoadedData: eventTypes.loadedData,
    topLoadedMetadata: eventTypes.loadedMetadata,
    topLoadStart: eventTypes.loadStart,
    topMouseDown: eventTypes.mouseDown,
    topMouseMove: eventTypes.mouseMove,
    topMouseOut: eventTypes.mouseOut,
    topMouseOver: eventTypes.mouseOver,
    topMouseUp: eventTypes.mouseUp,
    topPaste: eventTypes.paste,
    topPause: eventTypes.pause,
    topPlay: eventTypes.play,
    topPlaying: eventTypes.playing,
    topProgress: eventTypes.progress,
    topRateChange: eventTypes.rateChange,
    topReset: eventTypes.reset,
    topScroll: eventTypes.scroll,
    topSeeked: eventTypes.seeked,
    topSeeking: eventTypes.seeking,
    topStalled: eventTypes.stalled,
    topSubmit: eventTypes.submit,
    topSuspend: eventTypes.suspend,
    topTimeUpdate: eventTypes.timeUpdate,
    topTouchCancel: eventTypes.touchCancel,
    topTouchEnd: eventTypes.touchEnd,
    topTouchMove: eventTypes.touchMove,
    topTouchStart: eventTypes.touchStart,
    topVolumeChange: eventTypes.volumeChange,
    topWaiting: eventTypes.waiting,
    topWheel: eventTypes.wheel
  };
  
  for (var type in topLevelEventsToDispatchConfig) {
    topLevelEventsToDispatchConfig[type].dependencies = [type];
  }
  
  var ON_CLICK_KEY = keyOf({ onClick: null });
  var onClickListeners = {};
  
  var SimpleEventPlugin = {
  
    eventTypes: eventTypes,
  
    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
      if (!dispatchConfig) {
        return null;
      }
      var EventConstructor;
      switch (topLevelType) {
        case topLevelTypes.topAbort:
        case topLevelTypes.topCanPlay:
        case topLevelTypes.topCanPlayThrough:
        case topLevelTypes.topDurationChange:
        case topLevelTypes.topEmptied:
        case topLevelTypes.topEncrypted:
        case topLevelTypes.topEnded:
        case topLevelTypes.topError:
        case topLevelTypes.topInput:
        case topLevelTypes.topLoad:
        case topLevelTypes.topLoadedData:
        case topLevelTypes.topLoadedMetadata:
        case topLevelTypes.topLoadStart:
        case topLevelTypes.topPause:
        case topLevelTypes.topPlay:
        case topLevelTypes.topPlaying:
        case topLevelTypes.topProgress:
        case topLevelTypes.topRateChange:
        case topLevelTypes.topReset:
        case topLevelTypes.topSeeked:
        case topLevelTypes.topSeeking:
        case topLevelTypes.topStalled:
        case topLevelTypes.topSubmit:
        case topLevelTypes.topSuspend:
        case topLevelTypes.topTimeUpdate:
        case topLevelTypes.topVolumeChange:
        case topLevelTypes.topWaiting:
          // HTML Events
          // @see http://www.w3.org/TR/html5/index.html#events-0
          EventConstructor = SyntheticEvent;
          break;
        case topLevelTypes.topKeyPress:
          // FireFox creates a keypress event for function keys too. This removes
          // the unwanted keypress events. Enter is however both printable and
          // non-printable. One would expect Tab to be as well (but it isn't).
          if (getEventCharCode(nativeEvent) === 0) {
            return null;
          }
        /* falls through */
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          EventConstructor = SyntheticKeyboardEvent;
          break;
        case topLevelTypes.topBlur:
        case topLevelTypes.topFocus:
          EventConstructor = SyntheticFocusEvent;
          break;
        case topLevelTypes.topClick:
          // Firefox creates a click event on right mouse clicks. This removes the
          // unwanted click events.
          if (nativeEvent.button === 2) {
            return null;
          }
        /* falls through */
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topDoubleClick:
        case topLevelTypes.topMouseDown:
        case topLevelTypes.topMouseMove:
        case topLevelTypes.topMouseOut:
        case topLevelTypes.topMouseOver:
        case topLevelTypes.topMouseUp:
          EventConstructor = SyntheticMouseEvent;
          break;
        case topLevelTypes.topDrag:
        case topLevelTypes.topDragEnd:
        case topLevelTypes.topDragEnter:
        case topLevelTypes.topDragExit:
        case topLevelTypes.topDragLeave:
        case topLevelTypes.topDragOver:
        case topLevelTypes.topDragStart:
        case topLevelTypes.topDrop:
          EventConstructor = SyntheticDragEvent;
          break;
        case topLevelTypes.topTouchCancel:
        case topLevelTypes.topTouchEnd:
        case topLevelTypes.topTouchMove:
        case topLevelTypes.topTouchStart:
          EventConstructor = SyntheticTouchEvent;
          break;
        case topLevelTypes.topScroll:
          EventConstructor = SyntheticUIEvent;
          break;
        case topLevelTypes.topWheel:
          EventConstructor = SyntheticWheelEvent;
          break;
        case topLevelTypes.topCopy:
        case topLevelTypes.topCut:
        case topLevelTypes.topPaste:
          EventConstructor = SyntheticClipboardEvent;
          break;
      }
      !EventConstructor ? 'development' !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
      var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    },
  
    didPutListener: function (id, registrationName, listener) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      if (registrationName === ON_CLICK_KEY) {
        var node = ReactMount.getNode(id);
        if (!onClickListeners[id]) {
          onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
        }
      }
    },
  
    willDeleteListener: function (id, registrationName) {
      if (registrationName === ON_CLICK_KEY) {
        onClickListeners[id].remove();
        delete onClickListeners[id];
      }
    }
  
  };
  
  module.exports = SimpleEventPlugin;

});

;/*!/node_modules/react/lib/SVGDOMPropertyConfig.js*/
define('common:node_modules/react/lib/SVGDOMPropertyConfig', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SVGDOMPropertyConfig
   */
  
  'use strict';
  
  var DOMProperty = require('common:node_modules/react/lib/DOMProperty');
  
  var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
  
  var NS = {
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace'
  };
  
  var SVGDOMPropertyConfig = {
    Properties: {
      clipPath: MUST_USE_ATTRIBUTE,
      cx: MUST_USE_ATTRIBUTE,
      cy: MUST_USE_ATTRIBUTE,
      d: MUST_USE_ATTRIBUTE,
      dx: MUST_USE_ATTRIBUTE,
      dy: MUST_USE_ATTRIBUTE,
      fill: MUST_USE_ATTRIBUTE,
      fillOpacity: MUST_USE_ATTRIBUTE,
      fontFamily: MUST_USE_ATTRIBUTE,
      fontSize: MUST_USE_ATTRIBUTE,
      fx: MUST_USE_ATTRIBUTE,
      fy: MUST_USE_ATTRIBUTE,
      gradientTransform: MUST_USE_ATTRIBUTE,
      gradientUnits: MUST_USE_ATTRIBUTE,
      markerEnd: MUST_USE_ATTRIBUTE,
      markerMid: MUST_USE_ATTRIBUTE,
      markerStart: MUST_USE_ATTRIBUTE,
      offset: MUST_USE_ATTRIBUTE,
      opacity: MUST_USE_ATTRIBUTE,
      patternContentUnits: MUST_USE_ATTRIBUTE,
      patternUnits: MUST_USE_ATTRIBUTE,
      points: MUST_USE_ATTRIBUTE,
      preserveAspectRatio: MUST_USE_ATTRIBUTE,
      r: MUST_USE_ATTRIBUTE,
      rx: MUST_USE_ATTRIBUTE,
      ry: MUST_USE_ATTRIBUTE,
      spreadMethod: MUST_USE_ATTRIBUTE,
      stopColor: MUST_USE_ATTRIBUTE,
      stopOpacity: MUST_USE_ATTRIBUTE,
      stroke: MUST_USE_ATTRIBUTE,
      strokeDasharray: MUST_USE_ATTRIBUTE,
      strokeLinecap: MUST_USE_ATTRIBUTE,
      strokeOpacity: MUST_USE_ATTRIBUTE,
      strokeWidth: MUST_USE_ATTRIBUTE,
      textAnchor: MUST_USE_ATTRIBUTE,
      transform: MUST_USE_ATTRIBUTE,
      version: MUST_USE_ATTRIBUTE,
      viewBox: MUST_USE_ATTRIBUTE,
      x1: MUST_USE_ATTRIBUTE,
      x2: MUST_USE_ATTRIBUTE,
      x: MUST_USE_ATTRIBUTE,
      xlinkActuate: MUST_USE_ATTRIBUTE,
      xlinkArcrole: MUST_USE_ATTRIBUTE,
      xlinkHref: MUST_USE_ATTRIBUTE,
      xlinkRole: MUST_USE_ATTRIBUTE,
      xlinkShow: MUST_USE_ATTRIBUTE,
      xlinkTitle: MUST_USE_ATTRIBUTE,
      xlinkType: MUST_USE_ATTRIBUTE,
      xmlBase: MUST_USE_ATTRIBUTE,
      xmlLang: MUST_USE_ATTRIBUTE,
      xmlSpace: MUST_USE_ATTRIBUTE,
      y1: MUST_USE_ATTRIBUTE,
      y2: MUST_USE_ATTRIBUTE,
      y: MUST_USE_ATTRIBUTE
    },
    DOMAttributeNamespaces: {
      xlinkActuate: NS.xlink,
      xlinkArcrole: NS.xlink,
      xlinkHref: NS.xlink,
      xlinkRole: NS.xlink,
      xlinkShow: NS.xlink,
      xlinkTitle: NS.xlink,
      xlinkType: NS.xlink,
      xmlBase: NS.xml,
      xmlLang: NS.xml,
      xmlSpace: NS.xml
    },
    DOMAttributeNames: {
      clipPath: 'clip-path',
      fillOpacity: 'fill-opacity',
      fontFamily: 'font-family',
      fontSize: 'font-size',
      gradientTransform: 'gradientTransform',
      gradientUnits: 'gradientUnits',
      markerEnd: 'marker-end',
      markerMid: 'marker-mid',
      markerStart: 'marker-start',
      patternContentUnits: 'patternContentUnits',
      patternUnits: 'patternUnits',
      preserveAspectRatio: 'preserveAspectRatio',
      spreadMethod: 'spreadMethod',
      stopColor: 'stop-color',
      stopOpacity: 'stop-opacity',
      strokeDasharray: 'stroke-dasharray',
      strokeLinecap: 'stroke-linecap',
      strokeOpacity: 'stroke-opacity',
      strokeWidth: 'stroke-width',
      textAnchor: 'text-anchor',
      viewBox: 'viewBox',
      xlinkActuate: 'xlink:actuate',
      xlinkArcrole: 'xlink:arcrole',
      xlinkHref: 'xlink:href',
      xlinkRole: 'xlink:role',
      xlinkShow: 'xlink:show',
      xlinkTitle: 'xlink:title',
      xlinkType: 'xlink:type',
      xmlBase: 'xml:base',
      xmlLang: 'xml:lang',
      xmlSpace: 'xml:space'
    }
  };
  
  module.exports = SVGDOMPropertyConfig;

});

;/*!/node_modules/react/lib/ReactDefaultPerfAnalysis.js*/
define('common:node_modules/react/lib/ReactDefaultPerfAnalysis', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultPerfAnalysis
   */
  
  'use strict';
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  
  // Don't try to save users less than 1.2ms (a number I made up)
  var DONT_CARE_THRESHOLD = 1.2;
  var DOM_OPERATION_TYPES = {
    '_mountImageIntoNode': 'set innerHTML',
    INSERT_MARKUP: 'set innerHTML',
    MOVE_EXISTING: 'move',
    REMOVE_NODE: 'remove',
    SET_MARKUP: 'set innerHTML',
    TEXT_CONTENT: 'set textContent',
    'setValueForProperty': 'update attribute',
    'setValueForAttribute': 'update attribute',
    'deleteValueForProperty': 'remove attribute',
    'setValueForStyles': 'update styles',
    'replaceNodeWithMarkup': 'replace',
    'updateTextContent': 'set textContent'
  };
  
  function getTotalTime(measurements) {
    // TODO: return number of DOM ops? could be misleading.
    // TODO: measure dropped frames after reconcile?
    // TODO: log total time of each reconcile and the top-level component
    // class that triggered it.
    var totalTime = 0;
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      totalTime += measurement.totalTime;
    }
    return totalTime;
  }
  
  function getDOMSummary(measurements) {
    var items = [];
    measurements.forEach(function (measurement) {
      Object.keys(measurement.writes).forEach(function (id) {
        measurement.writes[id].forEach(function (write) {
          items.push({
            id: id,
            type: DOM_OPERATION_TYPES[write.type] || write.type,
            args: write.args
          });
        });
      });
    });
    return items;
  }
  
  function getExclusiveSummary(measurements) {
    var candidates = {};
    var displayName;
  
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
  
      for (var id in allIDs) {
        displayName = measurement.displayNames[id].current;
  
        candidates[displayName] = candidates[displayName] || {
          componentName: displayName,
          inclusive: 0,
          exclusive: 0,
          render: 0,
          count: 0
        };
        if (measurement.render[id]) {
          candidates[displayName].render += measurement.render[id];
        }
        if (measurement.exclusive[id]) {
          candidates[displayName].exclusive += measurement.exclusive[id];
        }
        if (measurement.inclusive[id]) {
          candidates[displayName].inclusive += measurement.inclusive[id];
        }
        if (measurement.counts[id]) {
          candidates[displayName].count += measurement.counts[id];
        }
      }
    }
  
    // Now make a sorted array with the results.
    var arr = [];
    for (displayName in candidates) {
      if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
        arr.push(candidates[displayName]);
      }
    }
  
    arr.sort(function (a, b) {
      return b.exclusive - a.exclusive;
    });
  
    return arr;
  }
  
  function getInclusiveSummary(measurements, onlyClean) {
    var candidates = {};
    var inclusiveKey;
  
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
      var cleanComponents;
  
      if (onlyClean) {
        cleanComponents = getUnchangedComponents(measurement);
      }
  
      for (var id in allIDs) {
        if (onlyClean && !cleanComponents[id]) {
          continue;
        }
  
        var displayName = measurement.displayNames[id];
  
        // Inclusive time is not useful for many components without knowing where
        // they are instantiated. So we aggregate inclusive time with both the
        // owner and current displayName as the key.
        inclusiveKey = displayName.owner + ' > ' + displayName.current;
  
        candidates[inclusiveKey] = candidates[inclusiveKey] || {
          componentName: inclusiveKey,
          time: 0,
          count: 0
        };
  
        if (measurement.inclusive[id]) {
          candidates[inclusiveKey].time += measurement.inclusive[id];
        }
        if (measurement.counts[id]) {
          candidates[inclusiveKey].count += measurement.counts[id];
        }
      }
    }
  
    // Now make a sorted array with the results.
    var arr = [];
    for (inclusiveKey in candidates) {
      if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
        arr.push(candidates[inclusiveKey]);
      }
    }
  
    arr.sort(function (a, b) {
      return b.time - a.time;
    });
  
    return arr;
  }
  
  function getUnchangedComponents(measurement) {
    // For a given reconcile, look at which components did not actually
    // render anything to the DOM and return a mapping of their ID to
    // the amount of time it took to render the entire subtree.
    var cleanComponents = {};
    var dirtyLeafIDs = Object.keys(measurement.writes);
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
  
    for (var id in allIDs) {
      var isDirty = false;
      // For each component that rendered, see if a component that triggered
      // a DOM op is in its subtree.
      for (var i = 0; i < dirtyLeafIDs.length; i++) {
        if (dirtyLeafIDs[i].indexOf(id) === 0) {
          isDirty = true;
          break;
        }
      }
      // check if component newly created
      if (measurement.created[id]) {
        isDirty = true;
      }
      if (!isDirty && measurement.counts[id] > 0) {
        cleanComponents[id] = true;
      }
    }
    return cleanComponents;
  }
  
  var ReactDefaultPerfAnalysis = {
    getExclusiveSummary: getExclusiveSummary,
    getInclusiveSummary: getInclusiveSummary,
    getDOMSummary: getDOMSummary,
    getTotalTime: getTotalTime
  };
  
  module.exports = ReactDefaultPerfAnalysis;

});

;/*!/node_modules/fbjs/lib/performance.js*/
define('common:node_modules/fbjs/lib/performance', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule performance
   * @typechecks
   */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  var performance;
  
  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }
  
  module.exports = performance || {};

});

;/*!/node_modules/fbjs/lib/performanceNow.js*/
define('common:node_modules/fbjs/lib/performanceNow', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule performanceNow
   * @typechecks
   */
  
  'use strict';
  
  var performance = require('common:node_modules/fbjs/lib/performance');
  
  var performanceNow;
  
  /**
   * Detect if we can use `window.performance.now()` and gracefully fallback to
   * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
   * because of Facebook's testing infrastructure.
   */
  if (performance.now) {
    performanceNow = function () {
      return performance.now();
    };
  } else {
    performanceNow = function () {
      return Date.now();
    };
  }
  
  module.exports = performanceNow;

});

;/*!/node_modules/react/lib/ReactDefaultPerf.js*/
define('common:node_modules/react/lib/ReactDefaultPerf', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultPerf
   * @typechecks static-only
   */
  
  'use strict';
  
  var DOMProperty = require('common:node_modules/react/lib/DOMProperty');
  var ReactDefaultPerfAnalysis = require('common:node_modules/react/lib/ReactDefaultPerfAnalysis');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  
  var performanceNow = require('common:node_modules/fbjs/lib/performanceNow');
  
  function roundFloat(val) {
    return Math.floor(val * 100) / 100;
  }
  
  function addValue(obj, key, val) {
    obj[key] = (obj[key] || 0) + val;
  }
  
  var ReactDefaultPerf = {
    _allMeasurements: [], // last item in the list is the current one
    _mountStack: [0],
    _injected: false,
  
    start: function () {
      if (!ReactDefaultPerf._injected) {
        ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
      }
  
      ReactDefaultPerf._allMeasurements.length = 0;
      ReactPerf.enableMeasure = true;
    },
  
    stop: function () {
      ReactPerf.enableMeasure = false;
    },
  
    getLastMeasurements: function () {
      return ReactDefaultPerf._allMeasurements;
    },
  
    printExclusive: function (measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
      console.table(summary.map(function (item) {
        return {
          'Component class name': item.componentName,
          'Total inclusive time (ms)': roundFloat(item.inclusive),
          'Exclusive mount time (ms)': roundFloat(item.exclusive),
          'Exclusive render time (ms)': roundFloat(item.render),
          'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
          'Render time per instance (ms)': roundFloat(item.render / item.count),
          'Instances': item.count
        };
      }));
      // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
      // number.
    },
  
    printInclusive: function (measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
      console.table(summary.map(function (item) {
        return {
          'Owner > component': item.componentName,
          'Inclusive time (ms)': roundFloat(item.time),
          'Instances': item.count
        };
      }));
      console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
    },
  
    getMeasurementsSummaryMap: function (measurements) {
      var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
      return summary.map(function (item) {
        return {
          'Owner > component': item.componentName,
          'Wasted time (ms)': item.time,
          'Instances': item.count
        };
      });
    },
  
    printWasted: function (measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
      console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
    },
  
    printDOM: function (measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
      console.table(summary.map(function (item) {
        var result = {};
        result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
        result.type = item.type;
        result.args = JSON.stringify(item.args);
        return result;
      }));
      console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
    },
  
    _recordWrite: function (id, fnName, totalTime, args) {
      // TODO: totalTime isn't that useful since it doesn't count paints/reflows
      var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
      writes[id] = writes[id] || [];
      writes[id].push({
        type: fnName,
        time: totalTime,
        args: args
      });
    },
  
    measure: function (moduleName, fnName, func) {
      return function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        var totalTime;
        var rv;
        var start;
  
        if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
          // A "measurement" is a set of metrics recorded for each flush. We want
          // to group the metrics for a given flush together so we can look at the
          // components that rendered and the DOM operations that actually
          // happened to determine the amount of "wasted work" performed.
          ReactDefaultPerf._allMeasurements.push({
            exclusive: {},
            inclusive: {},
            render: {},
            counts: {},
            writes: {},
            displayNames: {},
            totalTime: 0,
            created: {}
          });
          start = performanceNow();
          rv = func.apply(this, args);
          ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
          return rv;
        } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
          start = performanceNow();
          rv = func.apply(this, args);
          totalTime = performanceNow() - start;
  
          if (fnName === '_mountImageIntoNode') {
            var mountID = ReactMount.getID(args[1]);
            ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
          } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
            // special format
            args[0].forEach(function (update) {
              var writeArgs = {};
              if (update.fromIndex !== null) {
                writeArgs.fromIndex = update.fromIndex;
              }
              if (update.toIndex !== null) {
                writeArgs.toIndex = update.toIndex;
              }
              if (update.textContent !== null) {
                writeArgs.textContent = update.textContent;
              }
              if (update.markupIndex !== null) {
                writeArgs.markup = args[1][update.markupIndex];
              }
              ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
            });
          } else {
            // basic format
            var id = args[0];
            if (typeof id === 'object') {
              id = ReactMount.getID(args[0]);
            }
            ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
          }
          return rv;
        } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {
  
          if (this._currentElement.type === ReactMount.TopLevelWrapper) {
            return func.apply(this, args);
          }
  
          var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
          var isRender = fnName === '_renderValidatedComponent';
          var isMount = fnName === 'mountComponent';
  
          var mountStack = ReactDefaultPerf._mountStack;
          var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
  
          if (isRender) {
            addValue(entry.counts, rootNodeID, 1);
          } else if (isMount) {
            entry.created[rootNodeID] = true;
            mountStack.push(0);
          }
  
          start = performanceNow();
          rv = func.apply(this, args);
          totalTime = performanceNow() - start;
  
          if (isRender) {
            addValue(entry.render, rootNodeID, totalTime);
          } else if (isMount) {
            var subMountTime = mountStack.pop();
            mountStack[mountStack.length - 1] += totalTime;
            addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
            addValue(entry.inclusive, rootNodeID, totalTime);
          } else {
            addValue(entry.inclusive, rootNodeID, totalTime);
          }
  
          entry.displayNames[rootNodeID] = {
            current: this.getName(),
            owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
          };
  
          return rv;
        } else {
          return func.apply(this, args);
        }
      };
    }
  };
  
  module.exports = ReactDefaultPerf;

});

;/*!/node_modules/react/lib/ReactDefaultInjection.js*/
define('common:node_modules/react/lib/ReactDefaultInjection', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultInjection
   */
  
  'use strict';
  
  var BeforeInputEventPlugin = require('common:node_modules/react/lib/BeforeInputEventPlugin');
  var ChangeEventPlugin = require('common:node_modules/react/lib/ChangeEventPlugin');
  var ClientReactRootIndex = require('common:node_modules/react/lib/ClientReactRootIndex');
  var DefaultEventPluginOrder = require('common:node_modules/react/lib/DefaultEventPluginOrder');
  var EnterLeaveEventPlugin = require('common:node_modules/react/lib/EnterLeaveEventPlugin');
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  var HTMLDOMPropertyConfig = require('common:node_modules/react/lib/HTMLDOMPropertyConfig');
  var ReactBrowserComponentMixin = require('common:node_modules/react/lib/ReactBrowserComponentMixin');
  var ReactComponentBrowserEnvironment = require('common:node_modules/react/lib/ReactComponentBrowserEnvironment');
  var ReactDefaultBatchingStrategy = require('common:node_modules/react/lib/ReactDefaultBatchingStrategy');
  var ReactDOMComponent = require('common:node_modules/react/lib/ReactDOMComponent');
  var ReactDOMTextComponent = require('common:node_modules/react/lib/ReactDOMTextComponent');
  var ReactEventListener = require('common:node_modules/react/lib/ReactEventListener');
  var ReactInjection = require('common:node_modules/react/lib/ReactInjection');
  var ReactInstanceHandles = require('common:node_modules/react/lib/ReactInstanceHandles');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactReconcileTransaction = require('common:node_modules/react/lib/ReactReconcileTransaction');
  var SelectEventPlugin = require('common:node_modules/react/lib/SelectEventPlugin');
  var ServerReactRootIndex = require('common:node_modules/react/lib/ServerReactRootIndex');
  var SimpleEventPlugin = require('common:node_modules/react/lib/SimpleEventPlugin');
  var SVGDOMPropertyConfig = require('common:node_modules/react/lib/SVGDOMPropertyConfig');
  
  var alreadyInjected = false;
  
  function inject() {
    if (alreadyInjected) {
      // TODO: This is currently true because these injections are shared between
      // the client and the server package. They should be built independently
      // and not share any injection state. Then this problem will be solved.
      return;
    }
    alreadyInjected = true;
  
    ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
  
    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */
    ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
    ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
    ReactInjection.EventPluginHub.injectMount(ReactMount);
  
    /**
     * Some important event plugins included by default (without having to require
     * them).
     */
    ReactInjection.EventPluginHub.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });
  
    ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
  
    ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
  
    ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
  
    ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
    ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
  
    ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
  
    ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
    ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  
    ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
  
    ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  
    if ('development' !== 'production') {
      var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
      if (/[?&]react_perf\b/.test(url)) {
        var ReactDefaultPerf = require('common:node_modules/react/lib/ReactDefaultPerf');
        ReactDefaultPerf.start();
      }
    }
  }
  
  module.exports = {
    inject: inject
  };

});

;/*!/node_modules/react/lib/ReactVersion.js*/
define('common:node_modules/react/lib/ReactVersion', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactVersion
   */
  
  'use strict';
  
  module.exports = '0.14.8';

});

;/*!/node_modules/react/lib/renderSubtreeIntoContainer.js*/
define('common:node_modules/react/lib/renderSubtreeIntoContainer', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
  * @providesModule renderSubtreeIntoContainer
  */
  
  'use strict';
  
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  
  module.exports = ReactMount.renderSubtreeIntoContainer;

});

;/*!/node_modules/react/lib/ReactDOM.js*/
define('common:node_modules/react/lib/ReactDOM', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOM
   */
  
  /* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
  
  'use strict';
  
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  var ReactDOMTextComponent = require('common:node_modules/react/lib/ReactDOMTextComponent');
  var ReactDefaultInjection = require('common:node_modules/react/lib/ReactDefaultInjection');
  var ReactInstanceHandles = require('common:node_modules/react/lib/ReactInstanceHandles');
  var ReactMount = require('common:node_modules/react/lib/ReactMount');
  var ReactPerf = require('common:node_modules/react/lib/ReactPerf');
  var ReactReconciler = require('common:node_modules/react/lib/ReactReconciler');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  var ReactVersion = require('common:node_modules/react/lib/ReactVersion');
  
  var findDOMNode = require('common:node_modules/react/lib/findDOMNode');
  var renderSubtreeIntoContainer = require('common:node_modules/react/lib/renderSubtreeIntoContainer');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  ReactDefaultInjection.inject();
  
  var render = ReactPerf.measure('React', 'render', ReactMount.render);
  
  var React = {
    findDOMNode: findDOMNode,
    render: render,
    unmountComponentAtNode: ReactMount.unmountComponentAtNode,
    version: ReactVersion,
  
    /* eslint-disable camelcase */
    unstable_batchedUpdates: ReactUpdates.batchedUpdates,
    unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  };
  
  // Inject the runtime into a devtools global hook regardless of browser.
  // Allows for debugging when the hook is injected on the page.
  /* eslint-enable camelcase */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
      CurrentOwner: ReactCurrentOwner,
      InstanceHandles: ReactInstanceHandles,
      Mount: ReactMount,
      Reconciler: ReactReconciler,
      TextComponent: ReactDOMTextComponent
    });
  }
  
  if ('development' !== 'production') {
    var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
    if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
  
      // First check if devtools is not installed
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
        }
      }
  
      // If we're in IE8, check to see if we are in compatibility mode and provide
      // information on preventing compatibility mode
      var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
  
      'development' !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
  
      var expectedFeatures = [
      // shims
      Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,
  
      // shams
      Object.create, Object.freeze];
  
      for (var i = 0; i < expectedFeatures.length; i++) {
        if (!expectedFeatures[i]) {
          console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
          break;
        }
      }
    }
  }
  
  module.exports = React;

});

;/*!/node_modules/react/lib/ReactServerBatchingStrategy.js*/
define('common:node_modules/react/lib/ReactServerBatchingStrategy', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactServerBatchingStrategy
   * @typechecks
   */
  
  'use strict';
  
  var ReactServerBatchingStrategy = {
    isBatchingUpdates: false,
    batchedUpdates: function (callback) {
      // Don't do anything here. During the server rendering we don't want to
      // schedule any updates. We will simply ignore them.
    }
  };
  
  module.exports = ReactServerBatchingStrategy;

});

;/*!/node_modules/react/lib/ReactServerRenderingTransaction.js*/
define('common:node_modules/react/lib/ReactServerRenderingTransaction', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactServerRenderingTransaction
   * @typechecks
   */
  
  'use strict';
  
  var PooledClass = require('common:node_modules/react/lib/PooledClass');
  var CallbackQueue = require('common:node_modules/react/lib/CallbackQueue');
  var Transaction = require('common:node_modules/react/lib/Transaction');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  
  /**
   * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
   * during the performing of the transaction.
   */
  var ON_DOM_READY_QUEUEING = {
    /**
     * Initializes the internal `onDOMReady` queue.
     */
    initialize: function () {
      this.reactMountReady.reset();
    },
  
    close: emptyFunction
  };
  
  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
  
  /**
   * @class ReactServerRenderingTransaction
   * @param {boolean} renderToStaticMarkup
   */
  function ReactServerRenderingTransaction(renderToStaticMarkup) {
    this.reinitializeTransaction();
    this.renderToStaticMarkup = renderToStaticMarkup;
    this.reactMountReady = CallbackQueue.getPooled(null);
    this.useCreateElement = false;
  }
  
  var Mixin = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array} Empty list of operation wrap procedures.
     */
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    },
  
    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function () {
      return this.reactMountReady;
    },
  
    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be reused.
     */
    destructor: function () {
      CallbackQueue.release(this.reactMountReady);
      this.reactMountReady = null;
    }
  };
  
  assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
  
  PooledClass.addPoolingTo(ReactServerRenderingTransaction);
  
  module.exports = ReactServerRenderingTransaction;

});

;/*!/node_modules/react/lib/ReactServerRendering.js*/
define('common:node_modules/react/lib/ReactServerRendering', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks static-only
   * @providesModule ReactServerRendering
   */
  'use strict';
  
  var ReactDefaultBatchingStrategy = require('common:node_modules/react/lib/ReactDefaultBatchingStrategy');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactInstanceHandles = require('common:node_modules/react/lib/ReactInstanceHandles');
  var ReactMarkupChecksum = require('common:node_modules/react/lib/ReactMarkupChecksum');
  var ReactServerBatchingStrategy = require('common:node_modules/react/lib/ReactServerBatchingStrategy');
  var ReactServerRenderingTransaction = require('common:node_modules/react/lib/ReactServerRenderingTransaction');
  var ReactUpdates = require('common:node_modules/react/lib/ReactUpdates');
  
  var emptyObject = require('common:node_modules/fbjs/lib/emptyObject');
  var instantiateReactComponent = require('common:node_modules/react/lib/instantiateReactComponent');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * @param {ReactElement} element
   * @return {string} the HTML markup
   */
  function renderToString(element) {
    !ReactElement.isValidElement(element) ? 'development' !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
  
    var transaction;
    try {
      ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
  
      var id = ReactInstanceHandles.createReactRootID();
      transaction = ReactServerRenderingTransaction.getPooled(false);
  
      return transaction.perform(function () {
        var componentInstance = instantiateReactComponent(element, null);
        var markup = componentInstance.mountComponent(id, transaction, emptyObject);
        return ReactMarkupChecksum.addChecksumToMarkup(markup);
      }, null);
    } finally {
      ReactServerRenderingTransaction.release(transaction);
      // Revert to the DOM batching strategy since these two renderers
      // currently share these stateful modules.
      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    }
  }
  
  /**
   * @param {ReactElement} element
   * @return {string} the HTML markup, without the extra React ID and checksum
   * (for generating static pages)
   */
  function renderToStaticMarkup(element) {
    !ReactElement.isValidElement(element) ? 'development' !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
  
    var transaction;
    try {
      ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
  
      var id = ReactInstanceHandles.createReactRootID();
      transaction = ReactServerRenderingTransaction.getPooled(true);
  
      return transaction.perform(function () {
        var componentInstance = instantiateReactComponent(element, null);
        return componentInstance.mountComponent(id, transaction, emptyObject);
      }, null);
    } finally {
      ReactServerRenderingTransaction.release(transaction);
      // Revert to the DOM batching strategy since these two renderers
      // currently share these stateful modules.
      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    }
  }
  
  module.exports = {
    renderToString: renderToString,
    renderToStaticMarkup: renderToStaticMarkup
  };

});

;/*!/node_modules/react/lib/ReactDOMServer.js*/
define('common:node_modules/react/lib/ReactDOMServer', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMServer
   */
  
  'use strict';
  
  var ReactDefaultInjection = require('common:node_modules/react/lib/ReactDefaultInjection');
  var ReactServerRendering = require('common:node_modules/react/lib/ReactServerRendering');
  var ReactVersion = require('common:node_modules/react/lib/ReactVersion');
  
  ReactDefaultInjection.inject();
  
  var ReactDOMServer = {
    renderToString: ReactServerRendering.renderToString,
    renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
    version: ReactVersion
  };
  
  module.exports = ReactDOMServer;

});

;/*!/node_modules/react/lib/ReactElementValidator.js*/
define('common:node_modules/react/lib/ReactElementValidator', function(require, exports, module) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactElementValidator
   */
  
  /**
   * ReactElementValidator provides a wrapper around a element factory
   * which validates the props passed to the element. This is intended to be
   * used only in DEV and could be replaced by a static type checker for languages
   * that support it.
   */
  
  'use strict';
  
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactPropTypeLocations = require('common:node_modules/react/lib/ReactPropTypeLocations');
  var ReactPropTypeLocationNames = require('common:node_modules/react/lib/ReactPropTypeLocationNames');
  var ReactCurrentOwner = require('common:node_modules/react/lib/ReactCurrentOwner');
  
  var canDefineProperty = require('common:node_modules/react/lib/canDefineProperty');
  var getIteratorFn = require('common:node_modules/react/lib/getIteratorFn');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  function getDeclarationErrorAddendum() {
    if (ReactCurrentOwner.current) {
      var name = ReactCurrentOwner.current.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};
  
  var loggedTypeFailures = {};
  
  /**
   * Warn if the element doesn't have an explicit key assigned to it.
   * This element is in an array. The array could grow and shrink or be
   * reordered. All children that haven't already been validated are required to
   * have a "key" property assigned to it.
   *
   * @internal
   * @param {ReactElement} element Element that requires a key.
   * @param {*} parentType element's parent's type.
   */
  function validateExplicitKey(element, parentType) {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }
    element._store.validated = true;
  
    var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
    if (addenda === null) {
      // we already showed the warning
      return;
    }
    'development' !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
  }
  
  /**
   * Shared warning and monitoring code for the key warnings.
   *
   * @internal
   * @param {string} messageType A key used for de-duping warnings.
   * @param {ReactElement} element Component that requires a key.
   * @param {*} parentType element's parent's type.
   * @returns {?object} A set of addenda to use in the warning message, or null
   * if the warning has already been shown before (and shouldn't be shown again).
   */
  function getAddendaForKeyUse(messageType, element, parentType) {
    var addendum = getDeclarationErrorAddendum();
    if (!addendum) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
      if (parentName) {
        addendum = ' Check the top-level render call using <' + parentName + '>.';
      }
    }
  
    var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
    if (memoizer[addendum]) {
      return null;
    }
    memoizer[addendum] = true;
  
    var addenda = {
      parentOrOwner: addendum,
      url: ' See https://fb.me/react-warning-keys for more information.',
      childOwner: null
    };
  
    // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.
    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
      // Give the component that originally created this child.
      addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
    }
  
    return addenda;
  }
  
  /**
   * Ensure that every element either is passed in a static location, in an
   * array with an explicit keys property defined, or in an object literal
   * with valid key property.
   *
   * @internal
   * @param {ReactNode} node Statically passed child of any type.
   * @param {*} parentType node's parent's type.
   */
  function validateChildKeys(node, parentType) {
    if (typeof node !== 'object') {
      return;
    }
    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];
        if (ReactElement.isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (ReactElement.isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);
      // Entry iterators provide implicit keys.
      if (iteratorFn) {
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;
          while (!(step = iterator.next()).done) {
            if (ReactElement.isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
  
  /**
   * Assert that the props are valid
   *
   * @param {string} componentName Name of the component for error messages.
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  function checkPropTypes(componentName, propTypes, props, location) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? 'development' !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        'development' !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
  
          var addendum = getDeclarationErrorAddendum();
          'development' !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
        }
      }
    }
  }
  
  /**
   * Given an element, validate that its props follow the propTypes definition,
   * provided by the type.
   *
   * @param {ReactElement} element
   */
  function validatePropTypes(element) {
    var componentClass = element.type;
    if (typeof componentClass !== 'function') {
      return;
    }
    var name = componentClass.displayName || componentClass.name;
    if (componentClass.propTypes) {
      checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
    }
    if (typeof componentClass.getDefaultProps === 'function') {
      'development' !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
    }
  }
  
  var ReactElementValidator = {
  
    createElement: function (type, props, children) {
      var validType = typeof type === 'string' || typeof type === 'function';
      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      'development' !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
  
      var element = ReactElement.createElement.apply(this, arguments);
  
      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }
  
      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }
  
      validatePropTypes(element);
  
      return element;
    },
  
    createFactory: function (type) {
      var validatedFactory = ReactElementValidator.createElement.bind(null, type);
      // Legacy hook TODO: Warn if this is accessed
      validatedFactory.type = type;
  
      if ('development' !== 'production') {
        if (canDefineProperty) {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function () {
              'development' !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
      }
  
      return validatedFactory;
    },
  
    cloneElement: function (element, props, children) {
      var newElement = ReactElement.cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }
  
  };
  
  module.exports = ReactElementValidator;

});

;/*!/node_modules/fbjs/lib/mapObject.js*/
define('common:node_modules/fbjs/lib/mapObject', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule mapObject
   */
  
  'use strict';
  
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  
  /**
   * Executes the provided `callback` once for each enumerable own property in the
   * object and constructs a new object from the results. The `callback` is
   * invoked with three arguments:
   *
   *  - the property value
   *  - the property name
   *  - the object being traversed
   *
   * Properties that are added after the call to `mapObject` will not be visited
   * by `callback`. If the values of existing properties are changed, the value
   * passed to `callback` will be the value at the time `mapObject` visits them.
   * Properties that are deleted before being visited are not visited.
   *
   * @grep function objectMap()
   * @grep function objMap()
   *
   * @param {?object} object
   * @param {function} callback
   * @param {*} context
   * @return {?object}
   */
  function mapObject(object, callback, context) {
    if (!object) {
      return null;
    }
    var result = {};
    for (var name in object) {
      if (hasOwnProperty.call(object, name)) {
        result[name] = callback.call(context, object[name], name, object);
      }
    }
    return result;
  }
  
  module.exports = mapObject;

});

;/*!/node_modules/react/lib/ReactDOMFactories.js*/
define('common:node_modules/react/lib/ReactDOMFactories', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMFactories
   * @typechecks static-only
   */
  
  'use strict';
  
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactElementValidator = require('common:node_modules/react/lib/ReactElementValidator');
  
  var mapObject = require('common:node_modules/fbjs/lib/mapObject');
  
  /**
   * Create a factory that creates HTML tag elements.
   *
   * @param {string} tag Tag name (e.g. `div`).
   * @private
   */
  function createDOMFactory(tag) {
    if ('development' !== 'production') {
      return ReactElementValidator.createFactory(tag);
    }
    return ReactElement.createFactory(tag);
  }
  
  /**
   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
   * This is also accessible via `React.DOM`.
   *
   * @public
   */
  var ReactDOMFactories = mapObject({
    a: 'a',
    abbr: 'abbr',
    address: 'address',
    area: 'area',
    article: 'article',
    aside: 'aside',
    audio: 'audio',
    b: 'b',
    base: 'base',
    bdi: 'bdi',
    bdo: 'bdo',
    big: 'big',
    blockquote: 'blockquote',
    body: 'body',
    br: 'br',
    button: 'button',
    canvas: 'canvas',
    caption: 'caption',
    cite: 'cite',
    code: 'code',
    col: 'col',
    colgroup: 'colgroup',
    data: 'data',
    datalist: 'datalist',
    dd: 'dd',
    del: 'del',
    details: 'details',
    dfn: 'dfn',
    dialog: 'dialog',
    div: 'div',
    dl: 'dl',
    dt: 'dt',
    em: 'em',
    embed: 'embed',
    fieldset: 'fieldset',
    figcaption: 'figcaption',
    figure: 'figure',
    footer: 'footer',
    form: 'form',
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    head: 'head',
    header: 'header',
    hgroup: 'hgroup',
    hr: 'hr',
    html: 'html',
    i: 'i',
    iframe: 'iframe',
    img: 'img',
    input: 'input',
    ins: 'ins',
    kbd: 'kbd',
    keygen: 'keygen',
    label: 'label',
    legend: 'legend',
    li: 'li',
    link: 'link',
    main: 'main',
    map: 'map',
    mark: 'mark',
    menu: 'menu',
    menuitem: 'menuitem',
    meta: 'meta',
    meter: 'meter',
    nav: 'nav',
    noscript: 'noscript',
    object: 'object',
    ol: 'ol',
    optgroup: 'optgroup',
    option: 'option',
    output: 'output',
    p: 'p',
    param: 'param',
    picture: 'picture',
    pre: 'pre',
    progress: 'progress',
    q: 'q',
    rp: 'rp',
    rt: 'rt',
    ruby: 'ruby',
    s: 's',
    samp: 'samp',
    script: 'script',
    section: 'section',
    select: 'select',
    small: 'small',
    source: 'source',
    span: 'span',
    strong: 'strong',
    style: 'style',
    sub: 'sub',
    summary: 'summary',
    sup: 'sup',
    table: 'table',
    tbody: 'tbody',
    td: 'td',
    textarea: 'textarea',
    tfoot: 'tfoot',
    th: 'th',
    thead: 'thead',
    time: 'time',
    title: 'title',
    tr: 'tr',
    track: 'track',
    u: 'u',
    ul: 'ul',
    'var': 'var',
    video: 'video',
    wbr: 'wbr',
  
    // SVG
    circle: 'circle',
    clipPath: 'clipPath',
    defs: 'defs',
    ellipse: 'ellipse',
    g: 'g',
    image: 'image',
    line: 'line',
    linearGradient: 'linearGradient',
    mask: 'mask',
    path: 'path',
    pattern: 'pattern',
    polygon: 'polygon',
    polyline: 'polyline',
    radialGradient: 'radialGradient',
    rect: 'rect',
    stop: 'stop',
    svg: 'svg',
    text: 'text',
    tspan: 'tspan'
  
  }, createDOMFactory);
  
  module.exports = ReactDOMFactories;

});

;/*!/node_modules/react/lib/onlyChild.js*/
define('common:node_modules/react/lib/onlyChild', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule onlyChild
   */
  'use strict';
  
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  
  /**
   * Returns the first child in a collection of children and verifies that there
   * is only one child in the collection. The current implementation of this
   * function assumes that a single child gets passed without a wrapper, but the
   * purpose of this helper function is to abstract away the particular structure
   * of children.
   *
   * @param {?object} children Child collection structure.
   * @return {ReactComponent} The first and only `ReactComponent` contained in the
   * structure.
   */
  function onlyChild(children) {
    !ReactElement.isValidElement(children) ? 'development' !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
    return children;
  }
  
  module.exports = onlyChild;

});

;/*!/node_modules/react/lib/ReactIsomorphic.js*/
define('common:node_modules/react/lib/ReactIsomorphic', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactIsomorphic
   */
  
  'use strict';
  
  var ReactChildren = require('common:node_modules/react/lib/ReactChildren');
  var ReactComponent = require('common:node_modules/react/lib/ReactComponent');
  var ReactClass = require('common:node_modules/react/lib/ReactClass');
  var ReactDOMFactories = require('common:node_modules/react/lib/ReactDOMFactories');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  var ReactElementValidator = require('common:node_modules/react/lib/ReactElementValidator');
  var ReactPropTypes = require('common:node_modules/react/lib/ReactPropTypes');
  var ReactVersion = require('common:node_modules/react/lib/ReactVersion');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var onlyChild = require('common:node_modules/react/lib/onlyChild');
  
  var createElement = ReactElement.createElement;
  var createFactory = ReactElement.createFactory;
  var cloneElement = ReactElement.cloneElement;
  
  if ('development' !== 'production') {
    createElement = ReactElementValidator.createElement;
    createFactory = ReactElementValidator.createFactory;
    cloneElement = ReactElementValidator.cloneElement;
  }
  
  var React = {
  
    // Modern
  
    Children: {
      map: ReactChildren.map,
      forEach: ReactChildren.forEach,
      count: ReactChildren.count,
      toArray: ReactChildren.toArray,
      only: onlyChild
    },
  
    Component: ReactComponent,
  
    createElement: createElement,
    cloneElement: cloneElement,
    isValidElement: ReactElement.isValidElement,
  
    // Classic
  
    PropTypes: ReactPropTypes,
    createClass: ReactClass.createClass,
    createFactory: createFactory,
    createMixin: function (mixin) {
      // Currently a noop. Will be used to validate and trace mixins.
      return mixin;
    },
  
    // This looks DOM specific but these are actually isomorphic helpers
    // since they are just generating DOM strings.
    DOM: ReactDOMFactories,
  
    version: ReactVersion,
  
    // Hook for JSX spread, don't use this for anything else.
    __spread: assign
  };
  
  module.exports = React;

});

;/*!/node_modules/react/lib/deprecated.js*/
define('common:node_modules/react/lib/deprecated', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule deprecated
   */
  
  'use strict';
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * This will log a single deprecation notice per function and forward the call
   * on to the new API.
   *
   * @param {string} fnName The name of the function
   * @param {string} newModule The module that fn will exist in
   * @param {string} newPackage The module that fn will exist in
   * @param {*} ctx The context this forwarded call should run in
   * @param {function} fn The function to forward on to
   * @return {function} The function that will warn once and then call fn
   */
  function deprecated(fnName, newModule, newPackage, ctx, fn) {
    var warned = false;
    if ('development' !== 'production') {
      var newFn = function () {
        'development' !== 'production' ? warning(warned,
        // Require examples in this string must be split to prevent React's
        // build tools from mistaking them for real requires.
        // Otherwise the build tools will attempt to build a '%s' module.
        'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
        warned = true;
        return fn.apply(ctx, arguments);
      };
      // We need to make sure all properties of the original fn are copied over.
      // In particular, this is needed to support PropTypes
      return assign(newFn, fn);
    }
  
    return fn;
  }
  
  module.exports = deprecated;

});

;/*!/node_modules/react/lib/React.js*/
define('common:node_modules/react/lib/React', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule React
   */
  
  'use strict';
  
  var ReactDOM = require('common:node_modules/react/lib/ReactDOM');
  var ReactDOMServer = require('common:node_modules/react/lib/ReactDOMServer');
  var ReactIsomorphic = require('common:node_modules/react/lib/ReactIsomorphic');
  
  var assign = require('common:node_modules/react/lib/Object.assign');
  var deprecated = require('common:node_modules/react/lib/deprecated');
  
  // `version` will be added here by ReactIsomorphic.
  var React = {};
  
  assign(React, ReactIsomorphic);
  
  assign(React, {
    // ReactDOM
    findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
    render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
    unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
  
    // ReactDOMServer
    renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
    renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
  });
  
  React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
  React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
  
  module.exports = React;

});

;/*!/node_modules/react/react.js*/
define('common:node_modules/react/react', function(require, exports, module) {

  'use strict';
  
  module.exports = require('common:node_modules/react/lib/React');
  

});

;/*!/node_modules/react-dom/index.js*/
define('common:node_modules/react-dom/index', function(require, exports, module) {

  'use strict';
  
  module.exports = require('common:node_modules/react/lib/ReactDOM');
  

});

;/*!/node_modules/react-slick-ie8/lib/mixins/trackHelper.js*/
define('common:node_modules/react-slick-ie8/lib/mixins/trackHelper', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  exports.getTrackLeft = exports.getTrackAnimateCSS = exports.getTrackCSS = undefined;
  
  var _reactDom = require('common:node_modules/react-dom/index');
  
  var _reactDom2 = _interopRequireDefault(_reactDom);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var checkSpecKeys = function checkSpecKeys(spec, keysArray) {
    return keysArray.reduce(function (value, key) {
      return value && spec.hasOwnProperty(key);
    }, true) ? null : console.error('Keys Missing', spec);
  };
  
  var getTrackCSS = exports.getTrackCSS = function getTrackCSS(spec) {
    checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth']);
  
    var trackWidth;
  
    if (spec.variableWidth) {
      trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
    } else if (spec.centerMode) {
      trackWidth = (spec.slideCount + 2 * (spec.slidesToShow + 1)) * spec.slideWidth;
    } else {
      trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
    }
  
    var style = {
      opacity: 1,
      width: trackWidth,
      WebkitTransform: 'translate3d(' + spec.left + 'px, 0px, 0px)',
      transform: 'translate3d(' + spec.left + 'px, 0px, 0px)',
      transition: '',
      WebkitTransition: '',
      msTransform: 'translateX(' + spec.left + 'px)'
    };
  
    // Fallback for IE8
    if (!window.addEventListener && window.attachEvent) {
      style.marginLeft = spec.left + 'px';
    }
  
    return style;
  };
  
  var getTrackAnimateCSS = exports.getTrackAnimateCSS = function getTrackAnimateCSS(spec) {
    checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth', 'speed', 'cssEase']);
  
    var style = getTrackCSS(spec);
    // useCSS is true by default so it can be undefined
    style.WebkitTransition = '-webkit-transform ' + spec.speed + 'ms ' + spec.cssEase;
    style.transition = 'transform ' + spec.speed + 'ms ' + spec.cssEase;
    return style;
  };
  
  var getTrackLeft = exports.getTrackLeft = function getTrackLeft(spec) {
  
    checkSpecKeys(spec, ['slideIndex', 'trackRef', 'infinite', 'centerMode', 'slideCount', 'slidesToShow', 'slidesToScroll', 'slideWidth', 'listWidth', 'variableWidth']);
  
    var slideOffset = 0;
    var targetLeft;
    var targetSlide;
  
    if (spec.fade) {
      return 0;
    }
  
    if (spec.infinite) {
      if (spec.slideCount > spec.slidesToShow) {
        slideOffset = spec.slideWidth * spec.slidesToShow * -1;
      }
      if (spec.slideCount % spec.slidesToScroll !== 0) {
        if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {
          if (spec.slideIndex > spec.slideCount) {
            slideOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideWidth * -1;
          } else {
            slideOffset = spec.slideCount % spec.slidesToScroll * spec.slideWidth * -1;
          }
        }
      }
    }
  
    if (spec.centerMode) {
      if (spec.infinite) {
        slideOffset += spec.slideWidth * Math.floor(spec.slidesToShow / 2);
      } else {
        slideOffset = spec.slideWidth * Math.floor(spec.slidesToShow / 2);
      }
    }
  
    targetLeft = spec.slideIndex * spec.slideWidth * -1 + slideOffset;
  
    if (spec.variableWidth === true) {
      var targetSlideIndex;
      if (spec.slideCount <= spec.slidesToShow || spec.infinite === false) {
        targetSlide = _reactDom2['default'].findDOMNode(spec.trackRef).childNodes[spec.slideIndex];
      } else {
        targetSlideIndex = spec.slideIndex + spec.slidesToShow;
        targetSlide = _reactDom2['default'].findDOMNode(spec.trackRef).childNodes[targetSlideIndex];
      }
      targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
      if (spec.centerMode === true) {
        if (spec.infinite === false) {
          targetSlide = _reactDom2['default'].findDOMNode(spec.trackRef).children[spec.slideIndex];
        } else {
          targetSlide = _reactDom2['default'].findDOMNode(spec.trackRef).children[spec.slideIndex + spec.slidesToShow + 1];
        }
  
        targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
        targetLeft += (spec.listWidth - targetSlide.offsetWidth) / 2;
      }
    }
  
    return targetLeft;
  };

});

;/*!/node_modules/react/lib/ReactTransitionEvents.js*/
define('common:node_modules/react/lib/ReactTransitionEvents', function(require, exports, module) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactTransitionEvents
   */
  
  'use strict';
  
  var ExecutionEnvironment = require('common:node_modules/fbjs/lib/ExecutionEnvironment');
  
  /**
   * EVENT_NAME_MAP is used to determine which event fired when a
   * transition/animation ends, based on the style property used to
   * define that event.
   */
  var EVENT_NAME_MAP = {
    transitionend: {
      'transition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd',
      'MozTransition': 'mozTransitionEnd',
      'OTransition': 'oTransitionEnd',
      'msTransition': 'MSTransitionEnd'
    },
  
    animationend: {
      'animation': 'animationend',
      'WebkitAnimation': 'webkitAnimationEnd',
      'MozAnimation': 'mozAnimationEnd',
      'OAnimation': 'oAnimationEnd',
      'msAnimation': 'MSAnimationEnd'
    }
  };
  
  var endEvents = [];
  
  function detectEvents() {
    var testEl = document.createElement('div');
    var style = testEl.style;
  
    // On some platforms, in particular some releases of Android 4.x,
    // the un-prefixed "animation" and "transition" properties are defined on the
    // style object but the events that fire will still be prefixed, so we need
    // to check if the un-prefixed events are useable, and if not remove them
    // from the map
    if (!('AnimationEvent' in window)) {
      delete EVENT_NAME_MAP.animationend.animation;
    }
  
    if (!('TransitionEvent' in window)) {
      delete EVENT_NAME_MAP.transitionend.transition;
    }
  
    for (var baseEventName in EVENT_NAME_MAP) {
      var baseEvents = EVENT_NAME_MAP[baseEventName];
      for (var styleName in baseEvents) {
        if (styleName in style) {
          endEvents.push(baseEvents[styleName]);
          break;
        }
      }
    }
  }
  
  if (ExecutionEnvironment.canUseDOM) {
    detectEvents();
  }
  
  // We use the raw {add|remove}EventListener() call because EventListener
  // does not know how to remove event listeners and we really should
  // clean up. Also, these events are not triggered in older browsers
  // so we should be A-OK here.
  
  function addEventListener(node, eventName, eventListener) {
    node.addEventListener(eventName, eventListener, false);
  }
  
  function removeEventListener(node, eventName, eventListener) {
    node.removeEventListener(eventName, eventListener, false);
  }
  
  var ReactTransitionEvents = {
    addEndEventListener: function (node, eventListener) {
      if (endEvents.length === 0) {
        // If CSS transitions are not supported, trigger an "end animation"
        // event immediately.
        window.setTimeout(eventListener, 0);
        return;
      }
      endEvents.forEach(function (endEvent) {
        addEventListener(node, endEvent, eventListener);
      });
    },
  
    removeEndEventListener: function (node, eventListener) {
      if (endEvents.length === 0) {
        return;
      }
      endEvents.forEach(function (endEvent) {
        removeEventListener(node, endEvent, eventListener);
      });
    }
  };
  
  module.exports = ReactTransitionEvents;

});

;/*!/node_modules/object-assign/index.js*/
define('common:node_modules/object-assign/index', function(require, exports, module) {

  'use strict';
  
  function ToObject(val) {
  	if (val == null) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}
  
  	return Object(val);
  }
  
  module.exports = Object.assign || function (target, source) {
  	var from;
  	var keys;
  	var to = ToObject(target);
  
  	for (var s = 1; s < arguments.length; s++) {
  		from = arguments[s];
  		keys = Object.keys(Object(from));
  
  		for (var i = 0; i < keys.length; i++) {
  			to[keys[i]] = from[keys[i]];
  		}
  	}
  
  	return to;
  };
  

});

;/*!/node_modules/react-slick-ie8/lib/mixins/helpers.js*/
define('common:node_modules/react-slick-ie8/lib/mixins/helpers', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  var _reactDom = require('common:node_modules/react-dom/index');
  
  var _reactDom2 = _interopRequireDefault(_reactDom);
  
  var _ReactTransitionEvents = require('common:node_modules/react/lib/ReactTransitionEvents');
  
  var _ReactTransitionEvents2 = _interopRequireDefault(_ReactTransitionEvents);
  
  var _trackHelper = require('common:node_modules/react-slick-ie8/lib/mixins/trackHelper');
  
  var _objectAssign = require('common:node_modules/object-assign/index');
  
  var _objectAssign2 = _interopRequireDefault(_objectAssign);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var helpers = {
    initialize: function initialize(props) {
      var slideCount = _react2['default'].Children.count(props.children);
      var listWidth = this.getWidth(_reactDom2['default'].findDOMNode(this.refs.list));
      var trackWidth = this.getWidth(_reactDom2['default'].findDOMNode(this.refs.track));
      var slideWidth = this.getWidth(_reactDom2['default'].findDOMNode(this)) / props.slidesToShow;
  
      var currentSlide = props.rtl ? slideCount - 1 - props.initialSlide : props.initialSlide;
  
      this.setState({
        slideCount: slideCount,
        slideWidth: slideWidth,
        listWidth: listWidth,
        trackWidth: trackWidth,
        currentSlide: currentSlide
      }, function () {
  
        var targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
          slideIndex: this.state.currentSlide,
          trackRef: this.refs.track
        }, props, this.state));
        // getCSS function needs previously set state
        var trackStyle = (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: targetLeft }, props, this.state));
  
        this.setState({ trackStyle: trackStyle });
  
        this.autoPlay(); // once we're set up, trigger the initial autoplay.
      });
    },
    update: function update(props) {
      // This method has mostly same code as initialize method.
      // Refactor it
      var slideCount = _react2['default'].Children.count(props.children);
      var listWidth = this.getWidth(_reactDom2['default'].findDOMNode(this.refs.list));
      var trackWidth = this.getWidth(_reactDom2['default'].findDOMNode(this.refs.track));
      var slideWidth = this.getWidth(_reactDom2['default'].findDOMNode(this)) / props.slidesToShow;
  
      this.setState({
        slideCount: slideCount,
        slideWidth: slideWidth,
        listWidth: listWidth,
        trackWidth: trackWidth
      }, function () {
  
        var targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
          slideIndex: this.state.currentSlide,
          trackRef: this.refs.track
        }, props, this.state));
        // getCSS function needs previously set state
        var trackStyle = (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: targetLeft }, props, this.state));
  
        this.setState({ trackStyle: trackStyle });
      });
    },
    getWidth: function getWidth(elem) {
      return elem.getBoundingClientRect().width || elem.offsetWidth;
    },
    adaptHeight: function adaptHeight() {
      if (this.props.adaptiveHeight) {
        var selector = '[data-index="' + this.state.currentSlide + '"]';
        if (this.refs.list) {
          var slickList = _reactDom2['default'].findDOMNode(this.refs.list);
          slickList.style.height = slickList.querySelector(selector).offsetHeight + 'px';
        }
      }
    },
    slideHandler: function slideHandler(index) {
      var _this = this;
  
      // Functionality of animateSlide and postSlide is merged into this function
      // console.log('slideHandler', index);
      var targetSlide, currentSlide;
      var targetLeft, currentLeft;
      var _callback2;
  
      if (this.props.waitForAnimate && this.state.animating) {
        return;
      }
  
      if (this.props.fade) {
        currentSlide = this.state.currentSlide;
  
        //  Shifting targetSlide back into the range
        if (index < 0) {
          targetSlide = index + this.state.slideCount;
        } else if (index >= this.state.slideCount) {
          targetSlide = index - this.state.slideCount;
        } else {
          targetSlide = index;
        }
  
        if (this.props.lazyLoad && this.state.lazyLoadedList.indexOf(targetSlide) < 0) {
          this.setState({
            lazyLoadedList: this.state.lazyLoadedList.concat(targetSlide)
          });
        }
  
        _callback2 = function callback() {
          _this.setState({
            animating: false
          });
          if (_this.props.afterChange) {
            _this.props.afterChange(currentSlide);
          }
          _ReactTransitionEvents2['default'].removeEndEventListener(_reactDom2['default'].findDOMNode(_this.refs.track).children[currentSlide], _callback2);
        };
  
        this.setState({
          animating: true,
          currentSlide: targetSlide
        }, function () {
          _ReactTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this.refs.track).children[currentSlide], _callback2);
        });
  
        if (this.props.beforeChange) {
          this.props.beforeChange(this.state.currentSlide, currentSlide);
        }
  
        this.autoPlay();
        return;
      }
  
      targetSlide = index;
      if (targetSlide < 0) {
        if (this.props.infinite === false) {
          currentSlide = 0;
        } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
          currentSlide = this.state.slideCount - this.state.slideCount % this.props.slidesToScroll;
        } else {
          currentSlide = this.state.slideCount + targetSlide;
        }
      } else if (targetSlide >= this.state.slideCount) {
        if (this.props.infinite === false) {
          currentSlide = this.state.slideCount - this.props.slidesToShow;
        } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
          currentSlide = 0;
        } else {
          currentSlide = targetSlide - this.state.slideCount;
        }
      } else {
        currentSlide = targetSlide;
      }
  
      targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
        slideIndex: targetSlide,
        trackRef: this.refs.track
      }, this.props, this.state));
  
      currentLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
        slideIndex: currentSlide,
        trackRef: this.refs.track
      }, this.props, this.state));
  
      if (this.props.infinite === false) {
        targetLeft = currentLeft;
      }
  
      if (this.props.beforeChange) {
        this.props.beforeChange(this.state.currentSlide, currentSlide);
      }
  
      if (this.props.lazyLoad) {
        var loaded = true;
        var slidesToLoad = [];
        for (var i = targetSlide; i < targetSlide + this.props.slidesToShow; i++) {
          loaded = loaded && this.state.lazyLoadedList.indexOf(i) >= 0;
          if (!loaded) {
            slidesToLoad.push(i);
          }
        }
        if (!loaded) {
          this.setState({
            lazyLoadedList: this.state.lazyLoadedList.concat(slidesToLoad)
          });
        }
      }
  
      // Slide Transition happens here.
      // animated transition happens to target Slide and
      // non - animated transition happens to current Slide
      // If CSS transitions are false, directly go the current slide.
  
      if (this.props.useCSS === false) {
  
        this.setState({
          currentSlide: currentSlide,
          trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: currentLeft }, this.props, this.state))
        }, function () {
          if (this.props.afterChange) {
            this.props.afterChange(currentSlide);
          }
        });
      } else {
  
        var nextStateChanges = {
          animating: false,
          currentSlide: currentSlide,
          trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: currentLeft }, this.props, this.state)),
          swipeLeft: null
        };
  
        _callback2 = function _callback() {
          _this.setState(nextStateChanges);
          if (_this.props.afterChange) {
            _this.props.afterChange(currentSlide);
          }
          _ReactTransitionEvents2['default'].removeEndEventListener(_reactDom2['default'].findDOMNode(_this.refs.track), _callback2);
        };
  
        this.setState({
          animating: true,
          currentSlide: currentSlide,
          trackStyle: (0, _trackHelper.getTrackAnimateCSS)((0, _objectAssign2['default'])({ left: targetLeft }, this.props, this.state))
        }, function () {
          _ReactTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this.refs.track), _callback2);
        });
      }
  
      this.autoPlay();
    },
    swipeDirection: function swipeDirection(touchObject) {
      var xDist, yDist, r, swipeAngle;
  
      xDist = touchObject.startX - touchObject.curX;
      yDist = touchObject.startY - touchObject.curY;
      r = Math.atan2(yDist, xDist);
  
      swipeAngle = Math.round(r * 180 / Math.PI);
      if (swipeAngle < 0) {
        swipeAngle = 360 - Math.abs(swipeAngle);
      }
      if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
        return this.props.rtl === false ? 'left' : 'right';
      }
      if (swipeAngle >= 135 && swipeAngle <= 225) {
        return this.props.rtl === false ? 'right' : 'left';
      }
  
      return 'vertical';
    },
    autoPlay: function autoPlay() {
      var _this2 = this;
  
      if (this.state.autoPlayTimer) {
        return;
      }
      var play = function play() {
        if (_this2.state.mounted) {
          var nextIndex = _this2.props.rtl ? _this2.state.currentSlide - _this2.props.slidesToScroll : _this2.state.currentSlide + _this2.props.slidesToScroll;
          _this2.slideHandler(nextIndex);
        }
      };
      if (this.props.autoplay) {
        this.setState({
          autoPlayTimer: window.setInterval(play, this.props.autoplaySpeed)
        });
      }
    },
    pause: function pause() {
      if (this.state.autoPlayTimer) {
        window.clearInterval(this.state.autoPlayTimer);
        this.setState({
          autoPlayTimer: null
        });
      }
    }
  };
  
  exports['default'] = helpers;

});

;/*!/node_modules/react-slick-ie8/lib/mixins/event-handlers.js*/
define('common:node_modules/react-slick-ie8/lib/mixins/event-handlers', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  
  var _trackHelper = require('common:node_modules/react-slick-ie8/lib/mixins/trackHelper');
  
  var _helpers = require('common:node_modules/react-slick-ie8/lib/mixins/helpers');
  
  var _helpers2 = _interopRequireDefault(_helpers);
  
  var _objectAssign = require('common:node_modules/object-assign/index');
  
  var _objectAssign2 = _interopRequireDefault(_objectAssign);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var EventHandlers = {
    // Event handler for previous and next
    changeSlide: function changeSlide(options) {
      var indexOffset, previousInt, slideOffset, unevenOffset, targetSlide;
      unevenOffset = this.state.slideCount % this.props.slidesToScroll !== 0;
      indexOffset = unevenOffset ? 0 : (this.state.slideCount - this.state.currentSlide) % this.props.slidesToScroll;
  
      if (options.message === 'previous') {
        slideOffset = indexOffset === 0 ? this.props.slidesToScroll : this.props.slidesToShow - indexOffset;
        targetSlide = this.state.currentSlide - slideOffset;
        if (this.props.lazyLoad) {
          previousInt = this.state.currentSlide - slideOffset;
          targetSlide = previousInt === -1 ? this.state.slideCount - 1 : previousInt;
        }
      } else if (options.message === 'next') {
        slideOffset = indexOffset === 0 ? this.props.slidesToScroll : indexOffset;
        targetSlide = this.state.currentSlide + slideOffset;
      } else if (options.message === 'dots') {
        // Click on dots
        targetSlide = options.index * options.slidesToScroll;
        if (targetSlide === options.currentSlide) {
          return;
        }
      } else if (options.message === 'index') {
        targetSlide = options.index;
        if (targetSlide === options.currentSlide) {
          return;
        }
      }
  
      this.slideHandler(targetSlide);
    },
    // Accessiblity handler for previous and next
    keyHandler: function keyHandler(e) {},
    // Focus on selecting a slide (click handler on track)
    selectHandler: function selectHandler(e) {},
    swipeStart: function swipeStart(e) {
      var touches, posX, posY;
  
      if (this.props.swipe === false || 'ontouchend' in document && this.props.swipe === false) {
        return;
      } else if (this.props.draggable === false && e.type.indexOf('mouse') !== -1) {
        return;
      }
      posX = e.touches !== undefined ? e.touches[0].pageX : e.clientX;
      posY = e.touches !== undefined ? e.touches[0].pageY : e.clientY;
      this.setState({
        dragging: true,
        touchObject: {
          startX: posX,
          startY: posY,
          curX: posX,
          curY: posY
        }
      });
    },
    swipeMove: function swipeMove(e) {
      if (!this.state.dragging) {
        return;
      }
      if (this.state.animating) {
        return;
      }
      var swipeLeft;
      var curLeft, positionOffset;
      var touchObject = this.state.touchObject;
  
      curLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
        slideIndex: this.state.currentSlide,
        trackRef: this.refs.track
      }, this.props, this.state));
      touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;
      touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;
      touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));
  
      positionOffset = (this.props.rtl === false ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);
  
      var currentSlide = this.state.currentSlide;
      var dotCount = Math.ceil(this.state.slideCount / this.props.slidesToScroll);
      var swipeDirection = this.swipeDirection(this.state.touchObject);
      var touchSwipeLength = touchObject.swipeLength;
  
      if (this.props.infinite === false) {
        if (currentSlide === 0 && swipeDirection === 'right' || currentSlide + 1 >= dotCount && swipeDirection === 'left') {
          touchSwipeLength = touchObject.swipeLength * this.props.edgeFriction;
  
          if (this.state.edgeDragged === false && this.props.edgeEvent) {
            this.props.edgeEvent(swipeDirection);
            this.setState({ edgeDragged: true });
          }
        }
      }
  
      if (this.state.swiped === false && this.props.swipeEvent) {
        this.props.swipeEvent(swipeDirection);
        this.setState({ swiped: true });
      }
  
      swipeLeft = curLeft + touchSwipeLength * positionOffset;
      this.setState({
        touchObject: touchObject,
        swipeLeft: swipeLeft,
        trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: swipeLeft }, this.props, this.state))
      });
  
      if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
        return;
      }
      if (touchObject.swipeLength > 4) {
        e.preventDefault();
      }
    },
    swipeEnd: function swipeEnd(e) {
      if (!this.state.dragging) {
        return;
      }
      var touchObject = this.state.touchObject;
      var minSwipe = this.state.listWidth / this.props.touchThreshold;
      var swipeDirection = this.swipeDirection(touchObject);
  
      // reset the state of touch related state variables.
      this.setState({
        dragging: false,
        edgeDragged: false,
        swiped: false,
        swipeLeft: null,
        touchObject: {}
      });
      // Fix for #13
      if (!touchObject.swipeLength) {
        return;
      }
      if (touchObject.swipeLength > minSwipe) {
        e.preventDefault();
        if (swipeDirection === 'left') {
          this.slideHandler(this.state.currentSlide + this.props.slidesToScroll);
        } else if (swipeDirection === 'right') {
          this.slideHandler(this.state.currentSlide - this.props.slidesToScroll);
        } else {
          this.slideHandler(this.state.currentSlide);
        }
      } else {
        // Adjust the track back to it's original position.
        var currentLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
          slideIndex: this.state.currentSlide,
          trackRef: this.refs.track
        }, this.props, this.state));
  
        this.setState({
          trackStyle: (0, _trackHelper.getTrackAnimateCSS)((0, _objectAssign2['default'])({ left: currentLeft }, this.props, this.state))
        });
      }
    },
    onInnerSliderEnter: function onInnerSliderEnter(e) {
      if (this.props.autoplay && this.props.pauseOnHover) {
        this.pause();
      }
    },
    onInnerSliderLeave: function onInnerSliderLeave(e) {
      if (this.props.autoplay && this.props.pauseOnHover) {
        this.autoPlay();
      }
    }
  };
  
  exports['default'] = EventHandlers;

});

;/*!/node_modules/react-slick-ie8/lib/initial-state.js*/
define('common:node_modules/react-slick-ie8/lib/initial-state', function(require, exports, module) {

  "use strict";
  
  var initialState = {
      animating: false,
      dragging: false,
      autoPlayTimer: null,
      currentDirection: 0,
      currentLeft: null,
      currentSlide: 0,
      direction: 1,
      // listWidth: null,
      // listHeight: null,
      // loadIndex: 0,
      slideCount: null,
      slideWidth: null,
      // sliding: false,
      // slideOffset: 0,
      swipeLeft: null,
      touchObject: {
          startX: 0,
          startY: 0,
          curX: 0,
          curY: 0
      },
  
      lazyLoadedList: [],
  
      // added for react
      initialized: false,
      edgeDragged: false,
      swiped: false, // used by swipeEvent. differentites between touch and swipe.
      trackStyle: {},
      trackWidth: 0
  
      // Removed
      // transformsEnabled: false,
      // $nextArrow: null,
      // $prevArrow: null,
      // $dots: null,
      // $list: null,
      // $slideTrack: null,
      // $slides: null,
  };
  
  module.exports = initialState;

});

;/*!/node_modules/react-slick-ie8/lib/default-props.js*/
define('common:node_modules/react-slick-ie8/lib/default-props', function(require, exports, module) {

  'use strict';
  
  var defaultProps = {
      className: '',
      // accessibility: true,
      adaptiveHeight: false,
      arrows: true,
      autoplay: false,
      autoplaySpeed: 3000,
      centerMode: false,
      centerPadding: '50px',
      cssEase: 'ease',
      dots: false,
      dotsClass: 'slick-dots',
      draggable: true,
      easing: 'linear',
      edgeFriction: 0.35,
      fade: false,
      focusOnSelect: false,
      infinite: true,
      initialSlide: 0,
      lazyLoad: false,
      pauseOnHover: false,
      responsive: null,
      rtl: false,
      slide: 'div',
      slidesToShow: 1,
      slidesToScroll: 1,
      speed: 500,
      swipe: true,
      swipeToSlide: false,
      touchMove: true,
      touchThreshold: 5,
      useCSS: true,
      variableWidth: false,
      vertical: false,
      waitForAnimate: true,
      afterChange: null,
      beforeChange: null,
      edgeEvent: null,
      init: null,
      swipeEvent: null,
      // nextArrow, prevArrow are react componets
      nextArrow: null,
      prevArrow: null
  };
  
  module.exports = defaultProps;

});

;/*!/node_modules/classnames/index.js*/
define('common:node_modules/classnames/index', function(require, exports, module) {

  /*!
    Copyright (c) 2015 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  
  function classNames () {
  	'use strict';
  
  	var classes = '';
  
  	for (var i = 0; i < arguments.length; i++) {
  		var arg = arguments[i];
  		if (!arg) continue;
  
  		var argType = typeof arg;
  
  		if ('string' === argType || 'number' === argType) {
  			classes += ' ' + arg;
  
  		} else if (Array.isArray(arg)) {
  			classes += ' ' + classNames.apply(null, arg);
  
  		} else if ('object' === argType) {
  			for (var key in arg) {
  				if (arg.hasOwnProperty(key) && arg[key]) {
  					classes += ' ' + key;
  				}
  			}
  		}
  	}
  
  	return classes.substr(1);
  }
  
  // safely export classNames for node / browserify
  if (typeof module !== 'undefined' && module.exports) {
  	module.exports = classNames;
  }
  
  /* global define */
  // safely export classNames for RequireJS
  if (typeof define !== 'undefined' && define.amd) {
  	define('classnames', [], function() {
  		return classNames;
  	});
  }
  

});

;/*!/node_modules/react-slick-ie8/lib/track.js*/
define('common:node_modules/react-slick-ie8/lib/track', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  exports.Track = undefined;
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  var _objectAssign = require('common:node_modules/object-assign/index');
  
  var _objectAssign2 = _interopRequireDefault(_objectAssign);
  
  var _classnames = require('common:node_modules/classnames/index');
  
  var _classnames2 = _interopRequireDefault(_classnames);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var getSlideClasses = function getSlideClasses(spec) {
    var slickActive, slickCenter, slickCloned;
    var centerOffset, index;
  
    if (spec.rtl) {
      index = spec.slideCount - 1 - spec.index;
    } else {
      index = spec.index;
    }
  
    slickCloned = index < 0 || index >= spec.slideCount;
    if (spec.centerMode) {
      centerOffset = Math.floor(spec.slidesToShow / 2);
      slickCenter = (index - spec.currentSlide) % spec.slideCount === 0;
      if (index > spec.currentSlide - centerOffset - 1 && index <= spec.currentSlide + centerOffset) {
        slickActive = true;
      }
    } else {
      slickActive = spec.currentSlide <= index && index < spec.currentSlide + spec.slidesToShow;
    }
    return (0, _classnames2['default'])({
      'slick-slide': true,
      'slick-active': slickActive,
      'slick-center': slickCenter,
      'slick-cloned': slickCloned
    });
  };
  
  var getSlideStyle = function getSlideStyle(spec) {
    var style = {};
  
    if (spec.variableWidth === undefined || spec.variableWidth === false) {
      style.width = spec.slideWidth;
    }
  
    if (spec.fade) {
      style.position = 'relative';
      style.left = -spec.index * spec.slideWidth;
      style.opacity = spec.currentSlide === spec.index ? 1 : 0;
      style.transition = 'opacity ' + spec.speed + 'ms ' + spec.cssEase;
      style.WebkitTransition = 'opacity ' + spec.speed + 'ms ' + spec.cssEase;
    }
  
    return style;
  };
  
  var getKey = function getKey(child, fallbackKey) {
    // key could be a zero
    return child.key === null || child.key === undefined ? fallbackKey : child.key;
  };
  
  var renderSlides = function renderSlides(spec) {
    var key;
    var slides = [];
    var preCloneSlides = [];
    var postCloneSlides = [];
    var count = _react2['default'].Children.count(spec.children);
    var child;
  
    _react2['default'].Children.forEach(spec.children, function (elem, index) {
      if (!spec.lazyLoad | (spec.lazyLoad && spec.lazyLoadedList.indexOf(index) >= 0)) {
        child = elem;
      } else {
        child = _react2['default'].createElement('div', null);
      }
      var childStyle = getSlideStyle((0, _objectAssign2['default'])({}, spec, { index: index }));
      var slickClasses = getSlideClasses((0, _objectAssign2['default'])({ index: index }, spec));
      var cssClasses;
  
      if (child.props.className) {
        cssClasses = (0, _classnames2['default'])(slickClasses, child.props.className);
      } else {
        cssClasses = slickClasses;
      }
  
      slides.push(_react2['default'].cloneElement(child, {
        key: 'original' + getKey(child, index),
        'data-index': index,
        className: cssClasses,
        style: (0, _objectAssign2['default'])({}, child.props.style || {}, childStyle)
      }));
  
      // variableWidth doesn't wrap properly.
      if (spec.infinite && spec.fade === false) {
        var infiniteCount = spec.variableWidth ? spec.slidesToShow + 1 : spec.slidesToShow;
  
        if (index >= count - infiniteCount) {
          key = -(count - index);
          preCloneSlides.push(_react2['default'].cloneElement(child, {
            key: 'cloned' + getKey(child, key),
            'data-index': key,
            className: cssClasses,
            style: (0, _objectAssign2['default'])({}, child.props.style || {}, childStyle)
          }));
        }
  
        if (index < infiniteCount) {
          key = count + index;
          postCloneSlides.push(_react2['default'].cloneElement(child, {
            key: 'cloned' + getKey(child, key),
            'data-index': key,
            className: cssClasses,
            style: (0, _objectAssign2['default'])({}, child.props.style || {}, childStyle)
          }));
        }
      }
    });
  
    if (spec.rtl) {
      return preCloneSlides.concat(slides, postCloneSlides).reverse();
    } else {
      return preCloneSlides.concat(slides, postCloneSlides);
    }
  };
  
  var Track = exports.Track = _react2['default'].createClass({
    displayName: 'Track',
  
    render: function render() {
      var slides = renderSlides(this.props);
      return _react2['default'].createElement(
        'div',
        { className: 'slick-track', style: this.props.trackStyle },
        slides
      );
    }
  });

});

;/*!/node_modules/react-slick-ie8/lib/dots.js*/
define('common:node_modules/react-slick-ie8/lib/dots', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  exports.Dots = undefined;
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  var _classnames = require('common:node_modules/classnames/index');
  
  var _classnames2 = _interopRequireDefault(_classnames);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var getDotCount = function getDotCount(spec) {
    var dots;
    dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
    return dots;
  };
  
  var Dots = exports.Dots = _react2['default'].createClass({
    displayName: 'Dots',
  
  
    clickHandler: function clickHandler(options, e) {
      // In Autoplay the focus stays on clicked button even after transition
      // to next slide. That only goes away by click somewhere outside
      e.preventDefault();
      this.props.clickHandler(options);
    },
    render: function render() {
      var _this = this;
  
      var dotCount = getDotCount({
        slideCount: this.props.slideCount,
        slidesToScroll: this.props.slidesToScroll
      });
  
      // Apply join & split to Array to pre-fill it for IE8
      //
      // Credit: http://stackoverflow.com/a/13735425/1849458
      var dots = Array.apply(null, Array(dotCount + 1).join('0').split('')).map(function (x, i) {
  
        var className = (0, _classnames2['default'])({
          'slick-active': _this.props.currentSlide === i * _this.props.slidesToScroll
        });
  
        var dotOptions = {
          message: 'dots',
          index: i,
          slidesToScroll: _this.props.slidesToScroll,
          currentSlide: _this.props.currentSlide
        };
  
        return _react2['default'].createElement(
          'li',
          { key: i, className: className },
          _react2['default'].createElement(
            'button',
            { onClick: _this.clickHandler.bind(_this, dotOptions) },
            i + 1
          )
        );
      });
  
      return _react2['default'].createElement(
        'ul',
        { className: this.props.dotsClass, style: { display: 'block' } },
        dots
      );
    }
  });

});

;/*!/node_modules/react-slick-ie8/lib/arrows.js*/
define('common:node_modules/react-slick-ie8/lib/arrows', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  exports.NextArrow = exports.PrevArrow = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  var _classnames = require('common:node_modules/classnames/index');
  
  var _classnames2 = _interopRequireDefault(_classnames);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var PrevArrow = exports.PrevArrow = _react2['default'].createClass({
    displayName: 'PrevArrow',
  
  
    clickHandler: function clickHandler(options, e) {
      e.preventDefault();
      this.props.clickHandler(options, e);
    },
    render: function render() {
      var prevClasses = { 'slick-arrow': true, 'slick-prev': true };
      var prevHandler = this.clickHandler.bind(this, { message: 'previous' });
  
      if (!this.props.infinite && (this.props.currentSlide === 0 || this.props.slideCount <= this.props.slidesToShow)) {
        prevClasses['slick-disabled'] = true;
        prevHandler = null;
      }
  
      var prevArrowProps = {
        key: '0',
        'data-role': 'none',
        className: (0, _classnames2['default'])(prevClasses),
        style: { display: 'block' },
        onClick: prevHandler
      };
      var prevArrow;
  
      if (this.props.prevArrow) {
        prevArrow = _react2['default'].cloneElement(this.props.prevArrow, prevArrowProps);
      } else {
        prevArrow = _react2['default'].createElement(
          'button',
          _extends({ key: '0', type: 'button' }, prevArrowProps),
          ' Previous'
        );
      }
  
      return prevArrow;
    }
  });
  
  var NextArrow = exports.NextArrow = _react2['default'].createClass({
    displayName: 'NextArrow',
  
    clickHandler: function clickHandler(options, e) {
      e.preventDefault();
      this.props.clickHandler(options, e);
    },
    render: function render() {
      var nextClasses = { 'slick-arrow': true, 'slick-next': true };
      var nextHandler = this.clickHandler.bind(this, { message: 'next' });
  
      if (!this.props.infinite) {
        if (this.props.centerMode && this.props.currentSlide >= this.props.slideCount - 1) {
          nextClasses['slick-disabled'] = true;
          nextHandler = null;
        } else {
          if (this.props.currentSlide >= this.props.slideCount - this.props.slidesToShow) {
            nextClasses['slick-disabled'] = true;
            nextHandler = null;
          }
        }
  
        if (this.props.slideCount <= this.props.slidesToShow) {
          nextClasses['slick-disabled'] = true;
          nextHandler = null;
        }
      }
  
      var nextArrowProps = {
        key: '1',
        'data-role': 'none',
        className: (0, _classnames2['default'])(nextClasses),
        style: { display: 'block' },
        onClick: nextHandler
      };
  
      var nextArrow;
  
      if (this.props.nextArrow) {
        nextArrow = _react2['default'].cloneElement(this.props.nextArrow, nextArrowProps);
      } else {
        nextArrow = _react2['default'].createElement(
          'button',
          _extends({ key: '1', type: 'button' }, nextArrowProps),
          ' Next'
        );
      }
  
      return nextArrow;
    }
  });

});

;/*!/node_modules/react-slick-ie8/lib/inner-slider.js*/
define('common:node_modules/react-slick-ie8/lib/inner-slider', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  exports.InnerSlider = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  var _eventHandlers = require('common:node_modules/react-slick-ie8/lib/mixins/event-handlers');
  
  var _eventHandlers2 = _interopRequireDefault(_eventHandlers);
  
  var _helpers = require('common:node_modules/react-slick-ie8/lib/mixins/helpers');
  
  var _helpers2 = _interopRequireDefault(_helpers);
  
  var _initialState = require('common:node_modules/react-slick-ie8/lib/initial-state');
  
  var _initialState2 = _interopRequireDefault(_initialState);
  
  var _defaultProps = require('common:node_modules/react-slick-ie8/lib/default-props');
  
  var _defaultProps2 = _interopRequireDefault(_defaultProps);
  
  var _classnames = require('common:node_modules/classnames/index');
  
  var _classnames2 = _interopRequireDefault(_classnames);
  
  var _track = require('common:node_modules/react-slick-ie8/lib/track');
  
  var _dots = require('common:node_modules/react-slick-ie8/lib/dots');
  
  var _arrows = require('common:node_modules/react-slick-ie8/lib/arrows');
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var InnerSlider = exports.InnerSlider = _react2['default'].createClass({
    displayName: 'InnerSlider',
  
    mixins: [_helpers2['default'], _eventHandlers2['default']],
    getInitialState: function getInitialState() {
      return _initialState2['default'];
    },
    getDefaultProps: function getDefaultProps() {
      return _defaultProps2['default'];
    },
    componentWillMount: function componentWillMount() {
      if (this.props.init) {
        this.props.init();
      }
      this.setState({
        mounted: true
      });
      var lazyLoadedList = [];
      for (var i = 0; i < _react2['default'].Children.count(this.props.children); i++) {
        if (i >= this.state.currentSlide && i < this.state.currentSlide + this.props.slidesToShow) {
          lazyLoadedList.push(i);
        }
      }
  
      if (this.props.lazyLoad && this.state.lazyLoadedList.length === 0) {
        this.setState({
          lazyLoadedList: lazyLoadedList
        });
      }
    },
    componentDidMount: function componentDidMount() {
      // Hack for autoplay -- Inspect Later
      this.initialize(this.props);
      this.adaptHeight();
      if (window.addEventListener) {
        window.addEventListener('resize', this.onWindowResized);
      } else {
        window.attachEvent('onresize', this.onWindowResized);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      if (window.addEventListener) {
        window.removeEventListener('resize', this.onWindowResized);
      } else {
        window.detachEvent('onresize', this.onWindowResized);
      }
      if (this.state.autoPlayTimer) {
        window.clearInterval(this.state.autoPlayTimer);
      }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (this.props.slickGoTo != nextProps.slickGoTo) {
        this.changeSlide({
          message: 'index',
          index: nextProps.slickGoTo,
          currentSlide: this.state.currentSlide
        });
      } else {
        this.update(nextProps);
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      this.adaptHeight();
    },
    onWindowResized: function onWindowResized() {
      this.update(this.props);
    },
    render: function render() {
      var className = (0, _classnames2['default'])('slick-initialized', 'slick-slider', this.props.className);
  
      var trackProps = {
        fade: this.props.fade,
        cssEase: this.props.cssEase,
        speed: this.props.speed,
        infinite: this.props.infinite,
        centerMode: this.props.centerMode,
        currentSlide: this.state.currentSlide,
        lazyLoad: this.props.lazyLoad,
        lazyLoadedList: this.state.lazyLoadedList,
        rtl: this.props.rtl,
        slideWidth: this.state.slideWidth,
        slidesToShow: this.props.slidesToShow,
        slideCount: this.state.slideCount,
        trackStyle: this.state.trackStyle,
        variableWidth: this.props.variableWidth
      };
  
      var dots;
  
      if (this.props.dots === true && this.state.slideCount > this.props.slidesToShow) {
        var dotProps = {
          dotsClass: this.props.dotsClass,
          slideCount: this.state.slideCount,
          slidesToShow: this.props.slidesToShow,
          currentSlide: this.state.currentSlide,
          slidesToScroll: this.props.slidesToScroll,
          clickHandler: this.changeSlide
        };
  
        dots = _react2['default'].createElement(_dots.Dots, dotProps);
      }
  
      var prevArrow, nextArrow;
  
      var arrowProps = {
        infinite: this.props.infinite,
        centerMode: this.props.centerMode,
        currentSlide: this.state.currentSlide,
        slideCount: this.state.slideCount,
        slidesToShow: this.props.slidesToShow,
        prevArrow: this.props.prevArrow,
        nextArrow: this.props.nextArrow,
        clickHandler: this.changeSlide
      };
  
      if (this.props.arrows) {
        prevArrow = _react2['default'].createElement(_arrows.PrevArrow, arrowProps);
        nextArrow = _react2['default'].createElement(_arrows.NextArrow, arrowProps);
      }
  
      return _react2['default'].createElement(
        'div',
        { className: className, onMouseEnter: this.onInnerSliderEnter, onMouseLeave: this.onInnerSliderLeave },
        _react2['default'].createElement(
          'div',
          {
            ref: 'list',
            className: 'slick-list',
            onMouseDown: this.swipeStart,
            onMouseMove: this.state.dragging ? this.swipeMove : null,
            onMouseUp: this.swipeEnd,
            onMouseLeave: this.state.dragging ? this.swipeEnd : null,
            onTouchStart: this.swipeStart,
            onTouchMove: this.state.dragging ? this.swipeMove : null,
            onTouchEnd: this.swipeEnd,
            onTouchCancel: this.state.dragging ? this.swipeEnd : null },
          _react2['default'].createElement(
            _track.Track,
            _extends({ ref: 'track' }, trackProps),
            this.props.children
          )
        ),
        prevArrow,
        nextArrow,
        dots
      );
    }
  });

});

;/*!/node_modules/string-convert/camel2hyphen.js*/
define('common:node_modules/string-convert/camel2hyphen', function(require, exports, module) {

  var camel2hyphen = function (str) {
    return str
            .replace(/[A-Z]/g, function (match) {
              return '-' + match.toLowerCase();
            })
            .toLowerCase();
  };
  
  module.exports = camel2hyphen;

});

;/*!/node_modules/json2mq/index.js*/
define('common:node_modules/json2mq/index', function(require, exports, module) {

  var camel2hyphen = require('common:node_modules/string-convert/camel2hyphen');
  
  var isDimension = function (feature) {
    var re = /[height|width]$/;
    return re.test(feature);
  };
  
  var obj2mq = function (obj) {
    var mq = '';
    var features = Object.keys(obj);
    features.forEach(function (feature, index) {
      var value = obj[feature];
      feature = camel2hyphen(feature);
      // Add px to dimension features
      if (isDimension(feature) && typeof value === 'number') {
        value = value + 'px';
      }
      if (value === true) {
        mq += feature;
      } else if (value === false) {
        mq += 'not ' + feature;
      } else {
        mq += '(' + feature + ': ' + value + ')';
      }
      if (index < features.length-1) {
        mq += ' and '
      }
    });
    return mq;
  };
  
  var json2mq = function (query) {
    var mq = '';
    if (typeof query === 'string') {
      return query;
    }
    // Handling array of media queries
    if (query instanceof Array) {
      query.forEach(function (q, index) {
        mq += obj2mq(q);
        if (index < query.length-1) {
          mq += ', '
        }
      });
      return mq;
    }
    // Handling single media query
    return obj2mq(query);
  };
  
  module.exports = json2mq;

});

;/*!/node_modules/can-use-dom/index.js*/
define('common:node_modules/can-use-dom/index', function(require, exports, module) {

  var canUseDOM = !!(
    typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement
  );
  
  module.exports = canUseDOM;

});

;/*!/node_modules/enquire.js/src/QueryHandler.js*/
define('common:node_modules/enquire.js/src/QueryHandler', function(require, exports, module) {

  /**
   * Delegate to handle a media query being matched and unmatched.
   *
   * @param {object} options
   * @param {function} options.match callback for when the media query is matched
   * @param {function} [options.unmatch] callback for when the media query is unmatched
   * @param {function} [options.setup] one-time callback triggered the first time a query is matched
   * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
   * @constructor
   */
  function QueryHandler(options) {
      this.options = options;
      !options.deferSetup && this.setup();
  }
  
  QueryHandler.prototype = {
  
      constructor : QueryHandler,
  
      /**
       * coordinates setup of the handler
       *
       * @function
       */
      setup : function() {
          if(this.options.setup) {
              this.options.setup();
          }
          this.initialised = true;
      },
  
      /**
       * coordinates setup and triggering of the handler
       *
       * @function
       */
      on : function() {
          !this.initialised && this.setup();
          this.options.match && this.options.match();
      },
  
      /**
       * coordinates the unmatch event for the handler
       *
       * @function
       */
      off : function() {
          this.options.unmatch && this.options.unmatch();
      },
  
      /**
       * called when a handler is to be destroyed.
       * delegates to the destroy or unmatch callbacks, depending on availability.
       *
       * @function
       */
      destroy : function() {
          this.options.destroy ? this.options.destroy() : this.off();
      },
  
      /**
       * determines equality by reference.
       * if object is supplied compare options, if function, compare match callback
       *
       * @function
       * @param {object || function} [target] the target for comparison
       */
      equals : function(target) {
          return this.options === target || this.options.match === target;
      }
  
  };
  
  module.exports = QueryHandler;
  

});

;/*!/node_modules/enquire.js/src/Util.js*/
define('common:node_modules/enquire.js/src/Util', function(require, exports, module) {

  /**
   * Helper function for iterating over a collection
   *
   * @param collection
   * @param fn
   */
  function each(collection, fn) {
      var i      = 0,
          length = collection.length,
          cont;
  
      for(i; i < length; i++) {
          cont = fn(collection[i], i);
          if(cont === false) {
              break; //allow early exit
          }
      }
  }
  
  /**
   * Helper function for determining whether target object is an array
   *
   * @param target the object under test
   * @return {Boolean} true if array, false otherwise
   */
  function isArray(target) {
      return Object.prototype.toString.apply(target) === '[object Array]';
  }
  
  /**
   * Helper function for determining whether target object is a function
   *
   * @param target the object under test
   * @return {Boolean} true if function, false otherwise
   */
  function isFunction(target) {
      return typeof target === 'function';
  }
  
  module.exports = {
      isFunction : isFunction,
      isArray : isArray,
      each : each
  };
  

});

;/*!/node_modules/enquire.js/src/MediaQuery.js*/
define('common:node_modules/enquire.js/src/MediaQuery', function(require, exports, module) {

  var QueryHandler = require('common:node_modules/enquire.js/src/QueryHandler');
  var each = require('common:node_modules/enquire.js/src/Util').each;
  
  /**
   * Represents a single media query, manages it's state and registered handlers for this query
   *
   * @constructor
   * @param {string} query the media query string
   * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
   */
  function MediaQuery(query, isUnconditional) {
      this.query = query;
      this.isUnconditional = isUnconditional;
      this.handlers = [];
      this.mql = window.matchMedia(query);
  
      var self = this;
      this.listener = function(mql) {
          // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly
          self.mql = mql.currentTarget || mql;
          self.assess();
      };
      this.mql.addListener(this.listener);
  }
  
  MediaQuery.prototype = {
  
      constuctor : MediaQuery,
  
      /**
       * add a handler for this query, triggering if already active
       *
       * @param {object} handler
       * @param {function} handler.match callback for when query is activated
       * @param {function} [handler.unmatch] callback for when query is deactivated
       * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
       * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
       */
      addHandler : function(handler) {
          var qh = new QueryHandler(handler);
          this.handlers.push(qh);
  
          this.matches() && qh.on();
      },
  
      /**
       * removes the given handler from the collection, and calls it's destroy methods
       *
       * @param {object || function} handler the handler to remove
       */
      removeHandler : function(handler) {
          var handlers = this.handlers;
          each(handlers, function(h, i) {
              if(h.equals(handler)) {
                  h.destroy();
                  return !handlers.splice(i,1); //remove from array and exit each early
              }
          });
      },
  
      /**
       * Determine whether the media query should be considered a match
       *
       * @return {Boolean} true if media query can be considered a match, false otherwise
       */
      matches : function() {
          return this.mql.matches || this.isUnconditional;
      },
  
      /**
       * Clears all handlers and unbinds events
       */
      clear : function() {
          each(this.handlers, function(handler) {
              handler.destroy();
          });
          this.mql.removeListener(this.listener);
          this.handlers.length = 0; //clear array
      },
  
      /*
          * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
          */
      assess : function() {
          var action = this.matches() ? 'on' : 'off';
  
          each(this.handlers, function(handler) {
              handler[action]();
          });
      }
  };
  
  module.exports = MediaQuery;
  

});

;/*!/node_modules/enquire.js/src/MediaQueryDispatch.js*/
define('common:node_modules/enquire.js/src/MediaQueryDispatch', function(require, exports, module) {

  var MediaQuery = require('common:node_modules/enquire.js/src/MediaQuery');
  var Util = require('common:node_modules/enquire.js/src/Util');
  var each = Util.each;
  var isFunction = Util.isFunction;
  var isArray = Util.isArray;
  
  /**
   * Allows for registration of query handlers.
   * Manages the query handler's state and is responsible for wiring up browser events
   *
   * @constructor
   */
  function MediaQueryDispatch () {
      if(!window.matchMedia) {
          throw new Error('matchMedia not present, legacy browsers require a polyfill');
      }
  
      this.queries = {};
      this.browserIsIncapable = !window.matchMedia('only all').matches;
  }
  
  MediaQueryDispatch.prototype = {
  
      constructor : MediaQueryDispatch,
  
      /**
       * Registers a handler for the given media query
       *
       * @param {string} q the media query
       * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
       * @param {function} options.match fired when query matched
       * @param {function} [options.unmatch] fired when a query is no longer matched
       * @param {function} [options.setup] fired when handler first triggered
       * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
       * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
       */
      register : function(q, options, shouldDegrade) {
          var queries         = this.queries,
              isUnconditional = shouldDegrade && this.browserIsIncapable;
  
          if(!queries[q]) {
              queries[q] = new MediaQuery(q, isUnconditional);
          }
  
          //normalise to object in an array
          if(isFunction(options)) {
              options = { match : options };
          }
          if(!isArray(options)) {
              options = [options];
          }
          each(options, function(handler) {
              if (isFunction(handler)) {
                  handler = { match : handler };
              }
              queries[q].addHandler(handler);
          });
  
          return this;
      },
  
      /**
       * unregisters a query and all it's handlers, or a specific handler for a query
       *
       * @param {string} q the media query to target
       * @param {object || function} [handler] specific handler to unregister
       */
      unregister : function(q, handler) {
          var query = this.queries[q];
  
          if(query) {
              if(handler) {
                  query.removeHandler(handler);
              }
              else {
                  query.clear();
                  delete this.queries[q];
              }
          }
  
          return this;
      }
  };
  
  module.exports = MediaQueryDispatch;
  

});

;/*!/node_modules/enquire.js/src/index.js*/
define('common:node_modules/enquire.js/src/index', function(require, exports, module) {

  var MediaQueryDispatch = require('common:node_modules/enquire.js/src/MediaQueryDispatch');
  module.exports = new MediaQueryDispatch();
  

});

;/*!/node_modules/react-responsive-mixin/index.js*/
define('common:node_modules/react-responsive-mixin/index', function(require, exports, module) {

  var canUseDOM = require('common:node_modules/can-use-dom/index');
  var enquire = canUseDOM && require('common:node_modules/enquire.js/src/index');
  var json2mq = require('common:node_modules/json2mq/index');
  
  var ResponsiveMixin = {
    media: function (query, handler) {
      query = json2mq(query);
      if (typeof handler === 'function') {
        handler = {
          match: handler
        };
      }
      enquire.register(query, handler);
  
      // Queue the handlers to unregister them at unmount  
      if (! this._responsiveMediaHandlers) {
        this._responsiveMediaHandlers = [];
      }
      this._responsiveMediaHandlers.push({query: query, handler: handler});
    },
    componentWillUnmount: function () {
      if (this._responsiveMediaHandlers) {
        this._responsiveMediaHandlers.forEach(function(obj) {
          enquire.unregister(obj.query, obj.handler);
        });
      }
    }
  };
  
  module.exports = ResponsiveMixin;

});

;/*!/node_modules/react-slick-ie8/lib/slider.js*/
define('common:node_modules/react-slick-ie8/lib/slider', function(require, exports, module) {

  'use strict';
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  var _innerSlider = require('common:node_modules/react-slick-ie8/lib/inner-slider');
  
  var _objectAssign = require('common:node_modules/object-assign/index');
  
  var _objectAssign2 = _interopRequireDefault(_objectAssign);
  
  var _json2mq = require('common:node_modules/json2mq/index');
  
  var _json2mq2 = _interopRequireDefault(_json2mq);
  
  var _reactResponsiveMixin = require('common:node_modules/react-responsive-mixin/index');
  
  var _reactResponsiveMixin2 = _interopRequireDefault(_reactResponsiveMixin);
  
  var _defaultProps = require('common:node_modules/react-slick-ie8/lib/default-props');
  
  var _defaultProps2 = _interopRequireDefault(_defaultProps);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var Slider = _react2['default'].createClass({
    displayName: 'Slider',
  
    mixins: [_reactResponsiveMixin2['default']],
    getInitialState: function getInitialState() {
      return {
        breakpoint: null
      };
    },
    componentDidMount: function componentDidMount() {
      var _this = this;
  
      if (this.props.responsive) {
        var breakpoints = this.props.responsive.map(function (breakpt) {
          return breakpt.breakpoint;
        });
        breakpoints.sort(function (x, y) {
          return x - y;
        });
  
        breakpoints.forEach(function (breakpoint, index) {
          var bQuery;
          if (index === 0) {
            bQuery = (0, _json2mq2['default'])({ minWidth: 0, maxWidth: breakpoint });
          } else {
            bQuery = (0, _json2mq2['default'])({ minWidth: breakpoints[index - 1], maxWidth: breakpoint });
          }
          _this.media(bQuery, function () {
            _this.setState({ breakpoint: breakpoint });
          });
        });
  
        // Register media query for full screen. Need to support resize from small to large
        var query = (0, _json2mq2['default'])({ minWidth: breakpoints.slice(-1)[0] });
  
        this.media(query, function () {
          _this.setState({ breakpoint: null });
        });
      }
    },
    render: function render() {
      var _this2 = this;
  
      var settings;
      var newProps;
      if (this.state.breakpoint) {
        newProps = this.props.responsive.filter(function (resp) {
          return resp.breakpoint === _this2.state.breakpoint;
        });
        settings = newProps[0].settings === 'unslick' ? 'unslick' : (0, _objectAssign2['default'])({}, this.props, newProps[0].settings);
      } else {
        settings = (0, _objectAssign2['default'])({}, _defaultProps2['default'], this.props);
      }
      if (settings === 'unslick') {
        // if 'unslick' responsive breakpoint setting used, just return the <Slider> tag nested HTML
        return _react2['default'].createElement(
          'div',
          null,
          this.props.children
        );
      } else {
        return _react2['default'].createElement(
          _innerSlider.InnerSlider,
          settings,
          this.props.children
        );
      }
    }
  });
  
  module.exports = Slider;

});

;/*!/node_modules/react-slick-ie8/lib/index.js*/
define('common:node_modules/react-slick-ie8/lib/index', function(require, exports, module) {

  'use strict';
  
  module.exports = require('common:node_modules/react-slick-ie8/lib/slider');

});

;/*!/node_modules/moment/moment.js*/
define('common:node_modules/moment/moment', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  //! moment.js
  //! version : 2.18.1
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com
  
  ;(function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define(factory) :
      global.moment = factory()
  }(this, (function () { 'use strict';
  
  var hookCallback;
  
  function hooks () {
      return hookCallback.apply(null, arguments);
  }
  
  // This is done to register the method called with moment()
  // without creating circular dependencies.
  function setHookCallback (callback) {
      hookCallback = callback;
  }
  
  function isArray(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
  }
  
  function isObject(input) {
      // IE8 will treat undefined and null as object if it wasn't for
      // input != null
      return input != null && Object.prototype.toString.call(input) === '[object Object]';
  }
  
  function isObjectEmpty(obj) {
      var k;
      for (k in obj) {
          // even if its not own property I'd still call it non-empty
          return false;
      }
      return true;
  }
  
  function isUndefined(input) {
      return input === void 0;
  }
  
  function isNumber(input) {
      return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
  }
  
  function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
  }
  
  function map(arr, fn) {
      var res = [], i;
      for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
      }
      return res;
  }
  
  function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
  }
  
  function extend(a, b) {
      for (var i in b) {
          if (hasOwnProp(b, i)) {
              a[i] = b[i];
          }
      }
  
      if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
      }
  
      if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
      }
  
      return a;
  }
  
  function createUTC (input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
  }
  
  function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
          empty           : false,
          unusedTokens    : [],
          unusedInput     : [],
          overflow        : -2,
          charsLeftOver   : 0,
          nullInput       : false,
          invalidMonth    : null,
          invalidFormat   : false,
          userInvalidated : false,
          iso             : false,
          parsedDateParts : [],
          meridiem        : null,
          rfc2822         : false,
          weekdayMismatch : false
      };
  }
  
  function getParsingFlags(m) {
      if (m._pf == null) {
          m._pf = defaultParsingFlags();
      }
      return m._pf;
  }
  
  var some;
  if (Array.prototype.some) {
      some = Array.prototype.some;
  } else {
      some = function (fun) {
          var t = Object(this);
          var len = t.length >>> 0;
  
          for (var i = 0; i < len; i++) {
              if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
              }
          }
  
          return false;
      };
  }
  
  var some$1 = some;
  
  function isValid(m) {
      if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
              return i != null;
          });
          var isNowValid = !isNaN(m._d.getTime()) &&
              flags.overflow < 0 &&
              !flags.empty &&
              !flags.invalidMonth &&
              !flags.invalidWeekday &&
              !flags.nullInput &&
              !flags.invalidFormat &&
              !flags.userInvalidated &&
              (!flags.meridiem || (flags.meridiem && parsedParts));
  
          if (m._strict) {
              isNowValid = isNowValid &&
                  flags.charsLeftOver === 0 &&
                  flags.unusedTokens.length === 0 &&
                  flags.bigHour === undefined;
          }
  
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
              m._isValid = isNowValid;
          }
          else {
              return isNowValid;
          }
      }
      return m._isValid;
  }
  
  function createInvalid (flags) {
      var m = createUTC(NaN);
      if (flags != null) {
          extend(getParsingFlags(m), flags);
      }
      else {
          getParsingFlags(m).userInvalidated = true;
      }
  
      return m;
  }
  
  // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.
  var momentProperties = hooks.momentProperties = [];
  
  function copyConfig(to, from) {
      var i, prop, val;
  
      if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
      }
      if (!isUndefined(from._i)) {
          to._i = from._i;
      }
      if (!isUndefined(from._f)) {
          to._f = from._f;
      }
      if (!isUndefined(from._l)) {
          to._l = from._l;
      }
      if (!isUndefined(from._strict)) {
          to._strict = from._strict;
      }
      if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
      }
      if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
      }
      if (!isUndefined(from._offset)) {
          to._offset = from._offset;
      }
      if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
      }
      if (!isUndefined(from._locale)) {
          to._locale = from._locale;
      }
  
      if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
              prop = momentProperties[i];
              val = from[prop];
              if (!isUndefined(val)) {
                  to[prop] = val;
              }
          }
      }
  
      return to;
  }
  
  var updateInProgress = false;
  
  // Moment prototype object
  function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      if (!this.isValid()) {
          this._d = new Date(NaN);
      }
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
      }
  }
  
  function isMoment (obj) {
      return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
  }
  
  function absFloor (number) {
      if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
      } else {
          return Math.floor(number);
      }
  }
  
  function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
          value = 0;
  
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
      }
  
      return value;
  }
  
  // compare two arrays, return the number of differences
  function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
      for (i = 0; i < len; i++) {
          if ((dontConvert && array1[i] !== array2[i]) ||
              (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
              diffs++;
          }
      }
      return diffs + lengthDiff;
  }
  
  function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false &&
              (typeof console !==  'undefined') && console.warn) {
          console.warn('Deprecation warning: ' + msg);
      }
  }
  
  function deprecate(msg, fn) {
      var firstTime = true;
  
      return extend(function () {
          if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
              var args = [];
              var arg;
              for (var i = 0; i < arguments.length; i++) {
                  arg = '';
                  if (typeof arguments[i] === 'object') {
                      arg += '\n[' + i + '] ';
                      for (var key in arguments[0]) {
                          arg += key + ': ' + arguments[0][key] + ', ';
                      }
                      arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                      arg = arguments[i];
                  }
                  args.push(arg);
              }
              warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
              firstTime = false;
          }
          return fn.apply(this, arguments);
      }, fn);
  }
  
  var deprecations = {};
  
  function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
      }
  }
  
  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;
  
  function isFunction(input) {
      return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
  }
  
  function set (config) {
      var prop, i;
      for (i in config) {
          prop = config[i];
          if (isFunction(prop)) {
              this[i] = prop;
          } else {
              this['_' + i] = prop;
          }
      }
      this._config = config;
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
      // TODO: Remove "ordinalParse" fallback in next major release.
      this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
              '|' + (/\d{1,2}/).source);
  }
  
  function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
              if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
              } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
              } else {
                  delete res[prop];
              }
          }
      }
      for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) &&
                  !hasOwnProp(childConfig, prop) &&
                  isObject(parentConfig[prop])) {
              // make sure changes to properties don't modify parent config
              res[prop] = extend({}, res[prop]);
          }
      }
      return res;
  }
  
  function Locale(config) {
      if (config != null) {
          this.set(config);
      }
  }
  
  var keys;
  
  if (Object.keys) {
      keys = Object.keys;
  } else {
      keys = function (obj) {
          var i, res = [];
          for (i in obj) {
              if (hasOwnProp(obj, i)) {
                  res.push(i);
              }
          }
          return res;
      };
  }
  
  var keys$1 = keys;
  
  var defaultCalendar = {
      sameDay : '[Today at] LT',
      nextDay : '[Tomorrow at] LT',
      nextWeek : 'dddd [at] LT',
      lastDay : '[Yesterday at] LT',
      lastWeek : '[Last] dddd [at] LT',
      sameElse : 'L'
  };
  
  function calendar (key, mom, now) {
      var output = this._calendar[key] || this._calendar['sameElse'];
      return isFunction(output) ? output.call(mom, now) : output;
  }
  
  var defaultLongDateFormat = {
      LTS  : 'h:mm:ss A',
      LT   : 'h:mm A',
      L    : 'MM/DD/YYYY',
      LL   : 'MMMM D, YYYY',
      LLL  : 'MMMM D, YYYY h:mm A',
      LLLL : 'dddd, MMMM D, YYYY h:mm A'
  };
  
  function longDateFormat (key) {
      var format = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];
  
      if (format || !formatUpper) {
          return format;
      }
  
      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1);
      });
  
      return this._longDateFormat[key];
  }
  
  var defaultInvalidDate = 'Invalid date';
  
  function invalidDate () {
      return this._invalidDate;
  }
  
  var defaultOrdinal = '%d';
  var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
  
  function ordinal (number) {
      return this._ordinal.replace('%d', number);
  }
  
  var defaultRelativeTime = {
      future : 'in %s',
      past   : '%s ago',
      s  : 'a few seconds',
      ss : '%d seconds',
      m  : 'a minute',
      mm : '%d minutes',
      h  : 'an hour',
      hh : '%d hours',
      d  : 'a day',
      dd : '%d days',
      M  : 'a month',
      MM : '%d months',
      y  : 'a year',
      yy : '%d years'
  };
  
  function relativeTime (number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return (isFunction(output)) ?
          output(number, withoutSuffix, string, isFuture) :
          output.replace(/%d/i, number);
  }
  
  function pastFuture (diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return isFunction(format) ? format(output) : format.replace(/%s/i, output);
  }
  
  var aliases = {};
  
  function addUnitAlias (unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
  }
  
  function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
  }
  
  function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
          normalizedProp,
          prop;
  
      for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
              normalizedProp = normalizeUnits(prop);
              if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
              }
          }
      }
  
      return normalizedInput;
  }
  
  var priorities = {};
  
  function addUnitPriority(unit, priority) {
      priorities[unit] = priority;
  }
  
  function getPrioritizedUnits(unitsObj) {
      var units = [];
      for (var u in unitsObj) {
          units.push({unit: u, priority: priorities[u]});
      }
      units.sort(function (a, b) {
          return a.priority - b.priority;
      });
      return units;
  }
  
  function makeGetSet (unit, keepTime) {
      return function (value) {
          if (value != null) {
              set$1(this, unit, value);
              hooks.updateOffset(this, keepTime);
              return this;
          } else {
              return get(this, unit);
          }
      };
  }
  
  function get (mom, unit) {
      return mom.isValid() ?
          mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
  }
  
  function set$1 (mom, unit, value) {
      if (mom.isValid()) {
          mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
      }
  }
  
  // MOMENTS
  
  function stringGet (units) {
      units = normalizeUnits(units);
      if (isFunction(this[units])) {
          return this[units]();
      }
      return this;
  }
  
  
  function stringSet (units, value) {
      if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);
          for (var i = 0; i < prioritized.length; i++) {
              this[prioritized[i].unit](units[prioritized[i].unit]);
          }
      } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
              return this[units](value);
          }
      }
      return this;
  }
  
  function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign = number >= 0;
      return (sign ? (forceSign ? '+' : '') : '-') +
          Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
  }
  
  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
  
  var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
  
  var formatFunctions = {};
  
  var formatTokenFunctions = {};
  
  // token:    'M'
  // padded:   ['MM', 2]
  // ordinal:  'Mo'
  // callback: function () { this.month() + 1 }
  function addFormatToken (token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
          func = function () {
              return this[callback]();
          };
      }
      if (token) {
          formatTokenFunctions[token] = func;
      }
      if (padded) {
          formatTokenFunctions[padded[0]] = function () {
              return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
      }
      if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
              return this.localeData().ordinal(func.apply(this, arguments), token);
          };
      }
  }
  
  function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
  }
  
  function makeFormatFunction(format) {
      var array = format.match(formattingTokens), i, length;
  
      for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
              array[i] = formatTokenFunctions[array[i]];
          } else {
              array[i] = removeFormattingTokens(array[i]);
          }
      }
  
      return function (mom) {
          var output = '', i;
          for (i = 0; i < length; i++) {
              output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
          }
          return output;
      };
  }
  
  // format date using native date object
  function formatMoment(m, format) {
      if (!m.isValid()) {
          return m.localeData().invalidDate();
      }
  
      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
  
      return formatFunctions[format](m);
  }
  
  function expandFormat(format, locale) {
      var i = 5;
  
      function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
      }
  
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
      }
  
      return format;
  }
  
  var match1         = /\d/;            //       0 - 9
  var match2         = /\d\d/;          //      00 - 99
  var match3         = /\d{3}/;         //     000 - 999
  var match4         = /\d{4}/;         //    0000 - 9999
  var match6         = /[+-]?\d{6}/;    // -999999 - 999999
  var match1to2      = /\d\d?/;         //       0 - 99
  var match3to4      = /\d\d\d\d?/;     //     999 - 9999
  var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
  var match1to3      = /\d{1,3}/;       //       0 - 999
  var match1to4      = /\d{1,4}/;       //       0 - 9999
  var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
  
  var matchUnsigned  = /\d+/;           //       0 - inf
  var matchSigned    = /[+-]?\d+/;      //    -inf - inf
  
  var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
  var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
  
  var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
  
  // any word (or two) characters or numbers including two/three word month in arabic.
  // includes scottish gaelic two word and hyphenated months
  var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
  
  
  var regexes = {};
  
  function addRegexToken (token, regex, strictRegex) {
      regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return (isStrict && strictRegex) ? strictRegex : regex;
      };
  }
  
  function getParseRegexForToken (token, config) {
      if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
      }
  
      return regexes[token](config._strict, config._locale);
  }
  
  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
  function unescapeFormat(s) {
      return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
      }));
  }
  
  function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  
  var tokens = {};
  
  function addParseToken (token, callback) {
      var i, func = callback;
      if (typeof token === 'string') {
          token = [token];
      }
      if (isNumber(callback)) {
          func = function (input, array) {
              array[callback] = toInt(input);
          };
      }
      for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
      }
  }
  
  function addWeekParseToken (token, callback) {
      addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
      });
  }
  
  function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
      }
  }
  
  var YEAR = 0;
  var MONTH = 1;
  var DATE = 2;
  var HOUR = 3;
  var MINUTE = 4;
  var SECOND = 5;
  var MILLISECOND = 6;
  var WEEK = 7;
  var WEEKDAY = 8;
  
  var indexOf;
  
  if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
  } else {
      indexOf = function (o) {
          // I know
          var i;
          for (i = 0; i < this.length; ++i) {
              if (this[i] === o) {
                  return i;
              }
          }
          return -1;
      };
  }
  
  var indexOf$1 = indexOf;
  
  function daysInMonth(year, month) {
      return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
  }
  
  // FORMATTING
  
  addFormatToken('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
  });
  
  addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format);
  });
  
  addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format);
  });
  
  // ALIASES
  
  addUnitAlias('month', 'M');
  
  // PRIORITY
  
  addUnitPriority('month', 8);
  
  // PARSING
  
  addRegexToken('M',    match1to2);
  addRegexToken('MM',   match1to2, match2);
  addRegexToken('MMM',  function (isStrict, locale) {
      return locale.monthsShortRegex(isStrict);
  });
  addRegexToken('MMMM', function (isStrict, locale) {
      return locale.monthsRegex(isStrict);
  });
  
  addParseToken(['M', 'MM'], function (input, array) {
      array[MONTH] = toInt(input) - 1;
  });
  
  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
          array[MONTH] = month;
      } else {
          getParsingFlags(config).invalidMonth = input;
      }
  });
  
  // LOCALES
  
  var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
  function localeMonths (m, format) {
      if (!m) {
          return isArray(this._months) ? this._months :
              this._months['standalone'];
      }
      return isArray(this._months) ? this._months[m.month()] :
          this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
  }
  
  var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
  function localeMonthsShort (m, format) {
      if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort :
              this._monthsShort['standalone'];
      }
      return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
          this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
  }
  
  function handleStrictParse(monthName, format, strict) {
      var i, ii, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
              mom = createUTC([2000, i]);
              this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
              this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
      }
  
      if (strict) {
          if (format === 'MMM') {
              ii = indexOf$1.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$1.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
          }
      } else {
          if (format === 'MMM') {
              ii = indexOf$1.call(this._shortMonthsParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$1.call(this._longMonthsParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
          }
      }
  }
  
  function localeMonthsParse (monthName, format, strict) {
      var i, mom, regex;
  
      if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
      }
  
      if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
      }
  
      // TODO: add sorting
      // Sorting makes sure if one month (or abbr) is a prefix of another
      // see sorting in computeMonthsParse
      for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          if (strict && !this._longMonthsParse[i]) {
              this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
              this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }
          if (!strict && !this._monthsParse[i]) {
              regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
              this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
              return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
              return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
              return i;
          }
      }
  }
  
  // MOMENTS
  
  function setMonth (mom, value) {
      var dayOfMonth;
  
      if (!mom.isValid()) {
          // No op
          return mom;
      }
  
      if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
              value = toInt(value);
          } else {
              value = mom.localeData().monthsParse(value);
              // TODO: Another silent failure?
              if (!isNumber(value)) {
                  return mom;
              }
          }
      }
  
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom;
  }
  
  function getSetMonth (value) {
      if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
      } else {
          return get(this, 'Month');
      }
  }
  
  function getDaysInMonth () {
      return daysInMonth(this.year(), this.month());
  }
  
  var defaultMonthsShortRegex = matchWord;
  function monthsShortRegex (isStrict) {
      if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
              computeMonthsParse.call(this);
          }
          if (isStrict) {
              return this._monthsShortStrictRegex;
          } else {
              return this._monthsShortRegex;
          }
      } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
              this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ?
              this._monthsShortStrictRegex : this._monthsShortRegex;
      }
  }
  
  var defaultMonthsRegex = matchWord;
  function monthsRegex (isStrict) {
      if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
              computeMonthsParse.call(this);
          }
          if (isStrict) {
              return this._monthsStrictRegex;
          } else {
              return this._monthsRegex;
          }
      } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
              this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ?
              this._monthsStrictRegex : this._monthsRegex;
      }
  }
  
  function computeMonthsParse () {
      function cmpLenRev(a, b) {
          return b.length - a.length;
      }
  
      var shortPieces = [], longPieces = [], mixedPieces = [],
          i, mom;
      for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
      }
      // Sorting makes sure if one month (or abbr) is a prefix of another it
      // will match the longer piece.
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
      }
      for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
      }
  
      this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
  }
  
  // FORMATTING
  
  addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? '' + y : '+' + y;
  });
  
  addFormatToken(0, ['YY', 2], 0, function () {
      return this.year() % 100;
  });
  
  addFormatToken(0, ['YYYY',   4],       0, 'year');
  addFormatToken(0, ['YYYYY',  5],       0, 'year');
  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
  
  // ALIASES
  
  addUnitAlias('year', 'y');
  
  // PRIORITIES
  
  addUnitPriority('year', 1);
  
  // PARSING
  
  addRegexToken('Y',      matchSigned);
  addRegexToken('YY',     match1to2, match2);
  addRegexToken('YYYY',   match1to4, match4);
  addRegexToken('YYYYY',  match1to6, match6);
  addRegexToken('YYYYYY', match1to6, match6);
  
  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken('YY', function (input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10);
  });
  
  // HELPERS
  
  function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
  }
  
  function isLeapYear(year) {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
  }
  
  // HOOKS
  
  hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  };
  
  // MOMENTS
  
  var getSetYear = makeGetSet('FullYear', true);
  
  function getIsLeapYear () {
      return isLeapYear(this.year());
  }
  
  function createDate (y, m, d, h, M, s, ms) {
      // can't just apply() to create a date:
      // https://stackoverflow.com/q/181348
      var date = new Date(y, m, d, h, M, s, ms);
  
      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
          date.setFullYear(y);
      }
      return date;
  }
  
  function createUTCDate (y) {
      var date = new Date(Date.UTC.apply(null, arguments));
  
      // the Date.UTC function remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y);
      }
      return date;
  }
  
  // start-of-first-week - start-of-year
  function firstWeekOffset(year, dow, doy) {
      var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
          fwd = 7 + dow - doy,
          // first-week day local weekday -- which local weekday is fwd
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  
      return -fwdlw + fwd - 1;
  }
  
  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7,
          weekOffset = firstWeekOffset(year, dow, doy),
          dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
          resYear, resDayOfYear;
  
      if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
      } else {
          resYear = year;
          resDayOfYear = dayOfYear;
      }
  
      return {
          year: resYear,
          dayOfYear: resDayOfYear
      };
  }
  
  function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy),
          week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
          resWeek, resYear;
  
      if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
      } else {
          resYear = mom.year();
          resWeek = week;
      }
  
      return {
          week: resWeek,
          year: resYear
      };
  }
  
  function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy),
          weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  }
  
  // FORMATTING
  
  addFormatToken('w', ['ww', 2], 'wo', 'week');
  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
  
  // ALIASES
  
  addUnitAlias('week', 'w');
  addUnitAlias('isoWeek', 'W');
  
  // PRIORITIES
  
  addUnitPriority('week', 5);
  addUnitPriority('isoWeek', 5);
  
  // PARSING
  
  addRegexToken('w',  match1to2);
  addRegexToken('ww', match1to2, match2);
  addRegexToken('W',  match1to2);
  addRegexToken('WW', match1to2, match2);
  
  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input);
  });
  
  // HELPERS
  
  // LOCALES
  
  function localeWeek (mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }
  
  var defaultLocaleWeek = {
      dow : 0, // Sunday is the first day of the week.
      doy : 6  // The week that contains Jan 1st is the first week of the year.
  };
  
  function localeFirstDayOfWeek () {
      return this._week.dow;
  }
  
  function localeFirstDayOfYear () {
      return this._week.doy;
  }
  
  // MOMENTS
  
  function getSetWeek (input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
  }
  
  function getSetISOWeek (input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
  }
  
  // FORMATTING
  
  addFormatToken('d', 0, 'do', 'day');
  
  addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format);
  });
  
  addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format);
  });
  
  addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format);
  });
  
  addFormatToken('e', 0, 0, 'weekday');
  addFormatToken('E', 0, 0, 'isoWeekday');
  
  // ALIASES
  
  addUnitAlias('day', 'd');
  addUnitAlias('weekday', 'e');
  addUnitAlias('isoWeekday', 'E');
  
  // PRIORITY
  addUnitPriority('day', 11);
  addUnitPriority('weekday', 11);
  addUnitPriority('isoWeekday', 11);
  
  // PARSING
  
  addRegexToken('d',    match1to2);
  addRegexToken('e',    match1to2);
  addRegexToken('E',    match1to2);
  addRegexToken('dd',   function (isStrict, locale) {
      return locale.weekdaysMinRegex(isStrict);
  });
  addRegexToken('ddd',   function (isStrict, locale) {
      return locale.weekdaysShortRegex(isStrict);
  });
  addRegexToken('dddd',   function (isStrict, locale) {
      return locale.weekdaysRegex(isStrict);
  });
  
  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
      var weekday = config._locale.weekdaysParse(input, token, config._strict);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
          week.d = weekday;
      } else {
          getParsingFlags(config).invalidWeekday = input;
      }
  });
  
  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
      week[token] = toInt(input);
  });
  
  // HELPERS
  
  function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
          return input;
      }
  
      if (!isNaN(input)) {
          return parseInt(input, 10);
      }
  
      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
          return input;
      }
  
      return null;
  }
  
  function parseIsoWeekday(input, locale) {
      if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
  }
  
  // LOCALES
  
  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
  function localeWeekdays (m, format) {
      if (!m) {
          return isArray(this._weekdays) ? this._weekdays :
              this._weekdays['standalone'];
      }
      return isArray(this._weekdays) ? this._weekdays[m.day()] :
          this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
  }
  
  var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
  function localeWeekdaysShort (m) {
      return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
  }
  
  var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
  function localeWeekdaysMin (m) {
      return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
  }
  
  function handleStrictParse$1(weekdayName, format, strict) {
      var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
  
          for (i = 0; i < 7; ++i) {
              mom = createUTC([2000, 1]).day(i);
              this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
              this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
              this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
      }
  
      if (strict) {
          if (format === 'dddd') {
              ii = indexOf$1.call(this._weekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
              ii = indexOf$1.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$1.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          }
      } else {
          if (format === 'dddd') {
              ii = indexOf$1.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
              ii = indexOf$1.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$1.call(this._minWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$1.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          }
      }
  }
  
  function localeWeekdaysParse (weekdayName, format, strict) {
      var i, mom, regex;
  
      if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
      }
  
      if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
      }
  
      for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
  
          mom = createUTC([2000, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
              this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
              this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
              this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
          }
          if (!this._weekdaysParse[i]) {
              regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
              this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
              return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
              return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
              return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
              return i;
          }
      }
  }
  
  // MOMENTS
  
  function getSetDayOfWeek (input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
      } else {
          return day;
      }
  }
  
  function getSetLocaleDayOfWeek (input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
  }
  
  function getSetISODayOfWeek (input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
  
      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.
  
      if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
          return this.day() || 7;
      }
  }
  
  var defaultWeekdaysRegex = matchWord;
  function weekdaysRegex (isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysStrictRegex;
          } else {
              return this._weekdaysRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ?
              this._weekdaysStrictRegex : this._weekdaysRegex;
      }
  }
  
  var defaultWeekdaysShortRegex = matchWord;
  function weekdaysShortRegex (isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysShortStrictRegex;
          } else {
              return this._weekdaysShortRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
              this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ?
              this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
  }
  
  var defaultWeekdaysMinRegex = matchWord;
  function weekdaysMinRegex (isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysMinStrictRegex;
          } else {
              return this._weekdaysMinRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
              this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ?
              this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
  }
  
  
  function computeWeekdaysParse () {
      function cmpLenRev(a, b) {
          return b.length - a.length;
      }
  
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
          i, mom, minp, shortp, longp;
      for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
      }
      // Sorting makes sure if one weekday (or abbr) is a prefix of another it
      // will match the longer piece.
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i]);
      }
  
      this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
  
      this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
  }
  
  // FORMATTING
  
  function hFormat() {
      return this.hours() % 12 || 12;
  }
  
  function kFormat() {
      return this.hours() || 24;
  }
  
  addFormatToken('H', ['HH', 2], 0, 'hour');
  addFormatToken('h', ['hh', 2], 0, hFormat);
  addFormatToken('k', ['kk', 2], 0, kFormat);
  
  addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  });
  
  addFormatToken('hmmss', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2);
  });
  
  addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2);
  });
  
  addFormatToken('Hmmss', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2);
  });
  
  function meridiem (token, lowercase) {
      addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
      });
  }
  
  meridiem('a', true);
  meridiem('A', false);
  
  // ALIASES
  
  addUnitAlias('hour', 'h');
  
  // PRIORITY
  addUnitPriority('hour', 13);
  
  // PARSING
  
  function matchMeridiem (isStrict, locale) {
      return locale._meridiemParse;
  }
  
  addRegexToken('a',  matchMeridiem);
  addRegexToken('A',  matchMeridiem);
  addRegexToken('H',  match1to2);
  addRegexToken('h',  match1to2);
  addRegexToken('k',  match1to2);
  addRegexToken('HH', match1to2, match2);
  addRegexToken('hh', match1to2, match2);
  addRegexToken('kk', match1to2, match2);
  
  addRegexToken('hmm', match3to4);
  addRegexToken('hmmss', match5to6);
  addRegexToken('Hmm', match3to4);
  addRegexToken('Hmmss', match5to6);
  
  addParseToken(['H', 'HH'], HOUR);
  addParseToken(['k', 'kk'], function (input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
  });
  addParseToken(['a', 'A'], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
  });
  addParseToken(['h', 'hh'], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
  });
  
  // LOCALES
  
  function localeIsPM (input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return ((input + '').toLowerCase().charAt(0) === 'p');
  }
  
  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
  function localeMeridiem (hours, minutes, isLower) {
      if (hours > 11) {
          return isLower ? 'pm' : 'PM';
      } else {
          return isLower ? 'am' : 'AM';
      }
  }
  
  
  // MOMENTS
  
  // Setting the hour should keep the time, because the user explicitly
  // specified which hour he wants. So trying to maintain the same hour (in
  // a new timezone) makes sense. Adding/subtracting hours does not follow
  // this rule.
  var getSetHour = makeGetSet('Hours', true);
  
  // months
  // week
  // weekdays
  // meridiem
  var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
  
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
  
      week: defaultLocaleWeek,
  
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
  
      meridiemParse: defaultLocaleMeridiemParse
  };
  
  // internal storage for locale config files
  var locales = {};
  var localeFamilies = {};
  var globalLocale;
  
  function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
  }
  
  // pick the locale from the array
  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
  function chooseLocale(names) {
      var i = 0, j, next, locale, split;
  
      while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
              locale = loadLocale(split.slice(0, j).join('-'));
              if (locale) {
                  return locale;
              }
              if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                  //the next array item is better than a shallower substring of this one
                  break;
              }
              j--;
          }
          i++;
      }
      return null;
  }
  
  function loadLocale(name) {
      var oldLocale = null;
      // TODO: Find a better way to register and load all the locales in Node
      if (!locales[name] && (typeof module !== 'undefined') &&
              module && module.exports) {
          try {
              oldLocale = globalLocale._abbr;
              require('./locale'+ name);
              // because defineLocale currently also sets the global locale, we
              // want to undo that for lazy loaded locales
              getSetGlobalLocale(oldLocale);
          } catch (e) { }
      }
      return locales[name];
  }
  
  // This function will load locale and then set the global locale.  If
  // no arguments are passed in, it will simply return the current global
  // locale key.
  function getSetGlobalLocale (key, values) {
      var data;
      if (key) {
          if (isUndefined(values)) {
              data = getLocale(key);
          }
          else {
              data = defineLocale(key, values);
          }
  
          if (data) {
              // moment.duration._locale = moment._locale = data;
              globalLocale = data;
          }
      }
  
      return globalLocale._abbr;
  }
  
  function defineLocale (name, config) {
      if (config !== null) {
          var parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
              deprecateSimple('defineLocaleOverride',
                      'use moment.updateLocale(localeName, config) to change ' +
                      'an existing locale. moment.defineLocale(localeName, ' +
                      'config) should only be used for creating a new locale ' +
                      'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
              parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
              if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
              } else {
                  if (!localeFamilies[config.parentLocale]) {
                      localeFamilies[config.parentLocale] = [];
                  }
                  localeFamilies[config.parentLocale].push({
                      name: name,
                      config: config
                  });
                  return null;
              }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
  
          if (localeFamilies[name]) {
              localeFamilies[name].forEach(function (x) {
                  defineLocale(x.name, x.config);
              });
          }
  
          // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.
          getSetGlobalLocale(name);
  
  
          return locales[name];
      } else {
          // useful for testing
          delete locales[name];
          return null;
      }
  }
  
  function updateLocale(name, config) {
      if (config != null) {
          var locale, parentConfig = baseConfig;
          // MERGE
          if (locales[name] != null) {
              parentConfig = locales[name]._config;
          }
          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale;
  
          // backwards compat for now: also set the locale
          getSetGlobalLocale(name);
      } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
              if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
              } else if (locales[name] != null) {
                  delete locales[name];
              }
          }
      }
      return locales[name];
  }
  
  // returns locale data
  function getLocale (key) {
      var locale;
  
      if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
      }
  
      if (!key) {
          return globalLocale;
      }
  
      if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);
          if (locale) {
              return locale;
          }
          key = [key];
      }
  
      return chooseLocale(key);
  }
  
  function listLocales() {
      return keys$1(locales);
  }
  
  function checkOverflow (m) {
      var overflow;
      var a = m._a;
  
      if (a && getParsingFlags(m).overflow === -2) {
          overflow =
              a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
              a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
              a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
              a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
              a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
              a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
              -1;
  
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
              overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
              overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
              overflow = WEEKDAY;
          }
  
          getParsingFlags(m).overflow = overflow;
      }
  
      return m;
  }
  
  // iso 8601 regex
  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  
  var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
  
  var isoDates = [
      ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
      ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
      ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
      ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
      ['YYYY-DDD', /\d{4}-\d{3}/],
      ['YYYY-MM', /\d{4}-\d\d/, false],
      ['YYYYYYMMDD', /[+-]\d{10}/],
      ['YYYYMMDD', /\d{8}/],
      // YYYYMM is NOT allowed by the standard
      ['GGGG[W]WWE', /\d{4}W\d{3}/],
      ['GGGG[W]WW', /\d{4}W\d{2}/, false],
      ['YYYYDDD', /\d{7}/]
  ];
  
  // iso time formats and regexes
  var isoTimes = [
      ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
      ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
      ['HH:mm:ss', /\d\d:\d\d:\d\d/],
      ['HH:mm', /\d\d:\d\d/],
      ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
      ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
      ['HHmmss', /\d\d\d\d\d\d/],
      ['HHmm', /\d\d\d\d/],
      ['HH', /\d\d/]
  ];
  
  var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
  
  // date from iso format
  function configFromISO(config) {
      var i, l,
          string = config._i,
          match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
          allowTime, dateFormat, timeFormat, tzFormat;
  
      if (match) {
          getParsingFlags(config).iso = true;
  
          for (i = 0, l = isoDates.length; i < l; i++) {
              if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
              }
          }
          if (dateFormat == null) {
              config._isValid = false;
              return;
          }
          if (match[3]) {
              for (i = 0, l = isoTimes.length; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                      // match[2] should be 'T' or space
                      timeFormat = (match[2] || ' ') + isoTimes[i][0];
                      break;
                  }
              }
              if (timeFormat == null) {
                  config._isValid = false;
                  return;
              }
          }
          if (!allowTime && timeFormat != null) {
              config._isValid = false;
              return;
          }
          if (match[4]) {
              if (tzRegex.exec(match[4])) {
                  tzFormat = 'Z';
              } else {
                  config._isValid = false;
                  return;
              }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
      } else {
          config._isValid = false;
      }
  }
  
  // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
  var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;
  
  // date and time from ref 2822 format
  function configFromRFC2822(config) {
      var string, match, dayFormat,
          dateFormat, timeFormat, tzFormat;
      var timezones = {
          ' GMT': ' +0000',
          ' EDT': ' -0400',
          ' EST': ' -0500',
          ' CDT': ' -0500',
          ' CST': ' -0600',
          ' MDT': ' -0600',
          ' MST': ' -0700',
          ' PDT': ' -0700',
          ' PST': ' -0800'
      };
      var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
      var timezone, timezoneIndex;
  
      string = config._i
          .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
          .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
          .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
      match = basicRfcRegex.exec(string);
  
      if (match) {
          dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
          dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
          timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');
  
          // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
          if (match[1]) { // day of week given
              var momentDate = new Date(match[2]);
              var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];
  
              if (match[1].substr(0,3) !== momentDay) {
                  getParsingFlags(config).weekdayMismatch = true;
                  config._isValid = false;
                  return;
              }
          }
  
          switch (match[5].length) {
              case 2: // military
                  if (timezoneIndex === 0) {
                      timezone = ' +0000';
                  } else {
                      timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                      timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                          (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                  }
                  break;
              case 4: // Zone
                  timezone = timezones[match[5]];
                  break;
              default: // UT or +/-9999
                  timezone = timezones[' GMT'];
          }
          match[5] = timezone;
          config._i = match.splice(1).join('');
          tzFormat = ' ZZ';
          config._f = dayFormat + dateFormat + timeFormat + tzFormat;
          configFromStringAndFormat(config);
          getParsingFlags(config).rfc2822 = true;
      } else {
          config._isValid = false;
      }
  }
  
  // date from iso format or fallback
  function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
  
      if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
      }
  
      configFromISO(config);
      if (config._isValid === false) {
          delete config._isValid;
      } else {
          return;
      }
  
      configFromRFC2822(config);
      if (config._isValid === false) {
          delete config._isValid;
      } else {
          return;
      }
  
      // Final attempt, use Input Fallback
      hooks.createFromInputFallback(config);
  }
  
  hooks.createFromInputFallback = deprecate(
      'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
      'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
      'discouraged and will be removed in an upcoming major release. Please refer to ' +
      'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
      function (config) {
          config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }
  );
  
  // Pick the first defined of two or three arguments.
  function defaults(a, b, c) {
      if (a != null) {
          return a;
      }
      if (b != null) {
          return b;
      }
      return c;
  }
  
  function currentDateArray(config) {
      // hooks is actually the exported moment object
      var nowValue = new Date(hooks.now());
      if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  }
  
  // convert an array to a date.
  // the array should mirror the parameters below
  // note: all values past the year are optional and will default to the lowest possible value.
  // [year, month, day , hour, minute, second, millisecond]
  function configFromArray (config) {
      var i, date, input = [], currentDate, yearToUse;
  
      if (config._d) {
          return;
      }
  
      currentDate = currentDateArray(config);
  
      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
      }
  
      //if the day of the year is set, figure out what it is
      if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
  
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
              getParsingFlags(config)._overflowDayOfYear = true;
          }
  
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
      }
  
      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
      }
  
      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
          config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
      }
  
      // Check for 24:00:00.000
      if (config._a[HOUR] === 24 &&
              config._a[MINUTE] === 0 &&
              config._a[SECOND] === 0 &&
              config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
      }
  
      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }
  
      if (config._nextDay) {
          config._a[HOUR] = 24;
      }
  }
  
  function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
  
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
  
          // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
              weekdayOverflow = true;
          }
      } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
  
          var curWeek = weekOfYear(createLocal(), dow, doy);
  
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
  
          // Default to current week.
          week = defaults(w.w, curWeek.week);
  
          if (w.d != null) {
              // weekday -- low day numbers are considered next week
              weekday = w.d;
              if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
              }
          } else if (w.e != null) {
              // local weekday -- counting starts from begining of week
              weekday = w.e + dow;
              if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
              }
          } else {
              // default to begining of week
              weekday = dow;
          }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
      } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
      }
  }
  
  // constant that refers to the ISO standard
  hooks.ISO_8601 = function () {};
  
  // constant that refers to the RFC 2822 form
  hooks.RFC_2822 = function () {};
  
  // date from string and format string
  function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
      }
      if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
      }
      config._a = [];
      getParsingFlags(config).empty = true;
  
      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i,
          i, parsedInput, tokens, token, skipped,
          stringLength = string.length,
          totalParsedInputLength = 0;
  
      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  
      for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
          // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));
          if (parsedInput) {
              skipped = string.substr(0, string.indexOf(parsedInput));
              if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
              }
              string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
              totalParsedInputLength += parsedInput.length;
          }
          // don't parse if it's not a known token
          if (formatTokenFunctions[token]) {
              if (parsedInput) {
                  getParsingFlags(config).empty = false;
              }
              else {
                  getParsingFlags(config).unusedTokens.push(token);
              }
              addTimeToArrayFromToken(token, parsedInput, config);
          }
          else if (config._strict && !parsedInput) {
              getParsingFlags(config).unusedTokens.push(token);
          }
      }
  
      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
      }
  
      // clear _12h flag if hour is <= 12
      if (config._a[HOUR] <= 12 &&
          getParsingFlags(config).bigHour === true &&
          config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
      }
  
      getParsingFlags(config).parsedDateParts = config._a.slice(0);
      getParsingFlags(config).meridiem = config._meridiem;
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
  
      configFromArray(config);
      checkOverflow(config);
  }
  
  
  function meridiemFixWrap (locale, hour, meridiem) {
      var isPm;
  
      if (meridiem == null) {
          // nothing to do
          return hour;
      }
      if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);
          if (isPm && hour < 12) {
              hour += 12;
          }
          if (!isPm && hour === 12) {
              hour = 0;
          }
          return hour;
      } else {
          // this is not supposed to happen
          return hour;
      }
  }
  
  // date from string and array of format strings
  function configFromStringAndArray(config) {
      var tempConfig,
          bestMoment,
  
          scoreToBeat,
          i,
          currentScore;
  
      if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
      }
  
      for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
              tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
  
          if (!isValid(tempConfig)) {
              continue;
          }
  
          // if there is any input that was not parsed add a penalty for that format
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
  
          //or tokens
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
  
          getParsingFlags(tempConfig).score = currentScore;
  
          if (scoreToBeat == null || currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
          }
      }
  
      extend(config, bestMoment || tempConfig);
  }
  
  function configFromObject(config) {
      if (config._d) {
          return;
      }
  
      var i = normalizeObjectUnits(config._i);
      config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
      });
  
      configFromArray(config);
  }
  
  function createFromConfig (config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
      }
  
      return res;
  }
  
  function prepareConfig (config) {
      var input = config._i,
          format = config._f;
  
      config._locale = config._locale || getLocale(config._l);
  
      if (input === null || (format === undefined && input === '')) {
          return createInvalid({nullInput: true});
      }
  
      if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
      }
  
      if (isMoment(input)) {
          return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
          config._d = input;
      } else if (isArray(format)) {
          configFromStringAndArray(config);
      } else if (format) {
          configFromStringAndFormat(config);
      }  else {
          configFromInput(config);
      }
  
      if (!isValid(config)) {
          config._d = null;
      }
  
      return config;
  }
  
  function configFromInput(config) {
      var input = config._i;
      if (isUndefined(input)) {
          config._d = new Date(hooks.now());
      } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
      } else if (typeof input === 'string') {
          configFromString(config);
      } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
              return parseInt(obj, 10);
          });
          configFromArray(config);
      } else if (isObject(input)) {
          configFromObject(config);
      } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
      } else {
          hooks.createFromInputFallback(config);
      }
  }
  
  function createLocalOrUTC (input, format, locale, strict, isUTC) {
      var c = {};
  
      if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
      }
  
      if ((isObject(input) && isObjectEmpty(input)) ||
              (isArray(input) && input.length === 0)) {
          input = undefined;
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;
  
      return createFromConfig(c);
  }
  
  function createLocal (input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
  }
  
  var prototypeMin = deprecate(
      'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
      function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
          } else {
              return createInvalid();
          }
      }
  );
  
  var prototypeMax = deprecate(
      'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
      function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
          } else {
              return createInvalid();
          }
      }
  );
  
  // Pick a moment m from moments so that m[fn](other) is true for all
  // other. This relies on the function fn to be transitive.
  //
  // moments should either be an array of moment objects or an array, whose
  // first element is an array of moment objects.
  function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
      }
      if (!moments.length) {
          return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
              res = moments[i];
          }
      }
      return res;
  }
  
  // TODO: Use [].sort instead?
  function min () {
      var args = [].slice.call(arguments, 0);
  
      return pickBy('isBefore', args);
  }
  
  function max () {
      var args = [].slice.call(arguments, 0);
  
      return pickBy('isAfter', args);
  }
  
  var now = function () {
      return Date.now ? Date.now() : +(new Date());
  };
  
  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
  
  function isDurationValid(m) {
      for (var key in m) {
          if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
              return false;
          }
      }
  
      var unitHasDecimal = false;
      for (var i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
              if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
              }
              if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
              }
          }
      }
  
      return true;
  }
  
  function isValid$1() {
      return this._isValid;
  }
  
  function createInvalid$1() {
      return createDuration(NaN);
  }
  
  function Duration (duration) {
      var normalizedInput = normalizeObjectUnits(duration),
          years = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months = normalizedInput.month || 0,
          weeks = normalizedInput.week || 0,
          days = normalizedInput.day || 0,
          hours = normalizedInput.hour || 0,
          minutes = normalizedInput.minute || 0,
          seconds = normalizedInput.second || 0,
          milliseconds = normalizedInput.millisecond || 0;
  
      this._isValid = isDurationValid(normalizedInput);
  
      // representation for dateAddRemove
      this._milliseconds = +milliseconds +
          seconds * 1e3 + // 1000
          minutes * 6e4 + // 1000 * 60
          hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days +
          weeks * 7;
      // It is impossible translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months +
          quarters * 3 +
          years * 12;
  
      this._data = {};
  
      this._locale = getLocale();
  
      this._bubble();
  }
  
  function isDuration (obj) {
      return obj instanceof Duration;
  }
  
  function absRound (number) {
      if (number < 0) {
          return Math.round(-1 * number) * -1;
      } else {
          return Math.round(number);
      }
  }
  
  // FORMATTING
  
  function offset (token, separator) {
      addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';
          if (offset < 0) {
              offset = -offset;
              sign = '-';
          }
          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
      });
  }
  
  offset('Z', ':');
  offset('ZZ', '');
  
  // PARSING
  
  addRegexToken('Z',  matchShortOffset);
  addRegexToken('ZZ', matchShortOffset);
  addParseToken(['Z', 'ZZ'], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
  });
  
  // HELPERS
  
  // timezone chunker
  // '+10:00' > ['10',  '00']
  // '-1530'  > ['-15', '30']
  var chunkOffset = /([\+\-]|\d\d)/gi;
  
  function offsetFromString(matcher, string) {
      var matches = (string || '').match(matcher);
  
      if (matches === null) {
          return null;
      }
  
      var chunk   = matches[matches.length - 1] || [];
      var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      var minutes = +(parts[1] * 60) + toInt(parts[2]);
  
      return minutes === 0 ?
        0 :
        parts[0] === '+' ? minutes : -minutes;
  }
  
  // Return a moment from input, that is local/utc/zone equivalent to model.
  function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          // Use low-level api, because this fn is low-level api.
          res._d.setTime(res._d.valueOf() + diff);
          hooks.updateOffset(res, false);
          return res;
      } else {
          return createLocal(input).local();
      }
  }
  
  function getDateOffset (m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
  }
  
  // HOOKS
  
  // This function will be called whenever a moment is mutated.
  // It is intended to keep the offset in sync with the timezone.
  hooks.updateOffset = function () {};
  
  // MOMENTS
  
  // keepLocalTime = true means only change the timezone, without
  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
  // +0200, so we adjust the time as needed, to be valid.
  //
  // Keeping the time actually adds/subtracts (one hour)
  // from the actual represented time. That is why we call updateOffset
  // a second time. In case it wants us to change the offset again
  // _changeInProgress == true case, then we have to adjust, because
  // there is no such time in the given timezone.
  function getSetOffset (input, keepLocalTime, keepMinutes) {
      var offset = this._offset || 0,
          localAdjust;
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      if (input != null) {
          if (typeof input === 'string') {
              input = offsetFromString(matchShortOffset, input);
              if (input === null) {
                  return this;
              }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
              input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
              localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
              this.add(localAdjust, 'm');
          }
          if (offset !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(this, createDuration(input - offset, 'm'), 1, false);
              } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
              }
          }
          return this;
      } else {
          return this._isUTC ? offset : getDateOffset(this);
      }
  }
  
  function getSetZone (input, keepLocalTime) {
      if (input != null) {
          if (typeof input !== 'string') {
              input = -input;
          }
  
          this.utcOffset(input, keepLocalTime);
  
          return this;
      } else {
          return -this.utcOffset();
      }
  }
  
  function setOffsetToUTC (keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
  }
  
  function setOffsetToLocal (keepLocalTime) {
      if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
  
          if (keepLocalTime) {
              this.subtract(getDateOffset(this), 'm');
          }
      }
      return this;
  }
  
  function setOffsetToParsedOffset () {
      if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
              this.utcOffset(tZone);
          }
          else {
              this.utcOffset(0, true);
          }
      }
      return this;
  }
  
  function hasAlignedHourOffset (input) {
      if (!this.isValid()) {
          return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
  
      return (this.utcOffset() - input) % 60 === 0;
  }
  
  function isDaylightSavingTime () {
      return (
          this.utcOffset() > this.clone().month(0).utcOffset() ||
          this.utcOffset() > this.clone().month(5).utcOffset()
      );
  }
  
  function isDaylightSavingTimeShifted () {
      if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
      }
  
      var c = {};
  
      copyConfig(c, this);
      c = prepareConfig(c);
  
      if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() &&
              compareArrays(c._a, other.toArray()) > 0;
      } else {
          this._isDSTShifted = false;
      }
  
      return this._isDSTShifted;
  }
  
  function isLocal () {
      return this.isValid() ? !this._isUTC : false;
  }
  
  function isUtcOffset () {
      return this.isValid() ? this._isUTC : false;
  }
  
  function isUtc () {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
  }
  
  // ASP.NET json date format regex
  var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
  
  // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
  // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
  // and further modified to allow for strings containing both week and day
  var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
  
  function createDuration (input, key) {
      var duration = input,
          // matching against regexp is expensive, do it on demand
          match = null,
          sign,
          ret,
          diffRes;
  
      if (isDuration(input)) {
          duration = {
              ms : input._milliseconds,
              d  : input._days,
              M  : input._months
          };
      } else if (isNumber(input)) {
          duration = {};
          if (key) {
              duration[key] = input;
          } else {
              duration.milliseconds = input;
          }
      } else if (!!(match = aspNetRegex.exec(input))) {
          sign = (match[1] === '-') ? -1 : 1;
          duration = {
              y  : 0,
              d  : toInt(match[DATE])                         * sign,
              h  : toInt(match[HOUR])                         * sign,
              m  : toInt(match[MINUTE])                       * sign,
              s  : toInt(match[SECOND])                       * sign,
              ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
          };
      } else if (!!(match = isoRegex.exec(input))) {
          sign = (match[1] === '-') ? -1 : 1;
          duration = {
              y : parseIso(match[2], sign),
              M : parseIso(match[3], sign),
              w : parseIso(match[4], sign),
              d : parseIso(match[5], sign),
              h : parseIso(match[6], sign),
              m : parseIso(match[7], sign),
              s : parseIso(match[8], sign)
          };
      } else if (duration == null) {// checks for null or undefined
          duration = {};
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
  
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
      }
  
      ret = new Duration(duration);
  
      if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
      }
  
      return ret;
  }
  
  createDuration.fn = Duration.prototype;
  createDuration.invalid = createInvalid$1;
  
  function parseIso (inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign;
  }
  
  function positiveMomentsDifference(base, other) {
      var res = {milliseconds: 0, months: 0};
  
      res.months = other.month() - base.month() +
          (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
      }
  
      res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
  
      return res;
  }
  
  function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
          return {milliseconds: 0, months: 0};
      }
  
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
      } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
      }
  
      return res;
  }
  
  // TODO: remove 'name' arg after deprecation is removed
  function createAdder(direction, name) {
      return function (val, period) {
          var dur, tmp;
          //invert the arguments, but complain about it
          if (period !== null && !isNaN(+period)) {
              deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
              'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
              tmp = val; val = period; period = tmp;
          }
  
          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
      };
  }
  
  function addSubtract (mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
          days = absRound(duration._days),
          months = absRound(duration._months);
  
      if (!mom.isValid()) {
          // No op
          return;
      }
  
      updateOffset = updateOffset == null ? true : updateOffset;
  
      if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
      }
      if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
      }
      if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding);
      }
      if (updateOffset) {
          hooks.updateOffset(mom, days || months);
      }
  }
  
  var add      = createAdder(1, 'add');
  var subtract = createAdder(-1, 'subtract');
  
  function getCalendarFormat(myMoment, now) {
      var diff = myMoment.diff(now, 'days', true);
      return diff < -6 ? 'sameElse' :
              diff < -1 ? 'lastWeek' :
              diff < 0 ? 'lastDay' :
              diff < 1 ? 'sameDay' :
              diff < 2 ? 'nextDay' :
              diff < 7 ? 'nextWeek' : 'sameElse';
  }
  
  function calendar$1 (time, formats) {
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || createLocal(),
          sod = cloneWithOffset(now, this).startOf('day'),
          format = hooks.calendarFormat(this, sod) || 'sameElse';
  
      var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
  
      return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
  }
  
  function clone () {
      return new Moment(this);
  }
  
  function isAfter (input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
      if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
      } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
  }
  
  function isBefore (input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
      if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
      } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
  }
  
  function isBetween (from, to, units, inclusivity) {
      inclusivity = inclusivity || '()';
      return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
          (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
  }
  
  function isSame (input, units) {
      var localInput = isMoment(input) ? input : createLocal(input),
          inputMs;
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
      } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
  }
  
  function isSameOrAfter (input, units) {
      return this.isSame(input, units) || this.isAfter(input,units);
  }
  
  function isSameOrBefore (input, units) {
      return this.isSame(input, units) || this.isBefore(input,units);
  }
  
  function diff (input, units, asFloat) {
      var that,
          zoneDelta,
          delta, output;
  
      if (!this.isValid()) {
          return NaN;
      }
  
      that = cloneWithOffset(input, this);
  
      if (!that.isValid()) {
          return NaN;
      }
  
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  
      units = normalizeUnits(units);
  
      if (units === 'year' || units === 'month' || units === 'quarter') {
          output = monthDiff(this, that);
          if (units === 'quarter') {
              output = output / 3;
          } else if (units === 'year') {
              output = output / 12;
          }
      } else {
          delta = this - that;
          output = units === 'second' ? delta / 1e3 : // 1000
              units === 'minute' ? delta / 6e4 : // 1000 * 60
              units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
              units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
              units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
              delta;
      }
      return asFloat ? output : absFloor(output);
  }
  
  function monthDiff (a, b) {
      // difference in months
      var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
          // b is in (anchor - 1 month, anchor + 1 month)
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2, adjust;
  
      if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor - anchor2);
      } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor2 - anchor);
      }
  
      //check for negative zero, return zero if negative zero
      return -(wholeMonthDiff + adjust) || 0;
  }
  
  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
  
  function toString () {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }
  
  function toISOString() {
      if (!this.isValid()) {
          return null;
      }
      var m = this.clone().utc();
      if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
      }
      if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          return this.toDate().toISOString();
      }
      return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
  }
  
  /**
   * Return a human readable representation of a moment that can
   * also be evaluated to get a new moment which is the same
   *
   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
   */
  function inspect () {
      if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
      }
      var func = 'moment';
      var zone = '';
      if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
      }
      var prefix = '[' + func + '("]';
      var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
      var datetime = '-MM-DD[T]HH:mm:ss.SSS';
      var suffix = zone + '[")]';
  
      return this.format(prefix + year + datetime + suffix);
  }
  
  function format (inputString) {
      if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
  }
  
  function from (time, withoutSuffix) {
      if (this.isValid() &&
              ((isMoment(time) && time.isValid()) ||
               createLocal(time).isValid())) {
          return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
      } else {
          return this.localeData().invalidDate();
      }
  }
  
  function fromNow (withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
  }
  
  function to (time, withoutSuffix) {
      if (this.isValid() &&
              ((isMoment(time) && time.isValid()) ||
               createLocal(time).isValid())) {
          return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
      } else {
          return this.localeData().invalidDate();
      }
  }
  
  function toNow (withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
  }
  
  // If passed a locale key, it will set the locale for this
  // instance.  Otherwise, it will return the locale configuration
  // variables for this instance.
  function locale (key) {
      var newLocaleData;
  
      if (key === undefined) {
          return this._locale._abbr;
      } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
              this._locale = newLocaleData;
          }
          return this;
      }
  }
  
  var lang = deprecate(
      'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
      function (key) {
          if (key === undefined) {
              return this.localeData();
          } else {
              return this.locale(key);
          }
      }
  );
  
  function localeData () {
      return this._locale;
  }
  
  function startOf (units) {
      units = normalizeUnits(units);
      // the following switch intentionally omits break keywords
      // to utilize falling through the cases.
      switch (units) {
          case 'year':
              this.month(0);
              /* falls through */
          case 'quarter':
          case 'month':
              this.date(1);
              /* falls through */
          case 'week':
          case 'isoWeek':
          case 'day':
          case 'date':
              this.hours(0);
              /* falls through */
          case 'hour':
              this.minutes(0);
              /* falls through */
          case 'minute':
              this.seconds(0);
              /* falls through */
          case 'second':
              this.milliseconds(0);
      }
  
      // weeks are a special case
      if (units === 'week') {
          this.weekday(0);
      }
      if (units === 'isoWeek') {
          this.isoWeekday(1);
      }
  
      // quarters are also special
      if (units === 'quarter') {
          this.month(Math.floor(this.month() / 3) * 3);
      }
  
      return this;
  }
  
  function endOf (units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
          return this;
      }
  
      // 'date' is an alias for 'day', so it should be considered as such.
      if (units === 'date') {
          units = 'day';
      }
  
      return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
  }
  
  function valueOf () {
      return this._d.valueOf() - ((this._offset || 0) * 60000);
  }
  
  function unix () {
      return Math.floor(this.valueOf() / 1000);
  }
  
  function toDate () {
      return new Date(this.valueOf());
  }
  
  function toArray () {
      var m = this;
      return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
  }
  
  function toObject () {
      var m = this;
      return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
      };
  }
  
  function toJSON () {
      // new Date(NaN).toJSON() === null
      return this.isValid() ? this.toISOString() : null;
  }
  
  function isValid$2 () {
      return isValid(this);
  }
  
  function parsingFlags () {
      return extend({}, getParsingFlags(this));
  }
  
  function invalidAt () {
      return getParsingFlags(this).overflow;
  }
  
  function creationData() {
      return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
      };
  }
  
  // FORMATTING
  
  addFormatToken(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
  });
  
  addFormatToken(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
  });
  
  function addWeekYearFormatToken (token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
  }
  
  addWeekYearFormatToken('gggg',     'weekYear');
  addWeekYearFormatToken('ggggg',    'weekYear');
  addWeekYearFormatToken('GGGG',  'isoWeekYear');
  addWeekYearFormatToken('GGGGG', 'isoWeekYear');
  
  // ALIASES
  
  addUnitAlias('weekYear', 'gg');
  addUnitAlias('isoWeekYear', 'GG');
  
  // PRIORITY
  
  addUnitPriority('weekYear', 1);
  addUnitPriority('isoWeekYear', 1);
  
  
  // PARSING
  
  addRegexToken('G',      matchSigned);
  addRegexToken('g',      matchSigned);
  addRegexToken('GG',     match1to2, match2);
  addRegexToken('gg',     match1to2, match2);
  addRegexToken('GGGG',   match1to4, match4);
  addRegexToken('gggg',   match1to4, match4);
  addRegexToken('GGGGG',  match1to6, match6);
  addRegexToken('ggggg',  match1to6, match6);
  
  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input);
  });
  
  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
      week[token] = hooks.parseTwoDigitYear(input);
  });
  
  // MOMENTS
  
  function getSetWeekYear (input) {
      return getSetWeekYearHelper.call(this,
              input,
              this.week(),
              this.weekday(),
              this.localeData()._week.dow,
              this.localeData()._week.doy);
  }
  
  function getSetISOWeekYear (input) {
      return getSetWeekYearHelper.call(this,
              input, this.isoWeek(), this.isoWeekday(), 1, 4);
  }
  
  function getISOWeeksInYear () {
      return weeksInYear(this.year(), 1, 4);
  }
  
  function getWeeksInYear () {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }
  
  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
          return weekOfYear(this, dow, doy).year;
      } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
              week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
  }
  
  function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
          date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
  }
  
  // FORMATTING
  
  addFormatToken('Q', 0, 'Qo', 'quarter');
  
  // ALIASES
  
  addUnitAlias('quarter', 'Q');
  
  // PRIORITY
  
  addUnitPriority('quarter', 7);
  
  // PARSING
  
  addRegexToken('Q', match1);
  addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
  });
  
  // MOMENTS
  
  function getSetQuarter (input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
  }
  
  // FORMATTING
  
  addFormatToken('D', ['DD', 2], 'Do', 'date');
  
  // ALIASES
  
  addUnitAlias('date', 'D');
  
  // PRIOROITY
  addUnitPriority('date', 9);
  
  // PARSING
  
  addRegexToken('D',  match1to2);
  addRegexToken('DD', match1to2, match2);
  addRegexToken('Do', function (isStrict, locale) {
      // TODO: Remove "ordinalParse" fallback in next major release.
      return isStrict ?
        (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
        locale._dayOfMonthOrdinalParseLenient;
  });
  
  addParseToken(['D', 'DD'], DATE);
  addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0], 10);
  });
  
  // MOMENTS
  
  var getSetDayOfMonth = makeGetSet('Date', true);
  
  // FORMATTING
  
  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
  
  // ALIASES
  
  addUnitAlias('dayOfYear', 'DDD');
  
  // PRIORITY
  addUnitPriority('dayOfYear', 4);
  
  // PARSING
  
  addRegexToken('DDD',  match1to3);
  addRegexToken('DDDD', match3);
  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
      config._dayOfYear = toInt(input);
  });
  
  // HELPERS
  
  // MOMENTS
  
  function getSetDayOfYear (input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
  }
  
  // FORMATTING
  
  addFormatToken('m', ['mm', 2], 0, 'minute');
  
  // ALIASES
  
  addUnitAlias('minute', 'm');
  
  // PRIORITY
  
  addUnitPriority('minute', 14);
  
  // PARSING
  
  addRegexToken('m',  match1to2);
  addRegexToken('mm', match1to2, match2);
  addParseToken(['m', 'mm'], MINUTE);
  
  // MOMENTS
  
  var getSetMinute = makeGetSet('Minutes', false);
  
  // FORMATTING
  
  addFormatToken('s', ['ss', 2], 0, 'second');
  
  // ALIASES
  
  addUnitAlias('second', 's');
  
  // PRIORITY
  
  addUnitPriority('second', 15);
  
  // PARSING
  
  addRegexToken('s',  match1to2);
  addRegexToken('ss', match1to2, match2);
  addParseToken(['s', 'ss'], SECOND);
  
  // MOMENTS
  
  var getSetSecond = makeGetSet('Seconds', false);
  
  // FORMATTING
  
  addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
  });
  
  addFormatToken(0, ['SS', 2], 0, function () {
      return ~~(this.millisecond() / 10);
  });
  
  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  addFormatToken(0, ['SSSS', 4], 0, function () {
      return this.millisecond() * 10;
  });
  addFormatToken(0, ['SSSSS', 5], 0, function () {
      return this.millisecond() * 100;
  });
  addFormatToken(0, ['SSSSSS', 6], 0, function () {
      return this.millisecond() * 1000;
  });
  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
      return this.millisecond() * 10000;
  });
  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
      return this.millisecond() * 100000;
  });
  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
      return this.millisecond() * 1000000;
  });
  
  
  // ALIASES
  
  addUnitAlias('millisecond', 'ms');
  
  // PRIORITY
  
  addUnitPriority('millisecond', 16);
  
  // PARSING
  
  addRegexToken('S',    match1to3, match1);
  addRegexToken('SS',   match1to3, match2);
  addRegexToken('SSS',  match1to3, match3);
  
  var token;
  for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned);
  }
  
  function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
  }
  
  for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs);
  }
  // MOMENTS
  
  var getSetMillisecond = makeGetSet('Milliseconds', false);
  
  // FORMATTING
  
  addFormatToken('z',  0, 0, 'zoneAbbr');
  addFormatToken('zz', 0, 0, 'zoneName');
  
  // MOMENTS
  
  function getZoneAbbr () {
      return this._isUTC ? 'UTC' : '';
  }
  
  function getZoneName () {
      return this._isUTC ? 'Coordinated Universal Time' : '';
  }
  
  var proto = Moment.prototype;
  
  proto.add               = add;
  proto.calendar          = calendar$1;
  proto.clone             = clone;
  proto.diff              = diff;
  proto.endOf             = endOf;
  proto.format            = format;
  proto.from              = from;
  proto.fromNow           = fromNow;
  proto.to                = to;
  proto.toNow             = toNow;
  proto.get               = stringGet;
  proto.invalidAt         = invalidAt;
  proto.isAfter           = isAfter;
  proto.isBefore          = isBefore;
  proto.isBetween         = isBetween;
  proto.isSame            = isSame;
  proto.isSameOrAfter     = isSameOrAfter;
  proto.isSameOrBefore    = isSameOrBefore;
  proto.isValid           = isValid$2;
  proto.lang              = lang;
  proto.locale            = locale;
  proto.localeData        = localeData;
  proto.max               = prototypeMax;
  proto.min               = prototypeMin;
  proto.parsingFlags      = parsingFlags;
  proto.set               = stringSet;
  proto.startOf           = startOf;
  proto.subtract          = subtract;
  proto.toArray           = toArray;
  proto.toObject          = toObject;
  proto.toDate            = toDate;
  proto.toISOString       = toISOString;
  proto.inspect           = inspect;
  proto.toJSON            = toJSON;
  proto.toString          = toString;
  proto.unix              = unix;
  proto.valueOf           = valueOf;
  proto.creationData      = creationData;
  
  // Year
  proto.year       = getSetYear;
  proto.isLeapYear = getIsLeapYear;
  
  // Week Year
  proto.weekYear    = getSetWeekYear;
  proto.isoWeekYear = getSetISOWeekYear;
  
  // Quarter
  proto.quarter = proto.quarters = getSetQuarter;
  
  // Month
  proto.month       = getSetMonth;
  proto.daysInMonth = getDaysInMonth;
  
  // Week
  proto.week           = proto.weeks        = getSetWeek;
  proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
  proto.weeksInYear    = getWeeksInYear;
  proto.isoWeeksInYear = getISOWeeksInYear;
  
  // Day
  proto.date       = getSetDayOfMonth;
  proto.day        = proto.days             = getSetDayOfWeek;
  proto.weekday    = getSetLocaleDayOfWeek;
  proto.isoWeekday = getSetISODayOfWeek;
  proto.dayOfYear  = getSetDayOfYear;
  
  // Hour
  proto.hour = proto.hours = getSetHour;
  
  // Minute
  proto.minute = proto.minutes = getSetMinute;
  
  // Second
  proto.second = proto.seconds = getSetSecond;
  
  // Millisecond
  proto.millisecond = proto.milliseconds = getSetMillisecond;
  
  // Offset
  proto.utcOffset            = getSetOffset;
  proto.utc                  = setOffsetToUTC;
  proto.local                = setOffsetToLocal;
  proto.parseZone            = setOffsetToParsedOffset;
  proto.hasAlignedHourOffset = hasAlignedHourOffset;
  proto.isDST                = isDaylightSavingTime;
  proto.isLocal              = isLocal;
  proto.isUtcOffset          = isUtcOffset;
  proto.isUtc                = isUtc;
  proto.isUTC                = isUtc;
  
  // Timezone
  proto.zoneAbbr = getZoneAbbr;
  proto.zoneName = getZoneName;
  
  // Deprecations
  proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
  proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
  proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
  
  function createUnix (input) {
      return createLocal(input * 1000);
  }
  
  function createInZone () {
      return createLocal.apply(null, arguments).parseZone();
  }
  
  function preParsePostFormat (string) {
      return string;
  }
  
  var proto$1 = Locale.prototype;
  
  proto$1.calendar        = calendar;
  proto$1.longDateFormat  = longDateFormat;
  proto$1.invalidDate     = invalidDate;
  proto$1.ordinal         = ordinal;
  proto$1.preparse        = preParsePostFormat;
  proto$1.postformat      = preParsePostFormat;
  proto$1.relativeTime    = relativeTime;
  proto$1.pastFuture      = pastFuture;
  proto$1.set             = set;
  
  // Month
  proto$1.months            =        localeMonths;
  proto$1.monthsShort       =        localeMonthsShort;
  proto$1.monthsParse       =        localeMonthsParse;
  proto$1.monthsRegex       = monthsRegex;
  proto$1.monthsShortRegex  = monthsShortRegex;
  
  // Week
  proto$1.week = localeWeek;
  proto$1.firstDayOfYear = localeFirstDayOfYear;
  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
  
  // Day of Week
  proto$1.weekdays       =        localeWeekdays;
  proto$1.weekdaysMin    =        localeWeekdaysMin;
  proto$1.weekdaysShort  =        localeWeekdaysShort;
  proto$1.weekdaysParse  =        localeWeekdaysParse;
  
  proto$1.weekdaysRegex       =        weekdaysRegex;
  proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
  proto$1.weekdaysMinRegex    =        weekdaysMinRegex;
  
  // Hours
  proto$1.isPM = localeIsPM;
  proto$1.meridiem = localeMeridiem;
  
  function get$1 (format, index, field, setter) {
      var locale = getLocale();
      var utc = createUTC().set(setter, index);
      return locale[field](utc, format);
  }
  
  function listMonthsImpl (format, index, field) {
      if (isNumber(format)) {
          index = format;
          format = undefined;
      }
  
      format = format || '';
  
      if (index != null) {
          return get$1(format, index, field, 'month');
      }
  
      var i;
      var out = [];
      for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month');
      }
      return out;
  }
  
  // ()
  // (5)
  // (fmt, 5)
  // (fmt)
  // (true)
  // (true, 5)
  // (true, fmt, 5)
  // (true, fmt)
  function listWeekdaysImpl (localeSorted, format, index, field) {
      if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
              index = format;
              format = undefined;
          }
  
          format = format || '';
      } else {
          format = localeSorted;
          index = format;
          localeSorted = false;
  
          if (isNumber(format)) {
              index = format;
              format = undefined;
          }
  
          format = format || '';
      }
  
      var locale = getLocale(),
          shift = localeSorted ? locale._week.dow : 0;
  
      if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day');
      }
  
      var i;
      var out = [];
      for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day');
      }
      return out;
  }
  
  function listMonths (format, index) {
      return listMonthsImpl(format, index, 'months');
  }
  
  function listMonthsShort (format, index) {
      return listMonthsImpl(format, index, 'monthsShort');
  }
  
  function listWeekdays (localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  }
  
  function listWeekdaysShort (localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  }
  
  function listWeekdaysMin (localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  }
  
  getSetGlobalLocale('en', {
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal : function (number) {
          var b = number % 10,
              output = (toInt(number % 100 / 10) === 1) ? 'th' :
              (b === 1) ? 'st' :
              (b === 2) ? 'nd' :
              (b === 3) ? 'rd' : 'th';
          return number + output;
      }
  });
  
  // Side effect imports
  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
  
  var mathAbs = Math.abs;
  
  function abs () {
      var data           = this._data;
  
      this._milliseconds = mathAbs(this._milliseconds);
      this._days         = mathAbs(this._days);
      this._months       = mathAbs(this._months);
  
      data.milliseconds  = mathAbs(data.milliseconds);
      data.seconds       = mathAbs(data.seconds);
      data.minutes       = mathAbs(data.minutes);
      data.hours         = mathAbs(data.hours);
      data.months        = mathAbs(data.months);
      data.years         = mathAbs(data.years);
  
      return this;
  }
  
  function addSubtract$1 (duration, input, value, direction) {
      var other = createDuration(input, value);
  
      duration._milliseconds += direction * other._milliseconds;
      duration._days         += direction * other._days;
      duration._months       += direction * other._months;
  
      return duration._bubble();
  }
  
  // supports only 2.0-style add(1, 's') or add(duration)
  function add$1 (input, value) {
      return addSubtract$1(this, input, value, 1);
  }
  
  // supports only 2.0-style subtract(1, 's') or subtract(duration)
  function subtract$1 (input, value) {
      return addSubtract$1(this, input, value, -1);
  }
  
  function absCeil (number) {
      if (number < 0) {
          return Math.floor(number);
      } else {
          return Math.ceil(number);
      }
  }
  
  function bubble () {
      var milliseconds = this._milliseconds;
      var days         = this._days;
      var months       = this._months;
      var data         = this._data;
      var seconds, minutes, hours, years, monthsFromDays;
  
      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
              (milliseconds <= 0 && days <= 0 && months <= 0))) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
      }
  
      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;
  
      seconds           = absFloor(milliseconds / 1000);
      data.seconds      = seconds % 60;
  
      minutes           = absFloor(seconds / 60);
      data.minutes      = minutes % 60;
  
      hours             = absFloor(minutes / 60);
      data.hours        = hours % 24;
  
      days += absFloor(hours / 24);
  
      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));
  
      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;
  
      data.days   = days;
      data.months = months;
      data.years  = years;
  
      return this;
  }
  
  function daysToMonths (days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return days * 4800 / 146097;
  }
  
  function monthsToDays (months) {
      // the reverse of daysToMonths
      return months * 146097 / 4800;
  }
  
  function as (units) {
      if (!this.isValid()) {
          return NaN;
      }
      var days;
      var months;
      var milliseconds = this._milliseconds;
  
      units = normalizeUnits(units);
  
      if (units === 'month' || units === 'year') {
          days   = this._days   + milliseconds / 864e5;
          months = this._months + daysToMonths(days);
          return units === 'month' ? months : months / 12;
      } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
              case 'week'   : return days / 7     + milliseconds / 6048e5;
              case 'day'    : return days         + milliseconds / 864e5;
              case 'hour'   : return days * 24    + milliseconds / 36e5;
              case 'minute' : return days * 1440  + milliseconds / 6e4;
              case 'second' : return days * 86400 + milliseconds / 1000;
              // Math.floor prevents floating point math errors here
              case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
              default: throw new Error('Unknown unit ' + units);
          }
      }
  }
  
  // TODO: Use this.as('ms')?
  function valueOf$1 () {
      if (!this.isValid()) {
          return NaN;
      }
      return (
          this._milliseconds +
          this._days * 864e5 +
          (this._months % 12) * 2592e6 +
          toInt(this._months / 12) * 31536e6
      );
  }
  
  function makeAs (alias) {
      return function () {
          return this.as(alias);
      };
  }
  
  var asMilliseconds = makeAs('ms');
  var asSeconds      = makeAs('s');
  var asMinutes      = makeAs('m');
  var asHours        = makeAs('h');
  var asDays         = makeAs('d');
  var asWeeks        = makeAs('w');
  var asMonths       = makeAs('M');
  var asYears        = makeAs('y');
  
  function get$2 (units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + 's']() : NaN;
  }
  
  function makeGetter(name) {
      return function () {
          return this.isValid() ? this._data[name] : NaN;
      };
  }
  
  var milliseconds = makeGetter('milliseconds');
  var seconds      = makeGetter('seconds');
  var minutes      = makeGetter('minutes');
  var hours        = makeGetter('hours');
  var days         = makeGetter('days');
  var months       = makeGetter('months');
  var years        = makeGetter('years');
  
  function weeks () {
      return absFloor(this.days() / 7);
  }
  
  var round = Math.round;
  var thresholds = {
      ss: 44,         // a few seconds to seconds
      s : 45,         // seconds to minute
      m : 45,         // minutes to hour
      h : 22,         // hours to day
      d : 26,         // days to month
      M : 11          // months to year
  };
  
  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }
  
  function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
      var duration = createDuration(posNegDuration).abs();
      var seconds  = round(duration.as('s'));
      var minutes  = round(duration.as('m'));
      var hours    = round(duration.as('h'));
      var days     = round(duration.as('d'));
      var months   = round(duration.as('M'));
      var years    = round(duration.as('y'));
  
      var a = seconds <= thresholds.ss && ['s', seconds]  ||
              seconds < thresholds.s   && ['ss', seconds] ||
              minutes <= 1             && ['m']           ||
              minutes < thresholds.m   && ['mm', minutes] ||
              hours   <= 1             && ['h']           ||
              hours   < thresholds.h   && ['hh', hours]   ||
              days    <= 1             && ['d']           ||
              days    < thresholds.d   && ['dd', days]    ||
              months  <= 1             && ['M']           ||
              months  < thresholds.M   && ['MM', months]  ||
              years   <= 1             && ['y']           || ['yy', years];
  
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
  }
  
  // This function allows you to set the rounding function for relative time strings
  function getSetRelativeTimeRounding (roundingFunction) {
      if (roundingFunction === undefined) {
          return round;
      }
      if (typeof(roundingFunction) === 'function') {
          round = roundingFunction;
          return true;
      }
      return false;
  }
  
  // This function allows you to set a threshold for relative time strings
  function getSetRelativeTimeThreshold (threshold, limit) {
      if (thresholds[threshold] === undefined) {
          return false;
      }
      if (limit === undefined) {
          return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === 's') {
          thresholds.ss = limit - 1;
      }
      return true;
  }
  
  function humanize (withSuffix) {
      if (!this.isValid()) {
          return this.localeData().invalidDate();
      }
  
      var locale = this.localeData();
      var output = relativeTime$1(this, !withSuffix, locale);
  
      if (withSuffix) {
          output = locale.pastFuture(+this, output);
      }
  
      return locale.postformat(output);
  }
  
  var abs$1 = Math.abs;
  
  function toISOString$1() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      if (!this.isValid()) {
          return this.localeData().invalidDate();
      }
  
      var seconds = abs$1(this._milliseconds) / 1000;
      var days         = abs$1(this._days);
      var months       = abs$1(this._months);
      var minutes, hours, years;
  
      // 3600 seconds -> 60 minutes -> 1 hour
      minutes           = absFloor(seconds / 60);
      hours             = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;
  
      // 12 months -> 1 year
      years  = absFloor(months / 12);
      months %= 12;
  
  
      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      var Y = years;
      var M = months;
      var D = days;
      var h = hours;
      var m = minutes;
      var s = seconds;
      var total = this.asSeconds();
  
      if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
      }
  
      return (total < 0 ? '-' : '') +
          'P' +
          (Y ? Y + 'Y' : '') +
          (M ? M + 'M' : '') +
          (D ? D + 'D' : '') +
          ((h || m || s) ? 'T' : '') +
          (h ? h + 'H' : '') +
          (m ? m + 'M' : '') +
          (s ? s + 'S' : '');
  }
  
  var proto$2 = Duration.prototype;
  
  proto$2.isValid        = isValid$1;
  proto$2.abs            = abs;
  proto$2.add            = add$1;
  proto$2.subtract       = subtract$1;
  proto$2.as             = as;
  proto$2.asMilliseconds = asMilliseconds;
  proto$2.asSeconds      = asSeconds;
  proto$2.asMinutes      = asMinutes;
  proto$2.asHours        = asHours;
  proto$2.asDays         = asDays;
  proto$2.asWeeks        = asWeeks;
  proto$2.asMonths       = asMonths;
  proto$2.asYears        = asYears;
  proto$2.valueOf        = valueOf$1;
  proto$2._bubble        = bubble;
  proto$2.get            = get$2;
  proto$2.milliseconds   = milliseconds;
  proto$2.seconds        = seconds;
  proto$2.minutes        = minutes;
  proto$2.hours          = hours;
  proto$2.days           = days;
  proto$2.weeks          = weeks;
  proto$2.months         = months;
  proto$2.years          = years;
  proto$2.humanize       = humanize;
  proto$2.toISOString    = toISOString$1;
  proto$2.toString       = toISOString$1;
  proto$2.toJSON         = toISOString$1;
  proto$2.locale         = locale;
  proto$2.localeData     = localeData;
  
  // Deprecations
  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
  proto$2.lang = lang;
  
  // Side effect imports
  
  // FORMATTING
  
  addFormatToken('X', 0, 0, 'unix');
  addFormatToken('x', 0, 0, 'valueOf');
  
  // PARSING
  
  addRegexToken('x', matchSigned);
  addRegexToken('X', matchTimestamp);
  addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input, 10) * 1000);
  });
  addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input));
  });
  
  // Side effect imports
  
  
  hooks.version = '2.18.1';
  
  setHookCallback(createLocal);
  
  hooks.fn                    = proto;
  hooks.min                   = min;
  hooks.max                   = max;
  hooks.now                   = now;
  hooks.utc                   = createUTC;
  hooks.unix                  = createUnix;
  hooks.months                = listMonths;
  hooks.isDate                = isDate;
  hooks.locale                = getSetGlobalLocale;
  hooks.invalid               = createInvalid;
  hooks.duration              = createDuration;
  hooks.isMoment              = isMoment;
  hooks.weekdays              = listWeekdays;
  hooks.parseZone             = createInZone;
  hooks.localeData            = getLocale;
  hooks.isDuration            = isDuration;
  hooks.monthsShort           = listMonthsShort;
  hooks.weekdaysMin           = listWeekdaysMin;
  hooks.defineLocale          = defineLocale;
  hooks.updateLocale          = updateLocale;
  hooks.locales               = listLocales;
  hooks.weekdaysShort         = listWeekdaysShort;
  hooks.normalizeUnits        = normalizeUnits;
  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat        = getCalendarFormat;
  hooks.prototype             = proto;
  
  return hooks;
  
  })));
  

});

;/*!/node_modules/numeral/numeral.js*/
define('common:node_modules/numeral/numeral', function(require, exports, module) {

  /*! @preserve
   * numeral.js
   * version : 1.5.6
   * author : Adam Draper
   * license : MIT
   * http://adamwdraper.github.com/Numeral-js/
   */
  
  (function() {
  
      /************************************
          Variables
      ************************************/
  
      var numeral,
          VERSION = '1.5.6',
          // internal storage for language config files
          languages = {},
          defaults = {
              currentLanguage: 'en',
              zeroFormat: null,
              nullFormat: null,
              defaultFormat: '0,0'
          },
          options = {
              currentLanguage: defaults.currentLanguage,
              zeroFormat: defaults.zeroFormat,
              nullFormat: defaults.nullFormat,
              defaultFormat: defaults.defaultFormat
          },
          byteSuffixes = {
              bytes: ['B','KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
              iec: ['B','KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
          };
  
  
      /************************************
          Constructors
      ************************************/
  
  
      // Numeral prototype object
      function Numeral(number) {
          this._value = number;
      }
  
      /**
       * Implementation of toFixed() that treats floats more like decimals
       *
       * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
       * problems for accounting- and finance-related software.
       */
      function toFixed (value, maxDecimals, roundingFunction, optionals) {
          var splitValue = value.toString().split('.'),
              minDecimals = maxDecimals - (optionals || 0),
              boundedPrecision,
              optionalsRegExp,
              power,
              output;
  
          // Use the smallest precision value possible to avoid errors from floating point representation
          if (splitValue.length === 2) {
            boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
          } else {
            boundedPrecision = minDecimals;
          }
  
          power = Math.pow(10, boundedPrecision);
  
          //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
          // Multiply up by precision, round accurately, then divide and use native toFixed():
          output = (roundingFunction(value * power) / power).toFixed(boundedPrecision);
  
          if (optionals > maxDecimals - boundedPrecision) {
              optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
              output = output.replace(optionalsRegExp, '');
          }
  
          return output;
      }
  
      /************************************
          Formatting
      ************************************/
  
      // determine what type of formatting we need to do
      function formatNumeral(n, format, roundingFunction) {
          var output;
  
          if (n._value === 0 && options.zeroFormat !== null) {
              output = options.zeroFormat;
          } else if (n._value === null && options.nullFormat !== null) {
              output = options.nullFormat;
          } else {
              // figure out what kind of format we are dealing with
              if (format.indexOf('$') > -1) {
                  output = formatCurrency(n, format, roundingFunction);
              } else if (format.indexOf('%') > -1) {
                  output = formatPercentage(n, format, roundingFunction);
              } else if (format.indexOf(':') > -1) {
                  output = formatTime(n, format);
              } else if (format.indexOf('b') > -1 || format.indexOf('ib') > -1) {
                  output = formatBytes(n, format, roundingFunction);
              } else if (format.indexOf('o') > -1) {
                  output = formatOrdinal(n, format, roundingFunction);
              } else {
                  output = formatNumber(n._value, format, roundingFunction);
              }
          }
  
          return output;
      }
  
      function formatCurrency(n, format, roundingFunction) {
          var symbolIndex = format.indexOf('$'),
              openParenIndex = format.indexOf('('),
              minusSignIndex = format.indexOf('-'),
              space = '',
              spliceIndex,
              output;
  
          // check for space before or after currency
          if (format.indexOf(' $') > -1) {
              space = ' ';
              format = format.replace(' $', '');
          } else if (format.indexOf('$ ') > -1) {
              space = ' ';
              format = format.replace('$ ', '');
          } else {
              format = format.replace('$', '');
          }
  
          // format the number
          output = formatNumber(n._value, format, roundingFunction, false);
  
          // position the symbol
          if (symbolIndex <= 1) {
              if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                  output = output.split('');
                  spliceIndex = 1;
                  if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
                      // the symbol appears before the "(" or "-"
                      spliceIndex = 0;
                  }
                  output.splice(spliceIndex, 0, languages[options.currentLanguage].currency.symbol + space);
                  output = output.join('');
              } else {
                  output = languages[options.currentLanguage].currency.symbol + space + output;
              }
          } else {
              if (output.indexOf(')') > -1) {
                  output = output.split('');
                  output.splice(-1, 0, space + languages[options.currentLanguage].currency.symbol);
                  output = output.join('');
              } else {
                  output = output + space + languages[options.currentLanguage].currency.symbol;
              }
          }
  
          return output;
      }
  
      function formatPercentage(n, format, roundingFunction) {
          var space = '',
              output,
              value = n._value * 100;
  
          // check for space before %
          if (format.indexOf(' %') > -1) {
              space = ' ';
              format = format.replace(' %', '');
          } else {
              format = format.replace('%', '');
          }
  
          output = formatNumber(value, format, roundingFunction);
  
          if (output.indexOf(')') > -1) {
              output = output.split('');
              output.splice(-1, 0, space + '%');
              output = output.join('');
          } else {
              output = output + space + '%';
          }
  
          return output;
      }
  
      function formatBytes(n, format, roundingFunction) {
          var output,
              suffixes = format.indexOf('ib') > -1 ? byteSuffixes.iec : byteSuffixes.bytes,
              value = n._value,
              suffix = '',
              power,
              min,
              max;
  
          // check for space before
          if (format.indexOf(' b') > -1 || format.indexOf(' ib') > -1) {
              suffix = ' ';
              format = format.replace(' ib', '').replace(' b', '');
          } else {
              format = format.replace('ib', '').replace('b', '');
          }
  
          for (power = 0; power <= suffixes.length; power++) {
              min = Math.pow(1024, power);
              max = Math.pow(1024, power + 1);
  
              if (value === null || value === 0 || value >= min && value < max) {
                  suffix += suffixes[power];
  
                  if (min > 0) {
                      value = value / min;
                  }
  
                  break;
              }
          }
  
          output = formatNumber(value, format, roundingFunction);
  
          return output + suffix;
      }
  
      function formatOrdinal(n, format, roundingFunction) {
          var output,
              ordinal = '';
  
          // check for space before
          if (format.indexOf(' o') > -1) {
              ordinal = ' ';
              format = format.replace(' o', '');
          } else {
              format = format.replace('o', '');
          }
  
          ordinal += languages[options.currentLanguage].ordinal(n._value);
  
          output = formatNumber(n._value, format, roundingFunction);
  
          return output + ordinal;
      }
  
      function formatTime(n) {
          var hours = Math.floor(n._value / 60 / 60),
              minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),
              seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
  
          return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
      }
  
      function formatNumber(value, format, roundingFunction) {
          var negP = false,
              signed = false,
              optDec = false,
              abbr = '',
              abbrK = false, // force abbreviation to thousands
              abbrM = false, // force abbreviation to millions
              abbrB = false, // force abbreviation to billions
              abbrT = false, // force abbreviation to trillions
              abbrForce = false, // force abbreviation
              abs,
              min,
              max,
              power,
              w,
              precision,
              thousands,
              d = '',
              neg = false;
  
          if (value === null) {
              value = 0;
          }
  
          abs = Math.abs(value);
  
          // see if we should use parentheses for negative number or if we should prefix with a sign
          // if both are present we default to parentheses
          if (format.indexOf('(') > -1) {
              negP = true;
              format = format.slice(1, -1);
          } else if (format.indexOf('+') > -1) {
              signed = true;
              format = format.replace(/\+/g, '');
          }
  
          // see if abbreviation is wanted
          if (format.indexOf('a') > -1) {
              // check if abbreviation is specified
              abbrK = format.indexOf('aK') >= 0;
              abbrM = format.indexOf('aM') >= 0;
              abbrB = format.indexOf('aB') >= 0;
              abbrT = format.indexOf('aT') >= 0;
              abbrForce = abbrK || abbrM || abbrB || abbrT;
  
              // check for space before abbreviation
              if (format.indexOf(' a') > -1) {
                  abbr = ' ';
              }
  
              format = format.replace(new RegExp(abbr + 'a[KMBT]?'), '');
  
              if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                  // trillion
                  abbr = abbr + languages[options.currentLanguage].abbreviations.trillion;
                  value = value / Math.pow(10, 12);
              } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                  // billion
                  abbr = abbr + languages[options.currentLanguage].abbreviations.billion;
                  value = value / Math.pow(10, 9);
              } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                  // million
                  abbr = abbr + languages[options.currentLanguage].abbreviations.million;
                  value = value / Math.pow(10, 6);
              } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                  // thousand
                  abbr = abbr + languages[options.currentLanguage].abbreviations.thousand;
                  value = value / Math.pow(10, 3);
              }
          }
  
  
          if (format.indexOf('[.]') > -1) {
              optDec = true;
              format = format.replace('[.]', '.');
          }
  
          w = value.toString().split('.')[0];
          precision = format.split('.')[1];
          thousands = format.indexOf(',');
  
          if (precision) {
              if (precision.indexOf('[') > -1) {
                  precision = precision.replace(']', '');
                  precision = precision.split('[');
                  d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
              } else {
                  d = toFixed(value, precision.length, roundingFunction);
              }
  
              w = d.split('.')[0];
  
              if (d.indexOf('.') > -1) {
                  d = languages[options.currentLanguage].delimiters.decimal + d.split('.')[1];
              } else {
                  d = '';
              }
  
              if (optDec && Number(d.slice(1)) === 0) {
                  d = '';
              }
          } else {
              w = toFixed(value, null, roundingFunction);
          }
  
          // format number
          if (w.indexOf('-') > -1) {
              w = w.slice(1);
              neg = true;
          }
  
          if (thousands > -1) {
              w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[options.currentLanguage].delimiters.thousands);
          }
  
          if (format.indexOf('.') === 0) {
              w = '';
          }
  
          return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((abbr) ? abbr : '') + ((negP && neg) ? ')' : '');
      }
  
  
      /************************************
          Unformatting
      ************************************/
  
      // revert to number
      function unformatNumeral(n, string) {
          var stringOriginal = string,
              thousandRegExp,
              millionRegExp,
              billionRegExp,
              trillionRegExp,
              bytesMultiplier = false,
              power,
              value;
  
          if (string.indexOf(':') > -1) {
              value = unformatTime(string);
          } else {
              if (string === options.zeroFormat || string === options.nullFormat) {
                  value = 0;
              } else {
                  if (languages[options.currentLanguage].delimiters.decimal !== '.') {
                      string = string.replace(/\./g, '').replace(languages[options.currentLanguage].delimiters.decimal, '.');
                  }
  
                  // see if abbreviations are there so that we can multiply to the correct number
                  thousandRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                  millionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                  billionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                  trillionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');
  
                  // see if bytes are there so that we can multiply to the correct number
                  for (power = 1; power <= byteSuffixes.bytes.length; power++) {
                      bytesMultiplier = ((string.indexOf(byteSuffixes.bytes[power]) > -1) || (string.indexOf(byteSuffixes.iec[power]) > -1))? Math.pow(1024, power) : false;
  
                      if (bytesMultiplier) {
                          break;
                      }
                  }
  
                  // do some math to create our number
                  value = bytesMultiplier ? bytesMultiplier : 1;
                  value *= stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1;
                  value *= stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1;
                  value *= stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1;
                  value *= stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1;
                  // check for percentage
                  value *= string.indexOf('%') > -1 ? 0.01 : 1;
                  // check for negative number
                  value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;
                  // remove non numbers
                  value *= Number(string.replace(/[^0-9\.]+/g, ''));
                  // round if we are talking about bytes
                  value = bytesMultiplier ? Math.ceil(value) : value;
              }
          }
  
          n._value = value;
  
          return n._value;
      }
      function unformatTime(string) {
          var timeArray = string.split(':'),
              seconds = 0;
          // turn hours and minutes into seconds and add them all up
          if (timeArray.length === 3) {
              // hours
              seconds = seconds + (Number(timeArray[0]) * 60 * 60);
              // minutes
              seconds = seconds + (Number(timeArray[1]) * 60);
              // seconds
              seconds = seconds + Number(timeArray[2]);
          } else if (timeArray.length === 2) {
              // minutes
              seconds = seconds + (Number(timeArray[0]) * 60);
              // seconds
              seconds = seconds + Number(timeArray[1]);
          }
          return Number(seconds);
      }
  
  
      /************************************
          Top Level Functions
      ************************************/
  
      numeral = function(input) {
          if (numeral.isNumeral(input)) {
              input = input.value();
          } else if (input === 0 || typeof input === 'undefined') {
              input = 0;
          } else if (input === null) {
              input = null;
          } else if (!Number(input)) {
              input = numeral.fn.unformat(input);
          } else {
              input = Number(input);
          }
  
          return new Numeral(input);
      };
  
      // version number
      numeral.version = VERSION;
  
      // compare numeral object
      numeral.isNumeral = function(obj) {
          return obj instanceof Numeral;
      };
  
  
      // This function will load languages and then set the global language.  If
      // no arguments are passed in, it will simply return the current global
      // language key.
      numeral.language = function(key, values) {
          if (!key) {
              return options.currentLanguage;
          }
  
          key = key.toLowerCase();
  
          if (key && !values) {
              if (!languages[key]) {
                  throw new Error('Unknown language : ' + key);
              }
  
              options.currentLanguage = key;
          }
  
          if (values || !languages[key]) {
              loadLanguage(key, values);
          }
  
          return numeral;
      };
  
      numeral.reset = function() {
          for (var property in defaults) {
              options[property] = defaults[property];
          }
      };
  
      // This function provides access to the loaded language data.  If
      // no arguments are passed in, it will simply return the current
      // global language object.
      numeral.languageData = function(key) {
          if (!key) {
              return languages[options.currentLanguage];
          }
  
          if (!languages[key]) {
              throw new Error('Unknown language : ' + key);
          }
  
          return languages[key];
      };
  
      numeral.language('en', {
          delimiters: {
              thousands: ',',
              decimal: '.'
          },
          abbreviations: {
              thousand: 'k',
              million: 'm',
              billion: 'b',
              trillion: 't'
          },
          ordinal: function(number) {
              var b = number % 10;
              return (~~(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
          },
          currency: {
              symbol: '$'
          }
      });
  
      numeral.zeroFormat = function(format) {
          options.zeroFormat = typeof(format) === 'string' ? format : null;
      };
  
      numeral.nullFormat = function (format) {
          options.nullFormat = typeof(format) === 'string' ? format : null;
      };
  
      numeral.defaultFormat = function(format) {
          options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
      };
  
      numeral.validate = function(val, culture) {
          var _decimalSep,
              _thousandSep,
              _currSymbol,
              _valArray,
              _abbrObj,
              _thousandRegEx,
              languageData,
              temp;
  
          //coerce val to string
          if (typeof val !== 'string') {
              val += '';
              if (console.warn) {
                  console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
              }
          }
  
          //trim whitespaces from either sides
          val = val.trim();
  
          //if val is just digits return true
          if ( !! val.match(/^\d+$/)) {
              return true;
          }
  
          //if val is empty return false
          if (val === '') {
              return false;
          }
  
          //get the decimal and thousands separator from numeral.languageData
          try {
              //check if the culture is understood by numeral. if not, default it to current language
              languageData = numeral.languageData(culture);
          } catch (e) {
              languageData = numeral.languageData(numeral.language());
          }
  
          //setup the delimiters and currency symbol based on culture/language
          _currSymbol = languageData.currency.symbol;
          _abbrObj = languageData.abbreviations;
          _decimalSep = languageData.delimiters.decimal;
          if (languageData.delimiters.thousands === '.') {
              _thousandSep = '\\.';
          } else {
              _thousandSep = languageData.delimiters.thousands;
          }
  
          // validating currency symbol
          temp = val.match(/^[^\d]+/);
          if (temp !== null) {
              val = val.substr(1);
              if (temp[0] !== _currSymbol) {
                  return false;
              }
          }
  
          //validating abbreviation symbol
          temp = val.match(/[^\d]+$/);
          if (temp !== null) {
              val = val.slice(0, -1);
              if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
                  return false;
              }
          }
  
          _thousandRegEx = new RegExp(_thousandSep + '{2}');
  
          if (!val.match(/[^\d.,]/g)) {
              _valArray = val.split(_decimalSep);
              if (_valArray.length > 2) {
                  return false;
              } else {
                  if (_valArray.length < 2) {
                      return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
                  } else {
                      if (_valArray[0].length === 1) {
                          return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                      } else {
                          return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                      }
                  }
              }
          }
  
          return false;
      };
  
      /************************************
          Helpers
      ************************************/
  
      function loadLanguage(key, values) {
          languages[key] = values;
      }
  
      /************************************
          Floating-point helpers
      ************************************/
  
      // The floating-point helper functions and implementation
      // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/
  
      // Production steps of ECMA-262, Edition 5, 15.4.4.21
      // Reference: http://es5.github.io/#x15.4.4.21
      if (!Array.prototype.reduce) {
          Array.prototype.reduce = function(callback /*, initialValue*/) {
              'use strict';
              if (this === null) {
                  throw new TypeError('Array.prototype.reduce called on null or undefined');
              }
  
              if (typeof callback !== 'function') {
                  throw new TypeError(callback + ' is not a function');
              }
  
              var t = Object(this), len = t.length >>> 0, k = 0, value;
  
              if (arguments.length === 2) {
                  value = arguments[1];
              } else {
                  while (k < len && !(k in t)) {
                      k++;
                  }
  
                  if (k >= len) {
                      throw new TypeError('Reduce of empty array with no initial value');
                  }
  
                  value = t[k++];
              }
              for (; k < len; k++) {
                  if (k in t) {
                      value = callback(value, t[k], k, t);
                  }
              }
              return value;
          };
      }
  
      /**
       * Computes the multiplier necessary to make x >= 1,
       * effectively eliminating miscalculations caused by
       * finite precision.
       */
      function multiplier(x) {
          var parts = x.toString().split('.');
          if (parts.length < 2) {
              return 1;
          }
          return Math.pow(10, parts[1].length);
      }
  
      /**
       * Given a variable number of arguments, returns the maximum
       * multiplier that must be used to normalize an operation involving
       * all of them.
       */
      function correctionFactor() {
          var args = Array.prototype.slice.call(arguments);
          return args.reduce(function(prev, next) {
              var mp = multiplier(prev),
                  mn = multiplier(next);
              return mp > mn ? mp : mn;
          }, -Infinity);
      }
  
  
      /************************************
          Numeral Prototype
      ************************************/
  
  
      numeral.fn = Numeral.prototype = {
  
          clone: function() {
              return numeral(this);
          },
  
          format: function (inputString, roundingFunction) {
              return formatNumeral(this,
                  inputString ? inputString : options.defaultFormat,
                  roundingFunction !== undefined ? roundingFunction : Math.round
              );
          },
  
          unformat: function (inputString) {
              if (Object.prototype.toString.call(inputString) === '[object Number]') {
                  return inputString;
              }
  
              return unformatNumeral(this, inputString ? inputString : options.defaultFormat);
          },
  
          value: function() {
              return this._value;
          },
  
          valueOf: function() {
              return this._value;
          },
  
          set: function(value) {
              this._value = Number(value);
              return this;
          },
  
          add: function(value) {
              var corrFactor = correctionFactor.call(null, this._value, value);
  
              function cback(accum, curr, currI, O) {
                  return accum + corrFactor * curr;
              }
              this._value = [this._value, value].reduce(cback, 0) / corrFactor;
              return this;
          },
  
          subtract: function(value) {
              var corrFactor = correctionFactor.call(null, this._value, value);
  
              function cback(accum, curr, currI, O) {
                  return accum - corrFactor * curr;
              }
              this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
              return this;
          },
  
          multiply: function(value) {
              function cback(accum, curr, currI, O) {
                  var corrFactor = correctionFactor(accum, curr);
                  return (accum * corrFactor) * (curr * corrFactor) /
                      (corrFactor * corrFactor);
              }
              this._value = [this._value, value].reduce(cback, 1);
              return this;
          },
  
          divide: function(value) {
              function cback(accum, curr, currI, O) {
                  var corrFactor = correctionFactor(accum, curr);
                  return (accum * corrFactor) / (curr * corrFactor);
              }
              this._value = [this._value, value].reduce(cback);
              return this;
          },
  
          difference: function(value) {
              return Math.abs(numeral(this._value).subtract(value).value());
          }
  
      };
  
      /************************************
          Exposing Numeral
      ************************************/
  
      // CommonJS module is defined
      if (typeof module !== 'undefined' && module.exports) {
          module.exports = numeral;
      }
  
      /*global ender:false */
      if (typeof ender === 'undefined') {
          // here, `this` means `window` in the browser, or `global` on the server
          // add `numeral` as a global object via a string identifier,
          // for Closure Compiler 'advanced' mode
          this['numeral'] = numeral;
      }
  
      /*global define:false */
      if (typeof define === 'function' && define.amd) {
          define([], function() {
              return numeral;
          });
      }
  }).call(this);
  

});

;/*!/node_modules/glpb-components-common/src/utils/utils.js*/
define('common:node_modules/glpb-components-common/src/utils/utils', function(require, exports, module) {

  /**
   * Created by jess on 16/8/10.
   */
  
  var singleton = {};
  
  module.exports = singleton;
  
  var componentId = 0;
  
  //生成组件ID
  singleton.generateComponentId = function () {
      var now = Date.now();
      return 'glpb-com-' + now + componentId++;
  };
  
  /**
   *  在父DOM中移动子元素到新的位置
   * @param $child
   * @param $parent
   * @param newIndex
   */
  singleton.moveChildInParent = function ($child, $parent, newIndex) {
      var children = $parent.children();
      var currentIndex = $child.index();
      var $toBeforeSibling = children[newIndex];
      // $target.detach();
      if (currentIndex < newIndex) {
          $child.insertAfter($toBeforeSibling);
      } else if (currentIndex > newIndex) {
          $child.insertBefore($toBeforeSibling);
      }
  };
  
  /**
   * 将 $child 对应的DOM插入到 $parent 的 index 位置上
   * @param $child {object} 要插入的DOM的 jquery 对象
   * @param $parent {object} 容器DOM的 jquery 对象
   * @param index {int} 要插入到的位置上
   */
  singleton.insertElement = function ($child, $parent, index) {
  
      //因为要插入的 index, 是基于 child 不存在的DOM中的情况下算出来的, 为了解决child本来就在parent中的情况, 先把child从DOM中移出
      $child.detach();
  
      var targetSibling = $parent.children()[index];
      if (targetSibling) {
          $child.insertBefore(targetSibling);
      } else {
          //将新插入的组件追加到最后
          $parent.append($child);
      }
  };
  
  /**
   * 系统中, 每个组件的 style, 并不能直接设置给DOM元素, 需要经过转换
   * 本函数将系统中的 style 写法, 转换成 DOM 原生识别的样式
   * @param style {object} 系统中的组件style, 并 **不是** 浏览器原生支持的CSS样式
   * @returns {{}} 浏览器原生支持的CSS样式
   */
  singleton.translateComponentStyle = function (style) {
  
      //要特殊处理的属性
      var specialAttrs = ['background'];
  
      var realStyle = {};
      //特殊处理 background : {}
      var background = style.background;
      if (background) {
          for (var i in background) {
              if (background.hasOwnProperty(i)) {
                  realStyle[i] = background[i];
              }
          }
      }
  
      //拷贝剩余的样式
      for (var j in style) {
          if (j && style.hasOwnProperty(j)) {
  
              var value = style[j];
              //key 中可能包含了子选择器或者伪类  color|:hover>[DOT]inner-text span
              var arr = j.split('|');
              var styleName = arr[0];
              var remainSelector = '';
  
              if (specialAttrs.indexOf(styleName) < 0) {
                  realStyle[j] = value;
              } else if (value) {
                  //处理background复合属性
                  if (arr.length === 1) {} else {
                      //包含有子选择器或伪类
                      remainSelector = '|' + arr[1];
                  }
  
                  for (var subKey in value) {
                      if (subKey && value && value.hasOwnProperty(subKey)) {
                          var subValue = value[subKey];
                          if (subKey === 'backgroundImage' && subValue && /^((http|https)\:)?\/\/.+/.test(subValue)) {
                              subValue = 'url(' + subValue + ')';
                          }
                          realStyle[subKey + remainSelector] = subValue;
                      }
                  }
              }
          }
      }
  
      if (realStyle.animation) {
          realStyle.WebkitAnimation = realStyle.animation;
      }
  
      return realStyle;
  };
  
  var querySignIndex = 0;
  /**
   * 简单的生成当前页面上惟一ID, 一般用在Ajax请求中, 标记某个请求的ID
   * @returns {string} {string}
   */
  singleton.generateQuerySign = function () {
      return new Date().getTime() + '' + querySignIndex++;
  };
  
  /**
   * 将字符串中包含的HTML特殊字符,转换成实体, 避免注入
   * @param str {string} 可能包含HTML标签的字符串
   * @returns {string} 将HTML标签转换成实体之后的字符串
   */
  singleton.escapeHTML = function (str) {
      str = str || '';
      return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };
  
  /**
   * 将CSS中的px转换成 rem 的数值, 用在移动端自适应场景下
   * @param pxNumber {number} px为单位的长度数字
   * @returns {number}
   */
  singleton.px2rem = function (pxNumber) {
      pxNumber = pxNumber || 0;
      return pxNumber / 100;
  };
  
  /**
   * 移动端将 rem 为单位的长度数值,转换成 px 为单位的, 用在自适应场景下
   * @param remNumber {number} rem为单位的长度数值
   * @returns {number} px 为单位的长度数值
   */
  singleton.rem2px = function (remNumber) {
      remNumber = remNumber || 0;
      return remNumber * 100;
  };
  
  /////////////////解析URL参数///////////
  singleton.query2json = function (s) {
      s = s.replace(/^\?/, '');
      var out = {};
      var arr = s.split('&');
      for (var i = 0, len = arr.length; i < len; i++) {
          var temp = arr[i];
          var tempArr = temp.split('=');
          if (tempArr.length === 2) {
              try {
                  out[tempArr[0]] = decodeURIComponent(tempArr[1]);
              } catch (e) {}
          }
      }
  
      return out;
  };
  
  singleton.json2query = function (data) {
      var out = '';
      if (data) {
          for (var i in data) {
              if (data.hasOwnProperty(i)) {
                  out += i + '=' + encodeURIComponent(data[i]) + '&';
              }
          }
      }
  
      return out;
  };
  
  singleton.getSearchConf = function () {
      return singleton.query2json(location.search);
  };
  
  singleton.getTplConf = function () {
      return window.tplConf || {};
  };
  
  var tplData = window.glpbCommonConstants || {};
  /**
   * 提供字符串内变量替换功能, 只能替换系统支持的几个, 从 window.glpbCommonConstants 行获取值 
   * @param str {string} 可能包含系统变量的字符串
   * @returns {string}
   */
  singleton.translateString = function (str) {
      str = str || '';
      return str.replace(/\$\$([0-9a-zA-Z_]+)\$\$/g, function (s1, key) {
          return tplData[key] || '';
      });
  };
  
  /**
   * 将 style 中的 驼峰式 的CSS属性名转换成 CSS 中的 中划线 分隔的格式, 方便将结果写入 <style> 标签中
   * @param style {object}
   * @return {string} 处理之后的CSS规则字符串
   */
  singleton.camelCSS2String = function (style) {
      var out = '';
      if (style) {
          for (var key in style) {
              if (style.hasOwnProperty(key)) {
                  var value = style[key];
                  var temp = key;
                  temp = temp.replace(/([A-Z])/g, '-$1').toLowerCase();
                  out += temp + ':' + value + ';';
              }
          }
      }
      return out;
  };
  
  /**
   * 将某个CSS选择器及对应的驼峰样式对象, 转换成<style> 中可以直接使用的 字符串
   * @param selector {string} CSS的选择器
   * @param style {object} 该选择器对应的样式对象
   * @returns {string} 可以直接写入 <style> 中的CSS字符串
   */
  singleton.camelStyle2String = function (selector, style) {
  
      var allStyle = {};
      allStyle[selector] = [];
      var currentSelector = '';
      if (style) {
          for (var key in style) {
              if (style.hasOwnProperty(key)) {
                  currentSelector = selector;
                  var value = style[key];
                  var temp = key;
                  var arr = temp.split('|');
                  var len = arr.length;
                  var childSelector = '';
                  if (len > 1) {
  
                      //属性名只是在第一个
                      temp = arr[0];
                      childSelector = arr[1] || '';
  
                      if (childSelector) {
                          //如果属性名中包含了子选择器, 需要将 特殊的 [DOT] 替换会 . ,因为 mongodb中不支持属性名带 .
                          childSelector = childSelector.replace(/\[DOT\]/g, '.');
                      }
  
                      currentSelector = selector + childSelector;
                  }
                  temp = temp.replace(/([A-Z])/g, '-$1').toLowerCase();
                  var text = temp + ':' + value + ';';
                  var rulesArray = allStyle[currentSelector] || [];
                  rulesArray.push(text);
                  allStyle[currentSelector] = rulesArray;
              }
          }
      }
  
      var finalText = '';
  
      for (var s2 in allStyle) {
          if (allStyle.hasOwnProperty(s2)) {
              finalText += s2 + '{' + allStyle[s2].join('') + '}';
          }
      }
  
      return finalText;
  };
  
  /**
   * 重新设置某个 <style> 标签的内容
   * @param style {object} style标签的引用
   * @param str {string} 要设置的CSS内容
   */
  singleton.updateStyleText = function (style, str) {
      if ('textContent' in style) {
          style.textContent = str;
      } else if (style.styleSheet && 'cssText' in style.styleSheet) {
          style.styleSheet.cssText = str;
      }
  };

});

;/*!/node_modules/glpb-components-common/src/utils/js-cookie.js*/
define('common:node_modules/glpb-components-common/src/utils/js-cookie', function(require, exports, module) {

  /*!
   * JavaScript Cookie v2.1.3
   * https://github.com/js-cookie/js-cookie
   *
   * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
   * Released under the MIT license
   */
  ;(function (factory) {
      var registeredInModuleLoader = false;
      if (typeof define === 'function' && define.amd) {
          define(factory);
          registeredInModuleLoader = true;
      }
      if (typeof exports === 'object') {
          module.exports = factory();
          registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
          var OldCookies = window.Cookies;
          var api = window.Cookies = factory();
          api.noConflict = function () {
              window.Cookies = OldCookies;
              return api;
          };
      }
  })(function () {
      function extend() {
          var i = 0;
          var result = {};
          for (; i < arguments.length; i++) {
              var attributes = arguments[i];
              for (var key in attributes) {
                  result[key] = attributes[key];
              }
          }
          return result;
      }
  
      function init(converter) {
          function api(key, value, attributes) {
              var result;
              if (typeof document === 'undefined') {
                  return;
              }
  
              // Write
  
              if (arguments.length > 1) {
                  attributes = extend({
                      path: '/'
                  }, api.defaults, attributes);
  
                  if (typeof attributes.expires === 'number') {
                      var expires = new Date();
                      expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
                      attributes.expires = expires;
                  }
  
                  try {
                      result = JSON.stringify(value);
                      if (/^[\{\[]/.test(result)) {
                          value = result;
                      }
                  } catch (e) {}
  
                  if (!converter.write) {
                      value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                  } else {
                      value = converter.write(value, key);
                  }
  
                  key = encodeURIComponent(String(key));
                  key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
                  key = key.replace(/[\(\)]/g, escape);
  
                  return document.cookie = [key, '=', value, attributes.expires ? '; expires=' + attributes.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                  attributes.path ? '; path=' + attributes.path : '', attributes.domain ? '; domain=' + attributes.domain : '', attributes.secure ? '; secure' : ''].join('');
              }
  
              // Read
  
              if (!key) {
                  result = {};
              }
  
              // To prevent the for loop in the first place assign an empty array
              // in case there are no cookies at all. Also prevents odd result when
              // calling "get()"
              var cookies = document.cookie ? document.cookie.split('; ') : [];
              var rdecode = /(%[0-9A-Z]{2})+/g;
              var i = 0;
  
              for (; i < cookies.length; i++) {
                  var parts = cookies[i].split('=');
                  var cookie = parts.slice(1).join('=');
  
                  if (cookie.charAt(0) === '"') {
                      cookie = cookie.slice(1, -1);
                  }
  
                  try {
                      var name = parts[0].replace(rdecode, decodeURIComponent);
                      cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
  
                      if (this.json) {
                          try {
                              cookie = JSON.parse(cookie);
                          } catch (e) {}
                      }
  
                      if (key === name) {
                          result = cookie;
                          break;
                      }
  
                      if (!key) {
                          result[name] = cookie;
                      }
                  } catch (e) {}
              }
  
              return result;
          }
  
          api.set = api;
          api.get = function (key) {
              return api.call(api, key);
          };
          api.getJSON = function () {
              return api.apply({
                  json: true
              }, [].slice.call(arguments));
          };
          api.defaults = {};
  
          api.remove = function (key, attributes) {
              api(key, '', extend(attributes, {
                  expires: -1
              }));
          };
  
          api.withConverter = init;
  
          return api;
      }
  
      return init(function () {});
  });

});

;/*!/node_modules/glpb-components-common/src/utils/parameter-utils.js*/
define('common:node_modules/glpb-components-common/src/utils/parameter-utils', function(require, exports, module) {

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();
  
  /**
   * 从cookie获取/设置参数
   * Created by 王半仙 on 2017/1/9.
   *
   * 去掉使用第三方的cookie库、修改setcookie方法等
   * modify by liucong on 20170707
   */
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  var singleton = {};
  
  module.exports = singleton;
  
  singleton.setCookie = function (c_name, value, expireDay) {
      var exdate = new Date();
      exdate.setTime(exdate.getTime() + expireDay * 24 * 60 * 60 * 1000);
      document.cookie = c_name + "=" + encodeURIComponent(value) + (expireDay == null ? "" : ";expires=" + exdate.toGMTString() + ";path=/");
  };
  
  /**
   * 设置多个cookie
   * @param cookies Object
   * @param expireDay
   * @returns {{}}
   */
  singleton.setCookies = function (cookies, expireDay) {
      for (var cookieKey in cookies) {
          singleton.setCookie(cookieKey, cookies[cookieKey], expireDay);
      }
  };
  
  singleton.getQueryData = function (platform) {
      var queryData = utils.getSearchConf();
      // lp页面改为不存utmSource了
      // queryData.utmSource = this.setCookie('utmSource');
      // queryData.promotion = this.setCookie('utmSource');
      return queryData;
  };
  
  singleton.getCookie = function (name) {
  
      var arr = undefined,
          reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
  
      if (arr = document.cookie.match(reg)) {
          return unescape(arr[2]);
      } else {
          return null;
      }
  };
  
  /**
   * 获取所有的utm开头的cookie
   * @returns Object
   */
  singleton.getAllUtmCookies = function () {
      var allCookiesArr = document.cookie.split(";");
      var retObj = {};
  
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;
  
      try {
          for (var _iterator = allCookiesArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
  
              var _value$split = value.split("=");
  
              var _value$split2 = _slicedToArray(_value$split, 2);
  
              var cookieKey = _value$split2[0];
              var cookieValue = _value$split2[1];
  
              //去掉cookie开头默认带的空格
              cookieKey = cookieKey.replace(/^\s+|\s+$/gm, '');
              if (/^(utm)/.test(cookieKey)) {
                  //utm_source、utmSource的兼容性写法
                  if (key == "utm_source") {
                      key = "utmSource";
                  }
                  retObj[cookieKey] = cookieValue;
              }
          }
      } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
      } finally {
          try {
              if (!_iteratorNormalCompletion && _iterator["return"]) {
                  _iterator["return"]();
              }
          } finally {
              if (_didIteratorError) {
                  throw _iteratorError;
              }
          }
      }
  
      return retObj;
  };
  
  /**
   * 保存所有的utm开头的cookie
   * @returns Object
   */
  singleton.saveUtmParams = function () {
      //将参数转为json
      var query = utils.getSearchConf();
  
      var cookiesObj = {};
  
      //将utm开头的字段存入cookie
      for (var _key in query) {
          if (/^(utm)/.test(_key)) {
              var cookieValue = query[_key];
  
              //utm_source、utmSource的兼容性写法
              if (_key == "utm_source") {
                  _key = "utmSource";
              }
              cookiesObj[_key] = cookieValue;
          }
      }
      //如果不为空，就存入cookie
      if (JSON.stringify(cookiesObj) != "{}") {
          singleton.setCookies(cookiesObj, 365);
      }
  };
  
  /**
   * 获取url中的utmSource或者utm_source参数
   */
  singleton.getUtmSourceBySearch = function () {
      var query = utils.getSearchConf();
  
      return query["utmSource"] || query["utm_source"] || null;
  };

});

;/*!/node_modules/glpb-components-common/src/rsa/rsaKey.js*/
define('common:node_modules/glpb-components-common/src/rsa/rsaKey', function(require, exports, module) {

  /**
   * Created by jess on 16/2/22.
   */
  
  'use strict';
  
  var ONLINE_KEY = '-----BEGIN PUBLIC KEY-----\n' + 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMO0o8vYsqInbD/8uraIdWqP8Y\n' + 'cc7KQuLS7w0VbCWocyMRYu582LwzycBOPvbbEKt2feqpUKQ+F3peq+HQnI6gL9d6\n' + '6l0ZG3KjflZTQJ8M847USfUNGVbAi3PJG/NiwQHddUUudmjIEAXwadelp/g+/p97\n' + 'YcBAz8caQDcEyI0AjQIDAQAB\n' + '-----END PUBLIC KEY-----;';
  
  var TEST_KEY = '-----BEGIN PUBLIC KEY-----\n' + 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/GP6dENV96jD1oSvmbYhbhHhc\n' + '/7Ngv+DY0iuhmzteyrWDswJDddEHViuhJTZguCGotujOcauzNm71sjW+sHXEJVIX\n' + 'HD4eiBNN9SpPpxeioKepaArqujo76GX2EW6JNCBFiB8fevhZHV/e7PQik+jZw/m1\n' + '0eAjakbsbS4TBvwUtwIDAQAB\n' + '-----END PUBLIC KEY-----';
  
  window.___RSA_TRICK_KEYS___ = {
      onlineKey: ONLINE_KEY,
      testKey: TEST_KEY
  };
  
  window.___RSA_TRICK_KEYS___.finalKey = window.___RSA_TRICK_KEYS___.onlineKey;
  
  if (location.href.indexOf('jdebug=jdebug') > 0) {
      window.___RSA_TRICK_KEYS___.finalKey = window.___RSA_TRICK_KEYS___.testKey;
  } else {
      //从页面的 window.tplConf 上读取执行环境, 自动切换
      var isProduction = true;
      try {
          if (window.tplConf && window.tplConf.hasOwnProperty('isProduction')) {
              isProduction = window.tplConf.isProduction !== false;
          }
      } catch (e) {}
  
      if (!isProduction) {
          window.___RSA_TRICK_KEYS___.finalKey = window.___RSA_TRICK_KEYS___.testKey;
      }
  }
  
  module.exports = window.___RSA_TRICK_KEYS___.finalKey;

});

;/*!/node_modules/glpb-components-common/src/rsa/rsaCrypt.js*/
define('common:node_modules/glpb-components-common/src/rsa/rsaCrypt', function(require, exports, module) {

  /**
   * 从PC端WE理财拷贝的RSA加密JS,用于 注册/登录 过程中,加密 password
   * Created by jess on 16/2/22.
   */
  
  /* eslint-disable */
  
  var public_key_1024 = require('common:node_modules/glpb-components-common/src/rsa/rsaKey');
  
  var pidCryptUtil = {};
  
  function pidCrypt() {
      function a(a) {
          a || (a = 8);
          for (var b = new Array(a), c = [], d = 0; 256 > d; d++) c[d] = d;
          for (d = 0; d < b.length; d++) b[d] = c[Math.floor(Math.random() * c.length)];
          return b;
      }
      this.setDefaults = function () {
          this.params.nBits = 256, this.params.salt = a(8), this.params.salt = pidCryptUtil.byteArray2String(this.params.salt), this.params.salt = pidCryptUtil.convertToHex(this.params.salt), this.params.blockSize = 16, this.params.UTF8 = !0, this.params.A0_PAD = !0;
      }, this.debug = !0, this.params = {}, this.params.dataIn = "", this.params.dataOut = "", this.params.decryptIn = "", this.params.decryptOut = "", this.params.encryptIn = "", this.params.encryptOut = "", this.params.key = "", this.params.iv = "", this.params.clear = !0, this.setDefaults(), this.errors = "", this.warnings = "", this.infos = "", this.debugMsg = "", this.setParams = function (a) {
          a || (a = {});
          for (var b in a) this.params[b] = a[b];
      }, this.getParams = function () {
          return this.params;
      }, this.getParam = function (a) {
          return this.params[a] || "";
      }, this.clearParams = function () {
          this.params = {};
      }, this.getNBits = function () {
          return this.params.nBits;
      }, this.getOutput = function () {
          return this.params.dataOut;
      }, this.setError = function (a) {
          this.error = a;
      }, this.appendError = function (a) {
          return this.errors += a, "";
      }, this.getErrors = function () {
          return this.errors;
      }, this.isError = function () {
          return this.errors.length > 0 ? !0 : !1;
      }, this.appendInfo = function (a) {
          return this.infos += a, "";
      }, this.getInfos = function () {
          return this.infos;
      }, this.setDebug = function (a) {
          this.debug = a;
      }, this.appendDebug = function (a) {
          return this.debugMsg += a, "";
      }, this.isDebug = function () {
          return this.debug;
      }, this.getAllMessages = function (a) {
          var b = {
              lf: "\n",
              clr_mes: !1,
              verbose: 15
          };
          a || (a = b);
          for (var c in b) "undefined" == typeof a[c] && (a[c] = b[c]);
          var d = "",
              e = "";
          for (var f in this.params) {
              switch (f) {
                  case "encryptOut":
                      e = pidCryptUtil.toByteArray(this.params[f].toString()), e = pidCryptUtil.fragment(e.join(), 64, a.lf);
                      break;
                  case "key":
                  case "iv":
                      e = pidCryptUtil.formatHex(this.params[f], 48);
                      break;
                  default:
                      e = pidCryptUtil.fragment(this.params[f].toString(), 64, a.lf);
              }
              d += "<p><b>" + f + "</b>:<pre>" + e + "</pre></p>";
          }
          return this.debug && (d += "debug: " + this.debug + a.lf), this.errors.length > 0 && 1 == (1 & a.verbose) && (d += "Errors:" + a.lf + this.errors + a.lf), this.warnings.length > 0 && 2 == (2 & a.verbose) && (d += "Warnings:" + a.lf + this.warnings + a.lf), this.infos.length > 0 && 4 == (4 & a.verbose) && (d += "Infos:" + a.lf + this.infos + a.lf), this.debug && 8 == (8 & a.verbose) && (d += "Debug messages:" + a.lf + this.debugMsg + a.lf), a.clr_mes && (this.errors = this.infos = this.warnings = this.debug = ""), d;
      }, this.getRandomBytes = function (b) {
          return a(b);
      };
  }
  pidCryptUtil = {}, pidCryptUtil.encodeBase64 = function (a, b) {
      a || (a = "");
      var c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      b = "undefined" == typeof b ? !1 : b;
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k,
          n,
          o,
          p,
          l = [],
          m = "";
      if ((o = b ? pidCryptUtil.encodeUTF8(a) : a, n = o.length % 3, n > 0)) for (; n++ < 3;) m += "=", o += "\0";
      for (n = 0; n < o.length; n += 3) d = o.charCodeAt(n), e = o.charCodeAt(n + 1), f = o.charCodeAt(n + 2), g = d << 16 | e << 8 | f, h = 63 & g >> 18, i = 63 & g >> 12, j = 63 & g >> 6, k = 63 & g, l[n / 3] = c.charAt(h) + c.charAt(i) + c.charAt(j) + c.charAt(k);
      return p = l.join(""), p = p.slice(0, p.length - m.length) + m;
  }, pidCryptUtil.decodeBase64 = function (a, b) {
      a || (a = "");
      var c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      b = "undefined" == typeof b ? !1 : b;
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k,
          m,
          n,
          l = [];
      n = b ? pidCryptUtil.decodeUTF8(a) : a;
      for (var o = 0; o < n.length; o += 4) g = c.indexOf(n.charAt(o)), h = c.indexOf(n.charAt(o + 1)), i = c.indexOf(n.charAt(o + 2)), j = c.indexOf(n.charAt(o + 3)), k = g << 18 | h << 12 | i << 6 | j, d = 255 & k >>> 16, e = 255 & k >>> 8, f = 255 & k, l[o / 4] = String.fromCharCode(d, e, f), 64 == j && (l[o / 4] = String.fromCharCode(d, e)), 64 == i && (l[o / 4] = String.fromCharCode(d));
      return m = l.join(""), m = b ? pidCryptUtil.decodeUTF8(m) : m;
  }, pidCryptUtil.encodeUTF8 = function (a) {
      return a || (a = ""), a = a.replace(/[\u0080-\u07ff]/g, function (a) {
          var b = a.charCodeAt(0);
          return String.fromCharCode(192 | b >> 6, 128 | 63 & b);
      }), a = a.replace(/[\u0800-\uffff]/g, function (a) {
          var b = a.charCodeAt(0);
          return String.fromCharCode(224 | b >> 12, 128 | 63 & b >> 6, 128 | 63 & b);
      });
  }, pidCryptUtil.decodeUTF8 = function (a) {
      return a || (a = ""), a = a.replace(/[\u00c0-\u00df][\u0080-\u00bf]/g, function (a) {
          var b = (31 & a.charCodeAt(0)) << 6 | 63 & a.charCodeAt(1);
          return String.fromCharCode(b);
      }), a = a.replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g, function (a) {
          var b = (15 & a.charCodeAt(0)) << 12 | (63 & a.charCodeAt(1)) << 6 | 63 & a.charCodeAt(2);
          return String.fromCharCode(b);
      });
  }, pidCryptUtil.convertToHex = function (a) {
      a || (a = "");
      for (var b = "", c = "", d = 0; d < a.length; d++) c = a.charCodeAt(d).toString(16), b += 1 == c.length ? "0" + c : c;
      return b;
  }, pidCryptUtil.convertFromHex = function (a) {
      a || (a = "");
      for (var b = "", c = 0; c < a.length; c += 2) b += String.fromCharCode(parseInt(a.substring(c, c + 2), 16));
      return b;
  }, pidCryptUtil.stripLineFeeds = function (a) {
      a || (a = "");
      var b = "";
      return b = a.replace(/\n/g, ""), b = b.replace(/\r/g, "");
  }, pidCryptUtil.toByteArray = function (a) {
      a || (a = "");
      for (var b = [], c = 0; c < a.length; c++) b[c] = a.charCodeAt(c);
      return b;
  }, pidCryptUtil.fragment = function (a, b, c) {
      if ((a || (a = ""), !b || b >= a.length)) return a;
      c || (c = "\n");
      for (var d = "", e = 0; e < a.length; e += b) d += a.substr(e, b) + c;
      return d;
  }, pidCryptUtil.formatHex = function (a, b) {
      a || (a = ""), b || (b = 45);
      for (var c = "", e = a.toLowerCase(), f = 0; f < e.length; f += 2) c += e.substr(f, 2) + ":";
      return e = this.fragment(c, b);
  }, pidCryptUtil.byteArray2String = function (a) {
      for (var b = "", c = 0; c < a.length; c++) b += String.fromCharCode(a[c]);
      return b;
  };
  
  function Stream(a, b) {
      a instanceof Stream ? (this.enc = a.enc, this.pos = a.pos) : (this.enc = a, this.pos = b);
  }
  Stream.prototype.parseStringHex = function (a, b) {
      "undefined" == typeof b && (b = this.enc.length);
      for (var c = "", d = a; b > d; ++d) {
          var e = this.get(d);
          c += this.hexDigits.charAt(e >> 4) + this.hexDigits.charAt(15 & e);
      }
      return c;
  }, Stream.prototype.get = function (a) {
      if ((void 0 == a && (a = this.pos++), a >= this.enc.length)) throw "Requesting byte offset " + a + " on a stream of length " + this.enc.length;
      return this.enc[a];
  }, Stream.prototype.hexDigits = "0123456789ABCDEF", Stream.prototype.hexDump = function (a, b) {
      for (var c = "", d = a; b > d; ++d) {
          var e = this.get(d);
          c += this.hexDigits.charAt(e >> 4) + this.hexDigits.charAt(15 & e), 7 == (15 & d) && (c += " "), c += 15 == (15 & d) ? "\n" : " ";
      }
      return c;
  }, Stream.prototype.parseStringISO = function (a, b) {
      for (var c = "", d = a; b > d; ++d) c += String.fromCharCode(this.get(d));
      return c;
  }, Stream.prototype.parseStringUTF = function (a, b) {
      for (var c = "", d = 0, e = a; b > e;) {
          var d = this.get(e++);
          c += 128 > d ? String.fromCharCode(d) : d > 191 && 224 > d ? String.fromCharCode((31 & d) << 6 | 63 & this.get(e++)) : String.fromCharCode((15 & d) << 12 | (63 & this.get(e++)) << 6 | 63 & this.get(e++));
      }
      return c;
  }, Stream.prototype.reTime = /^((?:1[89]|2\d)?\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/, Stream.prototype.parseTime = function (a, b) {
      var c = this.parseStringISO(a, b),
          d = this.reTime.exec(c);
      return d ? (c = d[1] + "-" + d[2] + "-" + d[3] + " " + d[4], d[5] && (c += ":" + d[5], d[6] && (c += ":" + d[6], d[7] && (c += "." + d[7]))), d[8] && (c += " UTC", "Z" != d[8] && (c += d[8], d[9] && (c += ":" + d[9]))), c) : "Unrecognized time: " + c;
  }, Stream.prototype.parseInteger = function (a, b) {
      if (b - a > 4) return void 0;
      for (var c = 0, d = a; b > d; ++d) c = c << 8 | this.get(d);
      return c;
  }, Stream.prototype.parseOID = function (a, b) {
      for (var c, d = 0, e = 0, f = a; b > f; ++f) {
          var g = this.get(f);
          d = d << 7 | 127 & g, e += 7, 128 & g || (void 0 == c ? c = parseInt(d / 40) + "." + d % 40 : c += "." + (e >= 31 ? "big" : d), d = e = 0), c += String.fromCharCode();
      }
      return c;
  }, "undefined" != typeof pidCrypt && (pidCrypt.ASN1 = function (a, b, c, d, e) {
      this.stream = a, this.header = b, this.length = c, this.tag = d, this.sub = e;
  }, pidCrypt.ASN1.prototype.toHexTree = function () {
      var a = {};
      if ((a.type = this.typeName(), "SEQUENCE" != a.type && (a.value = this.stream.parseStringHex(this.posContent(), this.posEnd())), null != this.sub)) {
          a.sub = [];
          for (var b = 0, c = this.sub.length; c > b; ++b) a.sub[b] = this.sub[b].toHexTree();
      }
      return a;
  }, pidCrypt.ASN1.prototype.typeName = function () {
      if (void 0 == this.tag) return "unknown";
      var a = this.tag >> 6;
      1 & this.tag >> 5;
      var c = 31 & this.tag;
      switch (a) {
          case 0:
              switch (c) {
                  case 0:
                      return "EOC";
                  case 1:
                      return "BOOLEAN";
                  case 2:
                      return "INTEGER";
                  case 3:
                      return "BIT_STRING";
                  case 4:
                      return "OCTET_STRING";
                  case 5:
                      return "NULL";
                  case 6:
                      return "OBJECT_IDENTIFIER";
                  case 7:
                      return "ObjectDescriptor";
                  case 8:
                      return "EXTERNAL";
                  case 9:
                      return "REAL";
                  case 10:
                      return "ENUMERATED";
                  case 11:
                      return "EMBEDDED_PDV";
                  case 12:
                      return "UTF8String";
                  case 16:
                      return "SEQUENCE";
                  case 17:
                      return "SET";
                  case 18:
                      return "NumericString";
                  case 19:
                      return "PrintableString";
                  case 20:
                      return "TeletexString";
                  case 21:
                      return "VideotexString";
                  case 22:
                      return "IA5String";
                  case 23:
                      return "UTCTime";
                  case 24:
                      return "GeneralizedTime";
                  case 25:
                      return "GraphicString";
                  case 26:
                      return "VisibleString";
                  case 27:
                      return "GeneralString";
                  case 28:
                      return "UniversalString";
                  case 30:
                      return "BMPString";
                  default:
                      return "Universal_" + c.toString(16);
              }
          case 1:
              return "Application_" + c.toString(16);
          case 2:
              return "[" + c + "]";
          case 3:
              return "Private_" + c.toString(16);
      }
  }, pidCrypt.ASN1.prototype.content = function () {
      if (void 0 == this.tag) return null;
      var a = this.tag >> 6;
      if (0 != a) return null;
      var b = 31 & this.tag,
          c = this.posContent(),
          d = Math.abs(this.length);
      switch (b) {
          case 1:
              return 0 == this.stream.get(c) ? "false" : "true";
          case 2:
              return this.stream.parseInteger(c, c + d);
          case 6:
              return this.stream.parseOID(c, c + d);
          case 12:
              return this.stream.parseStringUTF(c, c + d);
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 26:
              return this.stream.parseStringISO(c, c + d);
          case 23:
          case 24:
              return this.stream.parseTime(c, c + d);
      }
      return null;
  }, pidCrypt.ASN1.prototype.toString = function () {
      return this.typeName() + "@" + this.stream.pos + "[header:" + this.header + ",length:" + this.length + ",sub:" + (null == this.sub ? "null" : this.sub.length) + "]";
  }, pidCrypt.ASN1.prototype.print = function (a) {
      if ((void 0 == a && (a = ""), document.writeln(a + this), null != this.sub)) {
          a += "  ";
          for (var b = 0, c = this.sub.length; c > b; ++b) this.sub[b].print(a);
      }
  }, pidCrypt.ASN1.prototype.toPrettyString = function (a) {
      void 0 == a && (a = "");
      var b = a + this.typeName() + " @" + this.stream.pos;
      if ((this.length >= 0 && (b += "+"), b += this.length, 32 & this.tag ? b += " (constructed)" : 3 != this.tag && 4 != this.tag || null == this.sub || (b += " (encapsulates)"), b += "\n", null != this.sub)) {
          a += "  ";
          for (var c = 0, d = this.sub.length; d > c; ++c) b += this.sub[c].toPrettyString(a);
      }
      return b;
  }, pidCrypt.ASN1.prototype.toDOM = function () {
      var a = document.createElement("div");
      a.className = "node", a.asn1 = this;
      var b = document.createElement("div");
      b.className = "head";
      var c = this.typeName();
      b.innerHTML = c, a.appendChild(b), this.head = b;
      var d = document.createElement("div");
      d.className = "value", c = "Offset: " + this.stream.pos + "<br/>", c += "Length: " + this.header + "+", c += this.length >= 0 ? this.length : -this.length + " (undefined)", 32 & this.tag ? c += "<br/>(constructed)" : 3 != this.tag && 4 != this.tag || null == this.sub || (c += "<br/>(encapsulates)");
      var e = this.content();
      if (null != e && (c += "<br/>Value:<br/><b>" + e + "</b>", "object" == typeof oids && 6 == this.tag)) {
          var f = oids[e];
          f && (f.d && (c += "<br/>" + f.d), f.c && (c += "<br/>" + f.c), f.w && (c += "<br/>(warning!)"));
      }
      d.innerHTML = c, a.appendChild(d);
      var g = document.createElement("div");
      if ((g.className = "sub", null != this.sub)) for (var h = 0, i = this.sub.length; i > h; ++h) g.appendChild(this.sub[h].toDOM());
      return a.appendChild(g), b.switchNode = a, b.onclick = function () {
          var a = this.switchNode;
          a.className = "node collapsed" == a.className ? "node" : "node collapsed";
      }, a;
  }, pidCrypt.ASN1.prototype.posStart = function () {
      return this.stream.pos;
  }, pidCrypt.ASN1.prototype.posContent = function () {
      return this.stream.pos + this.header;
  }, pidCrypt.ASN1.prototype.posEnd = function () {
      return this.stream.pos + this.header + Math.abs(this.length);
  }, pidCrypt.ASN1.prototype.toHexDOM_sub = function (a, b, c, d, e) {
      if (!(d >= e)) {
          var f = document.createElement("span");
          f.className = b, f.appendChild(document.createTextNode(c.hexDump(d, e))), a.appendChild(f);
      }
  }, pidCrypt.ASN1.prototype.toHexDOM = function () {
      var a = document.createElement("span");
      if ((a.className = "hex", this.head.hexNode = a, this.head.onmouseover = function () {
          this.hexNode.className = "hexCurrent";
      }, this.head.onmouseout = function () {
          this.hexNode.className = "hex";
      }, this.toHexDOM_sub(a, "tag", this.stream, this.posStart(), this.posStart() + 1), this.toHexDOM_sub(a, this.length >= 0 ? "dlen" : "ulen", this.stream, this.posStart() + 1, this.posContent()), null == this.sub)) a.appendChild(document.createTextNode(this.stream.hexDump(this.posContent(), this.posEnd())));else if (this.sub.length > 0) {
          var b = this.sub[0],
              c = this.sub[this.sub.length - 1];
          this.toHexDOM_sub(a, "intro", this.stream, this.posContent(), b.posStart());
          for (var d = 0, e = this.sub.length; e > d; ++d) a.appendChild(this.sub[d].toHexDOM());
          this.toHexDOM_sub(a, "outro", this.stream, c.posEnd(), this.posEnd());
      }
      return a;
  }, pidCrypt.ASN1.decodeLength = function (a) {
      var b = a.get(),
          c = 127 & b;
      if (c == b) return c;
      if (c > 3) throw "Length over 24 bits not supported at position " + (a.pos - 1);
      if (0 == c) return -1;
      b = 0;
      for (var d = 0; c > d; ++d) b = b << 8 | a.get();
      return b;
  }, pidCrypt.ASN1.hasContent = function (a, b, c) {
      if (32 & a) return !0;
      if (3 > a || a > 4) return !1;
      var d = new Stream(c);
      3 == a && d.get();
      var e = d.get();
      if (1 & e >> 6) return !1;
      try {
          var f = pidCrypt.ASN1.decodeLength(d);
          return d.pos - c.pos + f == b;
      } catch (g) {
          return !1;
      }
  }, pidCrypt.ASN1.decode = function (a) {
      a instanceof Stream || (a = new Stream(a, 0));
      var b = new Stream(a),
          c = a.get(),
          d = pidCrypt.ASN1.decodeLength(a),
          e = a.pos - b.pos,
          f = null;
      if (pidCrypt.ASN1.hasContent(c, d, a)) {
          var g = a.pos;
          if ((3 == c && a.get(), f = [], d >= 0)) {
              for (var h = g + d; a.pos < h;) f[f.length] = pidCrypt.ASN1.decode(a);
              if (a.pos != h) throw "Content size is not correct for container starting at offset " + g;
          } else try {
              for (;;) {
                  var i = pidCrypt.ASN1.decode(a);
                  if (0 == i.tag) break;
                  f[f.length] = i;
              }
              d = g - a.pos;
          } catch (j) {
              throw "Exception while decoding undefined length content: " + j;
          }
      } else a.pos += d;
      return new pidCrypt.ASN1(b, e, d, c, f);
  }, pidCrypt.ASN1.test = function () {
      for (var a = [{
          value: [39],
          expected: 39
      }, {
          value: [129, 201],
          expected: 201
      }, {
          value: [131, 254, 220, 186],
          expected: 16702650
      }], b = 0, c = a.length; c > b; ++b) {
          var e = new Stream(a[b].value, 0),
              f = pidCrypt.ASN1.decodeLength(e);
          f != a[b].expected && document.write("In test[" + b + "] expected " + a[b].expected + " got " + f + "\n");
      }
  });
  
  function BigInteger(a, b, c) {
      null != a && ("number" == typeof a ? this.fromNumber(a, b, c) : null == b && "string" != typeof a ? this.fromString(a, 256) : this.fromString(a, b));
  }
  function nbi() {
      return new BigInteger(null);
  }
  function am1(a, b, c, d, e, f) {
      for (; --f >= 0;) {
          var g = b * this[a++] + c[d] + e;
          e = Math.floor(g / 67108864), c[d++] = 67108863 & g;
      }
      return e;
  }
  function am2(a, b, c, d, e, f) {
      for (var g = 32767 & b, h = b >> 15; --f >= 0;) {
          var i = 32767 & this[a],
              j = this[a++] >> 15,
              k = h * i + j * g;
          i = g * i + ((32767 & k) << 15) + c[d] + (1073741823 & e), e = (i >>> 30) + (k >>> 15) + h * j + (e >>> 30), c[d++] = 1073741823 & i;
      }
      return e;
  }
  function am3(a, b, c, d, e, f) {
      for (var g = 16383 & b, h = b >> 14; --f >= 0;) {
          var i = 16383 & this[a],
              j = this[a++] >> 14,
              k = h * i + j * g;
          i = g * i + ((16383 & k) << 14) + c[d] + e, e = (i >> 28) + (k >> 14) + h * j, c[d++] = 268435455 & i;
      }
      return e;
  }
  function int2char(a) {
      return BI_RM.charAt(a);
  }
  function intAt(a, b) {
      var c = BI_RC[a.charCodeAt(b)];
      return null == c ? -1 : c;
  }
  function bnpCopyTo(a) {
      for (var b = this.t - 1; b >= 0; --b) a[b] = this[b];
      a.t = this.t, a.s = this.s;
  }
  function bnpFromInt(a) {
      this.t = 1, this.s = 0 > a ? -1 : 0, a > 0 ? this[0] = a : -1 > a ? this[0] = a + DV : this.t = 0;
  }
  function nbv(a) {
      var b = nbi();
      return b.fromInt(a), b;
  }
  function bnpFromString(a, b) {
      var c;
      if (16 == b) c = 4;else if (8 == b) c = 3;else if (256 == b) c = 8;else if (2 == b) c = 1;else if (32 == b) c = 5;else {
          if (4 != b) return this.fromRadix(a, b), void 0;
          c = 2;
      }
      this.t = 0, this.s = 0;
      for (var d = a.length, e = !1, f = 0; --d >= 0;) {
          var g = 8 == c ? 255 & a[d] : intAt(a, d);
          0 > g ? "-" == a.charAt(d) && (e = !0) : (e = !1, 0 == f ? this[this.t++] = g : f + c > this.DB ? (this[this.t - 1] |= (g & (1 << this.DB - f) - 1) << f, this[this.t++] = g >> this.DB - f) : this[this.t - 1] |= g << f, f += c, f >= this.DB && (f -= this.DB));
      }
      8 == c && 0 != (128 & a[0]) && (this.s = -1, f > 0 && (this[this.t - 1] |= (1 << this.DB - f) - 1 << f)), this.clamp(), e && BigInteger.ZERO.subTo(this, this);
  }
  function bnpClamp() {
      for (var a = this.s & this.DM; this.t > 0 && this[this.t - 1] == a;) --this.t;
  }
  function bnToString(a) {
      if (this.s < 0) return "-" + this.negate().toString(a);
      var b;
      if (16 == a) b = 4;else if (8 == a) b = 3;else if (2 == a) b = 1;else if (32 == a) b = 5;else {
          if (4 != a) return this.toRadix(a);
          b = 2;
      }
      var d,
          c = (1 << b) - 1,
          e = !1,
          f = "",
          g = this.t,
          h = this.DB - g * this.DB % b;
      if (g-- > 0) for (h < this.DB && (d = this[g] >> h) > 0 && (e = !0, f = int2char(d)); g >= 0;) b > h ? (d = (this[g] & (1 << h) - 1) << b - h, d |= this[--g] >> (h += this.DB - b)) : (d = this[g] >> (h -= b) & c, 0 >= h && (h += this.DB, --g)), d > 0 && (e = !0), e && (f += int2char(d));
      return e ? f : "0";
  }
  function bnNegate() {
      var a = nbi();
      return BigInteger.ZERO.subTo(this, a), a;
  }
  function bnAbs() {
      return this.s < 0 ? this.negate() : this;
  }
  function bnCompareTo(a) {
      var b = this.s - a.s;
      if (0 != b) return b;
      var c = this.t;
      if ((b = c - a.t, 0 != b)) return b;
      for (; --c >= 0;) if (0 != (b = this[c] - a[c])) return b;
      return 0;
  }
  function nbits(a) {
      var c,
          b = 1;
      return 0 != (c = a >>> 16) && (a = c, b += 16), 0 != (c = a >> 8) && (a = c, b += 8), 0 != (c = a >> 4) && (a = c, b += 4), 0 != (c = a >> 2) && (a = c, b += 2), 0 != (c = a >> 1) && (a = c, b += 1), b;
  }
  function bnBitLength() {
      return this.t <= 0 ? 0 : this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
  }
  function bnpDLShiftTo(a, b) {
      var c;
      for (c = this.t - 1; c >= 0; --c) b[c + a] = this[c];
      for (c = a - 1; c >= 0; --c) b[c] = 0;
      b.t = this.t + a, b.s = this.s;
  }
  function bnpDRShiftTo(a, b) {
      for (var c = a; c < this.t; ++c) b[c - a] = this[c];
      b.t = Math.max(this.t - a, 0), b.s = this.s;
  }
  function bnpLShiftTo(a, b) {
      var h,
          c = a % this.DB,
          d = this.DB - c,
          e = (1 << d) - 1,
          f = Math.floor(a / this.DB),
          g = this.s << c & this.DM;
      for (h = this.t - 1; h >= 0; --h) b[h + f + 1] = this[h] >> d | g, g = (this[h] & e) << c;
      for (h = f - 1; h >= 0; --h) b[h] = 0;
      b[f] = g, b.t = this.t + f + 1, b.s = this.s, b.clamp();
  }
  function bnpRShiftTo(a, b) {
      b.s = this.s;
      var c = Math.floor(a / this.DB);
      if (c >= this.t) return b.t = 0, void 0;
      var d = a % this.DB,
          e = this.DB - d,
          f = (1 << d) - 1;
      b[0] = this[c] >> d;
      for (var g = c + 1; g < this.t; ++g) b[g - c - 1] |= (this[g] & f) << e, b[g - c] = this[g] >> d;
      d > 0 && (b[this.t - c - 1] |= (this.s & f) << e), b.t = this.t - c, b.clamp();
  }
  function bnpSubTo(a, b) {
      for (var c = 0, d = 0, e = Math.min(a.t, this.t); e > c;) d += this[c] - a[c], b[c++] = d & this.DM, d >>= this.DB;
      if (a.t < this.t) {
          for (d -= a.s; c < this.t;) d += this[c], b[c++] = d & this.DM, d >>= this.DB;
          d += this.s;
      } else {
          for (d += this.s; c < a.t;) d -= a[c], b[c++] = d & this.DM, d >>= this.DB;
          d -= a.s;
      }
      b.s = 0 > d ? -1 : 0, -1 > d ? b[c++] = this.DV + d : d > 0 && (b[c++] = d), b.t = c, b.clamp();
  }
  function bnpMultiplyTo(a, b) {
      var c = this.abs(),
          d = a.abs(),
          e = c.t;
      for (b.t = e + d.t; --e >= 0;) b[e] = 0;
      for (e = 0; e < d.t; ++e) b[e + c.t] = c.am(0, d[e], b, e, 0, c.t);
      b.s = 0, b.clamp(), this.s != a.s && BigInteger.ZERO.subTo(b, b);
  }
  function bnpSquareTo(a) {
      for (var b = this.abs(), c = a.t = 2 * b.t; --c >= 0;) a[c] = 0;
      for (c = 0; c < b.t - 1; ++c) {
          var d = b.am(c, b[c], a, 2 * c, 0, 1);
          (a[c + b.t] += b.am(c + 1, 2 * b[c], a, 2 * c + 1, d, b.t - c - 1)) >= b.DV && (a[c + b.t] -= b.DV, a[c + b.t + 1] = 1);
      }
      a.t > 0 && (a[a.t - 1] += b.am(c, b[c], a, 2 * c, 0, 1)), a.s = 0, a.clamp();
  }
  function bnpDivRemTo(a, b, c) {
      var d = a.abs();
      if (!(d.t <= 0)) {
          var e = this.abs();
          if (e.t < d.t) return null != b && b.fromInt(0), null != c && this.copyTo(c), void 0;
          null == c && (c = nbi());
          var f = nbi(),
              g = this.s,
              h = a.s,
              i = this.DB - nbits(d[d.t - 1]);
          i > 0 ? (d.lShiftTo(i, f), e.lShiftTo(i, c)) : (d.copyTo(f), e.copyTo(c));
          var j = f.t,
              k = f[j - 1];
          if (0 != k) {
              var l = k * (1 << this.F1) + (j > 1 ? f[j - 2] >> this.F2 : 0),
                  m = this.FV / l,
                  n = (1 << this.F1) / l,
                  o = 1 << this.F2,
                  p = c.t,
                  q = p - j,
                  r = null == b ? nbi() : b;
              for (f.dlShiftTo(q, r), c.compareTo(r) >= 0 && (c[c.t++] = 1, c.subTo(r, c)), BigInteger.ONE.dlShiftTo(j, r), r.subTo(f, f); f.t < j;) f[f.t++] = 0;
              for (; --q >= 0;) {
                  var s = c[--p] == k ? this.DM : Math.floor(c[p] * m + (c[p - 1] + o) * n);
                  if ((c[p] += f.am(0, s, c, q, 0, j)) < s) for (f.dlShiftTo(q, r), c.subTo(r, c); c[p] < --s;) c.subTo(r, c);
              }
              null != b && (c.drShiftTo(j, b), g != h && BigInteger.ZERO.subTo(b, b)), c.t = j, c.clamp(), i > 0 && c.rShiftTo(i, c), 0 > g && BigInteger.ZERO.subTo(c, c);
          }
      }
  }
  function bnMod(a) {
      var b = nbi();
      return this.abs().divRemTo(a, null, b), this.s < 0 && b.compareTo(BigInteger.ZERO) > 0 && a.subTo(b, b), b;
  }
  function Classic(a) {
      this.m = a;
  }
  function cConvert(a) {
      return a.s < 0 || a.compareTo(this.m) >= 0 ? a.mod(this.m) : a;
  }
  function cRevert(a) {
      return a;
  }
  function cReduce(a) {
      a.divRemTo(this.m, null, a);
  }
  function cMulTo(a, b, c) {
      a.multiplyTo(b, c), this.reduce(c);
  }
  function cSqrTo(a, b) {
      a.squareTo(b), this.reduce(b);
  }
  function bnpInvDigit() {
      if (this.t < 1) return 0;
      var a = this[0];
      if (0 == (1 & a)) return 0;
      var b = 3 & a;
      return b = 15 & b * (2 - (15 & a) * b), b = 255 & b * (2 - (255 & a) * b), b = 65535 & b * (2 - (65535 & (65535 & a) * b)), b = b * (2 - a * b % this.DV) % this.DV, b > 0 ? this.DV - b : -b;
  }
  function Montgomery(a) {
      this.m = a, this.mp = a.invDigit(), this.mpl = 32767 & this.mp, this.mph = this.mp >> 15, this.um = (1 << a.DB - 15) - 1, this.mt2 = 2 * a.t;
  }
  function montConvert(a) {
      var b = nbi();
      return a.abs().dlShiftTo(this.m.t, b), b.divRemTo(this.m, null, b), a.s < 0 && b.compareTo(BigInteger.ZERO) > 0 && this.m.subTo(b, b), b;
  }
  function montRevert(a) {
      var b = nbi();
      return a.copyTo(b), this.reduce(b), b;
  }
  function montReduce(a) {
      for (; a.t <= this.mt2;) a[a.t++] = 0;
      for (var b = 0; b < this.m.t; ++b) {
          var c = 32767 & a[b],
              d = c * this.mpl + ((c * this.mph + (a[b] >> 15) * this.mpl & this.um) << 15) & a.DM;
          for (c = b + this.m.t, a[c] += this.m.am(0, d, a, b, 0, this.m.t); a[c] >= a.DV;) a[c] -= a.DV, a[++c]++;
      }
      a.clamp(), a.drShiftTo(this.m.t, a), a.compareTo(this.m) >= 0 && a.subTo(this.m, a);
  }
  function montSqrTo(a, b) {
      a.squareTo(b), this.reduce(b);
  }
  function montMulTo(a, b, c) {
      a.multiplyTo(b, c), this.reduce(c);
  }
  function bnpIsEven() {
      return 0 == (this.t > 0 ? 1 & this[0] : this.s);
  }
  function bnpExp(a, b) {
      if (a > 4294967295 || 1 > a) return BigInteger.ONE;
      var c = nbi(),
          d = nbi(),
          e = b.convert(this),
          f = nbits(a) - 1;
      for (e.copyTo(c); --f >= 0;) if ((b.sqrTo(c, d), (a & 1 << f) > 0)) b.mulTo(d, e, c);else {
          var g = c;
          c = d, d = g;
      }
      return b.revert(c);
  }
  function bnModPowInt(a, b) {
      var c;
      return c = 256 > a || b.isEven() ? new Classic(b) : new Montgomery(b), this.exp(a, c);
  }
  function bnClone() {
      var a = nbi();
      return this.copyTo(a), a;
  }
  function bnIntValue() {
      if (this.s < 0) {
          if (1 == this.t) return this[0] - this.DV;
          if (0 == this.t) return -1;
      } else {
          if (1 == this.t) return this[0];
          if (0 == this.t) return 0;
      }
      return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
  }
  function bnByteValue() {
      return 0 == this.t ? this.s : this[0] << 24 >> 24;
  }
  function bnShortValue() {
      return 0 == this.t ? this.s : this[0] << 16 >> 16;
  }
  function bnpChunkSize(a) {
      return Math.floor(Math.LN2 * this.DB / Math.log(a));
  }
  function bnSigNum() {
      return this.s < 0 ? -1 : this.t <= 0 || 1 == this.t && this[0] <= 0 ? 0 : 1;
  }
  function bnpToRadix(a) {
      if ((null == a && (a = 10), 0 == this.signum() || 2 > a || a > 36)) return "0";
      var b = this.chunkSize(a),
          c = Math.pow(a, b),
          d = nbv(c),
          e = nbi(),
          f = nbi(),
          g = "";
      for (this.divRemTo(d, e, f); e.signum() > 0;) g = (c + f.intValue()).toString(a).substr(1) + g, e.divRemTo(d, e, f);
      return f.intValue().toString(a) + g;
  }
  function bnpFromRadix(a, b) {
      this.fromInt(0), null == b && (b = 10);
      for (var c = this.chunkSize(b), d = Math.pow(b, c), e = !1, f = 0, g = 0, h = 0; h < a.length; ++h) {
          var i = intAt(a, h);
          0 > i ? "-" == a.charAt(h) && 0 == this.signum() && (e = !0) : (g = b * g + i, ++f >= c && (this.dMultiply(d), this.dAddOffset(g, 0), f = 0, g = 0));
      }
      f > 0 && (this.dMultiply(Math.pow(b, f)), this.dAddOffset(g, 0)), e && BigInteger.ZERO.subTo(this, this);
  }
  function bnpFromNumber(a, b, c) {
      if ("number" == typeof b) if (2 > a) this.fromInt(1);else for (this.fromNumber(a, c), this.testBit(a - 1) || this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(b);) this.dAddOffset(2, 0), this.bitLength() > a && this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);else {
          var d = new Array(),
              e = 7 & a;
          d.length = (a >> 3) + 1, b.nextBytes(d), e > 0 ? d[0] &= (1 << e) - 1 : d[0] = 0, this.fromString(d, 256);
      }
  }
  function bnToByteArray() {
      var a = this.t,
          b = new Array();
      b[0] = this.s;
      var d,
          c = this.DB - a * this.DB % 8,
          e = 0;
      if (a-- > 0) for (c < this.DB && (d = this[a] >> c) != (this.s & this.DM) >> c && (b[e++] = d | this.s << this.DB - c); a >= 0;) 8 > c ? (d = (this[a] & (1 << c) - 1) << 8 - c, d |= this[--a] >> (c += this.DB - 8)) : (d = 255 & this[a] >> (c -= 8), 0 >= c && (c += this.DB, --a)), 0 != (128 & d) && (d |= -256), 0 == e && (128 & this.s) != (128 & d) && ++e, (e > 0 || d != this.s) && (b[e++] = d);
      return b;
  }
  function bnEquals(a) {
      return 0 == this.compareTo(a);
  }
  function bnMin(a) {
      return this.compareTo(a) < 0 ? this : a;
  }
  function bnMax(a) {
      return this.compareTo(a) > 0 ? this : a;
  }
  function bnpBitwiseTo(a, b, c) {
      var d,
          e,
          f = Math.min(a.t, this.t);
      for (d = 0; f > d; ++d) c[d] = b(this[d], a[d]);
      if (a.t < this.t) {
          for (e = a.s & this.DM, d = f; d < this.t; ++d) c[d] = b(this[d], e);
          c.t = this.t;
      } else {
          for (e = this.s & this.DM, d = f; d < a.t; ++d) c[d] = b(e, a[d]);
          c.t = a.t;
      }
      c.s = b(this.s, a.s), c.clamp();
  }
  function op_and(a, b) {
      return a & b;
  }
  function bnAnd(a) {
      var b = nbi();
      return this.bitwiseTo(a, op_and, b), b;
  }
  function op_or(a, b) {
      return a | b;
  }
  function bnOr(a) {
      var b = nbi();
      return this.bitwiseTo(a, op_or, b), b;
  }
  function op_xor(a, b) {
      return a ^ b;
  }
  function bnXor(a) {
      var b = nbi();
      return this.bitwiseTo(a, op_xor, b), b;
  }
  function op_andnot(a, b) {
      return a & ~b;
  }
  function bnAndNot(a) {
      var b = nbi();
      return this.bitwiseTo(a, op_andnot, b), b;
  }
  function bnNot() {
      for (var a = nbi(), b = 0; b < this.t; ++b) a[b] = this.DM & ~this[b];
      return a.t = this.t, a.s = ~this.s, a;
  }
  function bnShiftLeft(a) {
      var b = nbi();
      return 0 > a ? this.rShiftTo(-a, b) : this.lShiftTo(a, b), b;
  }
  function bnShiftRight(a) {
      var b = nbi();
      return 0 > a ? this.lShiftTo(-a, b) : this.rShiftTo(a, b), b;
  }
  function lbit(a) {
      if (0 == a) return -1;
      var b = 0;
      return 0 == (65535 & a) && (a >>= 16, b += 16), 0 == (255 & a) && (a >>= 8, b += 8), 0 == (15 & a) && (a >>= 4, b += 4), 0 == (3 & a) && (a >>= 2, b += 2), 0 == (1 & a) && ++b, b;
  }
  function bnGetLowestSetBit() {
      for (var a = 0; a < this.t; ++a) if (0 != this[a]) return a * this.DB + lbit(this[a]);
      return this.s < 0 ? this.t * this.DB : -1;
  }
  function cbit(a) {
      for (var b = 0; 0 != a;) a &= a - 1, ++b;
      return b;
  }
  function bnBitCount() {
      for (var a = 0, b = this.s & this.DM, c = 0; c < this.t; ++c) a += cbit(this[c] ^ b);
      return a;
  }
  function bnTestBit(a) {
      var b = Math.floor(a / this.DB);
      return b >= this.t ? 0 != this.s : 0 != (this[b] & 1 << a % this.DB);
  }
  function bnpChangeBit(a, b) {
      var c = BigInteger.ONE.shiftLeft(a);
      return this.bitwiseTo(c, b, c), c;
  }
  function bnSetBit(a) {
      return this.changeBit(a, op_or);
  }
  function bnClearBit(a) {
      return this.changeBit(a, op_andnot);
  }
  function bnFlipBit(a) {
      return this.changeBit(a, op_xor);
  }
  function bnpAddTo(a, b) {
      for (var c = 0, d = 0, e = Math.min(a.t, this.t); e > c;) d += this[c] + a[c], b[c++] = d & this.DM, d >>= this.DB;
      if (a.t < this.t) {
          for (d += a.s; c < this.t;) d += this[c], b[c++] = d & this.DM, d >>= this.DB;
          d += this.s;
      } else {
          for (d += this.s; c < a.t;) d += a[c], b[c++] = d & this.DM, d >>= this.DB;
          d += a.s;
      }
      b.s = 0 > d ? -1 : 0, d > 0 ? b[c++] = d : -1 > d && (b[c++] = this.DV + d), b.t = c, b.clamp();
  }
  function bnAdd(a) {
      var b = nbi();
      return this.addTo(a, b), b;
  }
  function bnSubtract(a) {
      var b = nbi();
      return this.subTo(a, b), b;
  }
  function bnMultiply(a) {
      var b = nbi();
      return this.multiplyTo(a, b), b;
  }
  function bnDivide(a) {
      var b = nbi();
      return this.divRemTo(a, b, null), b;
  }
  function bnRemainder(a) {
      var b = nbi();
      return this.divRemTo(a, null, b), b;
  }
  function bnDivideAndRemainder(a) {
      var b = nbi(),
          c = nbi();
      return this.divRemTo(a, b, c), new Array(b, c);
  }
  function bnpDMultiply(a) {
      this[this.t] = this.am(0, a - 1, this, 0, 0, this.t), ++this.t, this.clamp();
  }
  function bnpDAddOffset(a, b) {
      for (; this.t <= b;) this[this.t++] = 0;
      for (this[b] += a; this[b] >= this.DV;) this[b] -= this.DV, ++b >= this.t && (this[this.t++] = 0), ++this[b];
  }
  function NullExp() {}
  function nNop(a) {
      return a;
  }
  function nMulTo(a, b, c) {
      a.multiplyTo(b, c);
  }
  function nSqrTo(a, b) {
      a.squareTo(b);
  }
  function bnPow(a) {
      return this.exp(a, new NullExp());
  }
  function bnpMultiplyLowerTo(a, b, c) {
      var d = Math.min(this.t + a.t, b);
      for (c.s = 0, c.t = d; d > 0;) c[--d] = 0;
      var e;
      for (e = c.t - this.t; e > d; ++d) c[d + this.t] = this.am(0, a[d], c, d, 0, this.t);
      for (e = Math.min(a.t, b); e > d; ++d) this.am(0, a[d], c, d, 0, b - d);
      c.clamp();
  }
  function bnpMultiplyUpperTo(a, b, c) {
      --b;
      var d = c.t = this.t + a.t - b;
      for (c.s = 0; --d >= 0;) c[d] = 0;
      for (d = Math.max(b - this.t, 0); d < a.t; ++d) c[this.t + d - b] = this.am(b - d, a[d], c, 0, 0, this.t + d - b);
      c.clamp(), c.drShiftTo(1, c);
  }
  function Barrett(a) {
      this.r2 = nbi(), this.q3 = nbi(), BigInteger.ONE.dlShiftTo(2 * a.t, this.r2), this.mu = this.r2.divide(a), this.m = a;
  }
  function barrettConvert(a) {
      if (a.s < 0 || a.t > 2 * this.m.t) return a.mod(this.m);
      if (a.compareTo(this.m) < 0) return a;
      var b = nbi();
      return a.copyTo(b), this.reduce(b), b;
  }
  function barrettRevert(a) {
      return a;
  }
  function barrettReduce(a) {
      for (a.drShiftTo(this.m.t - 1, this.r2), a.t > this.m.t + 1 && (a.t = this.m.t + 1, a.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); a.compareTo(this.r2) < 0;) a.dAddOffset(1, this.m.t + 1);
      for (a.subTo(this.r2, a); a.compareTo(this.m) >= 0;) a.subTo(this.m, a);
  }
  function barrettSqrTo(a, b) {
      a.squareTo(b), this.reduce(b);
  }
  function barrettMulTo(a, b, c) {
      a.multiplyTo(b, c), this.reduce(c);
  }
  function bnModPow(a, b) {
      var d,
          f,
          c = a.bitLength(),
          e = nbv(1);
      if (0 >= c) return e;
      d = 18 > c ? 1 : 48 > c ? 3 : 144 > c ? 4 : 768 > c ? 5 : 6, f = 8 > c ? new Classic(b) : b.isEven() ? new Barrett(b) : new Montgomery(b);
      var g = new Array(),
          h = 3,
          i = d - 1,
          j = (1 << d) - 1;
      if ((g[1] = f.convert(this), d > 1)) {
          var k = nbi();
          for (f.sqrTo(g[1], k); j >= h;) g[h] = nbi(), f.mulTo(k, g[h - 2], g[h]), h += 2;
      }
      var m,
          p,
          l = a.t - 1,
          n = !0,
          o = nbi();
      for (c = nbits(a[l]) - 1; l >= 0;) {
          for (c >= i ? m = a[l] >> c - i & j : (m = (a[l] & (1 << c + 1) - 1) << i - c, l > 0 && (m |= a[l - 1] >> this.DB + c - i)), h = d; 0 == (1 & m);) m >>= 1, --h;
          if (((c -= h) < 0 && (c += this.DB, --l), n)) g[m].copyTo(e), n = !1;else {
              for (; h > 1;) f.sqrTo(e, o), f.sqrTo(o, e), h -= 2;
              h > 0 ? f.sqrTo(e, o) : (p = e, e = o, o = p), f.mulTo(o, g[m], e);
          }
          for (; l >= 0 && 0 == (a[l] & 1 << c);) f.sqrTo(e, o), p = e, e = o, o = p, --c < 0 && (c = this.DB - 1, --l);
      }
      return f.revert(e);
  }
  function bnGCD(a) {
      var b = this.s < 0 ? this.negate() : this.clone(),
          c = a.s < 0 ? a.negate() : a.clone();
      if (b.compareTo(c) < 0) {
          var d = b;
          b = c, c = d;
      }
      var e = b.getLowestSetBit(),
          f = c.getLowestSetBit();
      if (0 > f) return b;
      for (f > e && (f = e), f > 0 && (b.rShiftTo(f, b), c.rShiftTo(f, c)); b.signum() > 0;) (e = b.getLowestSetBit()) > 0 && b.rShiftTo(e, b), (e = c.getLowestSetBit()) > 0 && c.rShiftTo(e, c), b.compareTo(c) >= 0 ? (b.subTo(c, b), b.rShiftTo(1, b)) : (c.subTo(b, c), c.rShiftTo(1, c));
      return f > 0 && c.lShiftTo(f, c), c;
  }
  function bnpModInt(a) {
      if (0 >= a) return 0;
      var b = this.DV % a,
          c = this.s < 0 ? a - 1 : 0;
      if (this.t > 0) if (0 == b) c = this[0] % a;else for (var d = this.t - 1; d >= 0; --d) c = (b * c + this[d]) % a;
      return c;
  }
  function bnModInverse(a) {
      var b = a.isEven();
      if (this.isEven() && b || 0 == a.signum()) return BigInteger.ZERO;
      for (var c = a.clone(), d = this.clone(), e = nbv(1), f = nbv(0), g = nbv(0), h = nbv(1); 0 != c.signum();) {
          for (; c.isEven();) c.rShiftTo(1, c), b ? (e.isEven() && f.isEven() || (e.addTo(this, e), f.subTo(a, f)), e.rShiftTo(1, e)) : f.isEven() || f.subTo(a, f), f.rShiftTo(1, f);
          for (; d.isEven();) d.rShiftTo(1, d), b ? (g.isEven() && h.isEven() || (g.addTo(this, g), h.subTo(a, h)), g.rShiftTo(1, g)) : h.isEven() || h.subTo(a, h), h.rShiftTo(1, h);
          c.compareTo(d) >= 0 ? (c.subTo(d, c), b && e.subTo(g, e), f.subTo(h, f)) : (d.subTo(c, d), b && g.subTo(e, g), h.subTo(f, h));
      }
      return 0 != d.compareTo(BigInteger.ONE) ? BigInteger.ZERO : h.compareTo(a) >= 0 ? h.subtract(a) : h.signum() < 0 ? (h.addTo(a, h), h.signum() < 0 ? h.add(a) : h) : h;
  }
  function bnIsProbablePrime(a) {
      var b,
          c = this.abs();
      if (1 == c.t && c[0] <= lowprimes[lowprimes.length - 1]) {
          for (b = 0; b < lowprimes.length; ++b) if (c[0] == lowprimes[b]) return !0;
          return !1;
      }
      if (c.isEven()) return !1;
      for (b = 1; b < lowprimes.length;) {
          for (var d = lowprimes[b], e = b + 1; e < lowprimes.length && lplim > d;) d *= lowprimes[e++];
          for (d = c.modInt(d); e > b;) if (0 == d % lowprimes[b++]) return !1;
      }
      return c.millerRabin(a);
  }
  function bnpMillerRabin(a) {
      var b = this.subtract(BigInteger.ONE),
          c = b.getLowestSetBit();
      if (0 >= c) return !1;
      var d = b.shiftRight(c);
      a = a + 1 >> 1, a > lowprimes.length && (a = lowprimes.length);
      for (var e = nbi(), f = 0; a > f; ++f) {
          e.fromInt(lowprimes[f]);
          var g = e.modPow(d, this);
          if (0 != g.compareTo(BigInteger.ONE) && 0 != g.compareTo(b)) {
              for (var h = 1; h++ < c && 0 != g.compareTo(b);) if ((g = g.modPowInt(2, this), 0 == g.compareTo(BigInteger.ONE))) return !1;
              if (0 != g.compareTo(b)) return !1;
          }
      }
      return !0;
  }
  var dbits,
      canary = 0xdeadbeefcafe,
      j_lm = 15715070 == (16777215 & canary);
  j_lm && "Microsoft Internet Explorer" == navigator.appName ? (BigInteger.prototype.am = am2, dbits = 30) : j_lm && "Netscape" != navigator.appName ? (BigInteger.prototype.am = am1, dbits = 26) : (BigInteger.prototype.am = am3, dbits = 28), BigInteger.prototype.DB = dbits, BigInteger.prototype.DM = (1 << dbits) - 1, BigInteger.prototype.DV = 1 << dbits;
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2, BI_FP), BigInteger.prototype.F1 = BI_FP - dbits, BigInteger.prototype.F2 = 2 * dbits - BI_FP;
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz",
      BI_RC = new Array(),
      rr,
      vv;
  for (rr = "0".charCodeAt(0), vv = 0; 9 >= vv; ++vv) BI_RC[rr++] = vv;
  for (rr = "a".charCodeAt(0), vv = 10; 36 > vv; ++vv) BI_RC[rr++] = vv;
  for (rr = "A".charCodeAt(0), vv = 10; 36 > vv; ++vv) BI_RC[rr++] = vv;
  Classic.prototype.convert = cConvert, Classic.prototype.revert = cRevert, Classic.prototype.reduce = cReduce, Classic.prototype.mulTo = cMulTo, Classic.prototype.sqrTo = cSqrTo, Montgomery.prototype.convert = montConvert, Montgomery.prototype.revert = montRevert, Montgomery.prototype.reduce = montReduce, Montgomery.prototype.mulTo = montMulTo, Montgomery.prototype.sqrTo = montSqrTo, BigInteger.prototype.copyTo = bnpCopyTo, BigInteger.prototype.fromInt = bnpFromInt, BigInteger.prototype.fromString = bnpFromString, BigInteger.prototype.clamp = bnpClamp, BigInteger.prototype.dlShiftTo = bnpDLShiftTo, BigInteger.prototype.drShiftTo = bnpDRShiftTo, BigInteger.prototype.lShiftTo = bnpLShiftTo, BigInteger.prototype.rShiftTo = bnpRShiftTo, BigInteger.prototype.subTo = bnpSubTo, BigInteger.prototype.multiplyTo = bnpMultiplyTo, BigInteger.prototype.squareTo = bnpSquareTo, BigInteger.prototype.divRemTo = bnpDivRemTo, BigInteger.prototype.invDigit = bnpInvDigit, BigInteger.prototype.isEven = bnpIsEven, BigInteger.prototype.exp = bnpExp, BigInteger.prototype.toString = bnToString, BigInteger.prototype.negate = bnNegate, BigInteger.prototype.abs = bnAbs, BigInteger.prototype.compareTo = bnCompareTo, BigInteger.prototype.bitLength = bnBitLength, BigInteger.prototype.mod = bnMod, BigInteger.prototype.modPowInt = bnModPowInt, BigInteger.ZERO = nbv(0), BigInteger.ONE = nbv(1), NullExp.prototype.convert = nNop, NullExp.prototype.revert = nNop, NullExp.prototype.mulTo = nMulTo, NullExp.prototype.sqrTo = nSqrTo, Barrett.prototype.convert = barrettConvert, Barrett.prototype.revert = barrettRevert, Barrett.prototype.reduce = barrettReduce, Barrett.prototype.mulTo = barrettMulTo, Barrett.prototype.sqrTo = barrettSqrTo;
  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509],
      lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
  BigInteger.prototype.chunkSize = bnpChunkSize, BigInteger.prototype.toRadix = bnpToRadix, BigInteger.prototype.fromRadix = bnpFromRadix, BigInteger.prototype.fromNumber = bnpFromNumber, BigInteger.prototype.bitwiseTo = bnpBitwiseTo, BigInteger.prototype.changeBit = bnpChangeBit, BigInteger.prototype.addTo = bnpAddTo, BigInteger.prototype.dMultiply = bnpDMultiply, BigInteger.prototype.dAddOffset = bnpDAddOffset, BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo, BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo, BigInteger.prototype.modInt = bnpModInt, BigInteger.prototype.millerRabin = bnpMillerRabin, BigInteger.prototype.clone = bnClone, BigInteger.prototype.intValue = bnIntValue, BigInteger.prototype.byteValue = bnByteValue, BigInteger.prototype.shortValue = bnShortValue, BigInteger.prototype.signum = bnSigNum, BigInteger.prototype.toByteArray = bnToByteArray, BigInteger.prototype.equals = bnEquals, BigInteger.prototype.min = bnMin, BigInteger.prototype.max = bnMax, BigInteger.prototype.and = bnAnd, BigInteger.prototype.or = bnOr, BigInteger.prototype.xor = bnXor, BigInteger.prototype.andNot = bnAndNot, BigInteger.prototype.not = bnNot, BigInteger.prototype.shiftLeft = bnShiftLeft, BigInteger.prototype.shiftRight = bnShiftRight, BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit, BigInteger.prototype.bitCount = bnBitCount, BigInteger.prototype.testBit = bnTestBit, BigInteger.prototype.setBit = bnSetBit, BigInteger.prototype.clearBit = bnClearBit, BigInteger.prototype.flipBit = bnFlipBit, BigInteger.prototype.add = bnAdd, BigInteger.prototype.subtract = bnSubtract, BigInteger.prototype.multiply = bnMultiply, BigInteger.prototype.divide = bnDivide, BigInteger.prototype.remainder = bnRemainder, BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder, BigInteger.prototype.modPow = bnModPow, BigInteger.prototype.modInverse = bnModInverse, BigInteger.prototype.pow = bnPow, BigInteger.prototype.gcd = bnGCD, BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
  
  function SecureRandom() {
      if ((this.rng_state, this.rng_pool, this.rng_pptr, this.rng_seed_int = function (a) {
          this.rng_pool[this.rng_pptr++] ^= 255 & a, this.rng_pool[this.rng_pptr++] ^= 255 & a >> 8, this.rng_pool[this.rng_pptr++] ^= 255 & a >> 16, this.rng_pool[this.rng_pptr++] ^= 255 & a >> 24, this.rng_pptr >= rng_psize && (this.rng_pptr -= rng_psize);
      }, this.rng_seed_time = function () {
          this.rng_seed_int(new Date().getTime());
      }, null == this.rng_pool)) {
          this.rng_pool = new Array(), this.rng_pptr = 0;
          var a;
          if ("Netscape" == navigator.appName && navigator.appVersion < "5" && window.crypto) {
              var b = window.crypto.random(32);
              for (a = 0; a < b.length; ++a) this.rng_pool[this.rng_pptr++] = 255 & b.charCodeAt(a);
          }
          for (; this.rng_pptr < rng_psize;) a = Math.floor(65536 * Math.random()), this.rng_pool[this.rng_pptr++] = a >>> 8, this.rng_pool[this.rng_pptr++] = 255 & a;
          this.rng_pptr = 0, this.rng_seed_time();
      }
      this.rng_get_byte = function () {
          if (null == this.rng_state) {
              for (this.rng_seed_time(), this.rng_state = prng_newstate(), this.rng_state.init(this.rng_pool), this.rng_pptr = 0; this.rng_pptr < this.rng_pool.length; ++this.rng_pptr) this.rng_pool[this.rng_pptr] = 0;
              this.rng_pptr = 0;
          }
          return this.rng_state.next();
      }, this.nextBytes = function (a) {
          var b;
          for (b = 0; b < a.length; ++b) a[b] = this.rng_get_byte();
      };
  }
  function Arcfour() {
      this.i = 0, this.j = 0, this.S = new Array();
  }
  function ARC4init(a) {
      var b, c, d;
      for (b = 0; 256 > b; ++b) this.S[b] = b;
      for (c = 0, b = 0; 256 > b; ++b) c = 255 & c + this.S[b] + a[b % a.length], d = this.S[b], this.S[b] = this.S[c], this.S[c] = d;
      this.i = 0, this.j = 0;
  }
  function ARC4next() {
      var a;
      return this.i = 255 & this.i + 1, this.j = 255 & this.j + this.S[this.i], a = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = a, this.S[255 & a + this.S[this.i]];
  }
  function prng_newstate() {
      return new Arcfour();
  }
  Arcfour.prototype.init = ARC4init, Arcfour.prototype.next = ARC4next;
  var rng_psize = 256;
  
  function parseBigInt(a, b) {
      return new BigInteger(a, b);
  }
  function linebrk(a, b) {
      for (var c = "", d = 0; d + b < a.length;) c += a.substring(d, d + b) + "\n", d += b;
      return c + a.substring(d, a.length);
  }
  function byte2Hex(a) {
      return 16 > a ? "0" + a.toString(16) : a.toString(16);
  }
  function pkcs1unpad2(a, b) {
      for (var c = a.toByteArray(), d = 0; d < c.length && 0 == c[d];) ++d;
      if (c.length - d != b - 1 || 2 != c[d]) return null;
      for (++d; 0 != c[d];) if (++d >= c.length) return null;
      for (var e = ""; ++d < c.length;) e += String.fromCharCode(c[d]);
      return e;
  }
  function pkcs1pad2(a, b) {
      if (b < a.length + 11) return alert("Message too long for RSA"), null;
      for (var c = new Array(), d = a.length - 1; d >= 0 && b > 0;) c[--b] = a.charCodeAt(d--);
      c[--b] = 0;
      for (var e = new SecureRandom(), f = new Array(); b > 2;) {
          for (f[0] = 0; 0 == f[0];) e.nextBytes(f);
          c[--b] = f[0];
      }
      return c[--b] = 2, c[--b] = 0, new BigInteger(c);
  }
  "undefined" != typeof pidCrypt && "undefined" != typeof BigInteger && "undefined" != typeof SecureRandom && "undefined" != typeof Arcfour && (pidCrypt.RSA = function () {
      this.n = null, this.e = 0, this.d = null, this.p = null, this.q = null, this.dmp1 = null, this.dmq1 = null, this.coeff = null;
  }, pidCrypt.RSA.prototype.doPrivate = function (a) {
      if (null == this.p || null == this.q) return a.modPow(this.d, this.n);
      for (var b = a.mod(this.p).modPow(this.dmp1, this.p), c = a.mod(this.q).modPow(this.dmq1, this.q); b.compareTo(c) < 0;) b = b.add(this.p);
      return b.subtract(c).multiply(this.coeff).mod(this.p).multiply(this.q).add(c);
  }, pidCrypt.RSA.prototype.setPublic = function (a, b, c) {
      "undefined" == typeof c && (c = 16), null != a && null != b && a.length > 0 && b.length > 0 ? (this.n = parseBigInt(a, c), this.e = parseInt(b, c)) : alert("Invalid RSA public key");
  }, pidCrypt.RSA.prototype.doPublic = function (a) {
      return a.modPowInt(this.e, this.n);
  }, pidCrypt.RSA.prototype.encryptRaw = function (a) {
      var b = pkcs1pad2(a, this.n.bitLength() + 7 >> 3);
      if (null == b) return null;
      var c = this.doPublic(b);
      if (null == c) return null;
      var d = c.toString(16);
      return 0 == (1 & d.length) ? d : "0" + d;
  }, pidCrypt.RSA.prototype.encrypt = function (a) {
      return a = pidCryptUtil.encodeBase64(a), this.encryptRaw(a);
  }, pidCrypt.RSA.prototype.decryptRaw = function (a) {
      var b = parseBigInt(a, 16),
          c = this.doPrivate(b);
      return null == c ? null : pkcs1unpad2(c, this.n.bitLength() + 7 >> 3);
  }, pidCrypt.RSA.prototype.decrypt = function (a) {
      var b = this.decryptRaw(a);
      return b = b ? pidCryptUtil.decodeBase64(b) : "";
  }, pidCrypt.RSA.prototype.setPrivate = function (a, b, c, d) {
      "undefined" == typeof d && (d = 16), null != a && null != b && a.length > 0 && b.length > 0 ? (this.n = parseBigInt(a, d), this.e = parseInt(b, d), this.d = parseBigInt(c, d)) : alert("Invalid RSA private key");
  }, pidCrypt.RSA.prototype.setPrivateEx = function (a, b, c, d, e, f, g, h, i) {
      "undefined" == typeof i && (i = 16), null != a && null != b && a.length > 0 && b.length > 0 ? (this.n = parseBigInt(a, i), this.e = parseInt(b, i), this.d = parseBigInt(c, i), this.p = parseBigInt(d, i), this.q = parseBigInt(e, i), this.dmp1 = parseBigInt(f, i), this.dmq1 = parseBigInt(g, i), this.coeff = parseBigInt(h, i)) : alert("Invalid RSA private key");
  }, pidCrypt.RSA.prototype.generate = function (a, b) {
      var c = new SecureRandom(),
          d = a >> 1;
      this.e = parseInt(b, 16);
      for (var e = new BigInteger(b, 16);;) {
          for (; this.p = new BigInteger(a - d, 1, c), 0 != this.p.subtract(BigInteger.ONE).gcd(e).compareTo(BigInteger.ONE) || !this.p.isProbablePrime(10););
          for (; this.q = new BigInteger(d, 1, c), 0 != this.q.subtract(BigInteger.ONE).gcd(e).compareTo(BigInteger.ONE) || !this.q.isProbablePrime(10););
          if (this.p.compareTo(this.q) <= 0) {
              var f = this.p;
              this.p = this.q, this.q = f;
          }
          var g = this.p.subtract(BigInteger.ONE),
              h = this.q.subtract(BigInteger.ONE),
              i = g.multiply(h);
          if (0 == i.gcd(e).compareTo(BigInteger.ONE)) {
              this.n = this.p.multiply(this.q), this.d = e.modInverse(i), this.dmp1 = this.d.mod(g), this.dmq1 = this.d.mod(h), this.coeff = this.q.modInverse(this.p);
              break;
          }
      }
  }, pidCrypt.RSA.prototype.getASNData = function (a) {
      var c = [],
          d = 0;
      if ((a.value && "INTEGER" == a.type && (c[d++] = a.value), a.sub)) for (var e = 0; e < a.sub.length; e++) c = c.concat(this.getASNData(a.sub[e]));
      return c;
  }, pidCrypt.RSA.prototype.setKeyFromASN = function (a, b) {
      var c = ["N", "E", "D", "P", "Q", "DP", "DQ", "C"],
          d = {},
          e = this.getASNData(b);
      switch (a) {
          case "Public":
          case "public":
              for (var f = 0; f < e.length; f++) d[c[f]] = e[f].toLowerCase();
              this.setPublic(d.N, d.E, 16);
              break;
          case "Private":
          case "private":
              for (var f = 1; f < e.length; f++) d[c[f - 1]] = e[f].toLowerCase();
              this.setPrivateEx(d.N, d.E, d.D, d.P, d.Q, d.DP, d.DQ, d.C, 16);
      }
  }, pidCrypt.RSA.prototype.setPublicKeyFromASN = function (a) {
      this.setKeyFromASN("public", a);
  }, pidCrypt.RSA.prototype.setPrivateKeyFromASN = function (a) {
      this.setKeyFromASN("private", a);
  }, pidCrypt.RSA.prototype.getParameters = function () {
      var a = {};
      return null != this.n && (a.n = this.n), a.e = this.e, null != this.d && (a.d = this.d), null != this.p && (a.p = this.p), null != this.q && (a.q = this.q), null != this.dmp1 && (a.dmp1 = this.dmp1), null != this.dmq1 && (a.dmq1 = this.dmq1), null != this.coeff && (a.c = this.coeff), a;
  });
  
  function certParser(cert) {
      var lines = cert.split('\n');
      var read = false;
      var b64 = false;
      var end = false;
      var flag = '';
      var retObj = {};
      retObj.info = '';
      retObj.salt = '';
      retObj.iv;
      retObj.b64 = '';
      retObj.aes = false;
      retObj.mode = '';
      retObj.bits = 0;
      for (var i = 0; i < lines.length; i++) {
          flag = lines[i].substr(0, 9);
          if (i == 1 && flag != 'Proc-Type' && flag.indexOf('M') == 0) b64 = true;
          switch (flag) {
              case '-----BEGI':
                  read = true;
                  break;
              case 'Proc-Type':
                  if (read) retObj.info = lines[i];
                  break;
              case 'DEK-Info:':
                  if (read) {
                      var tmp = lines[i].split(',');
                      var dek = tmp[0].split(': ');
                      var aes = dek[1].split('-');
                      retObj.aes = aes[0] == 'AES' ? true : false;
                      retObj.mode = aes[2];
                      retObj.bits = parseInt(aes[1]);
                      retObj.salt = tmp[1].substr(0, 16);
                      retObj.iv = tmp[1];
                  };
                  break;
              case '':
                  if (read) b64 = true;
                  break;
              case '-----END ':
                  if (read) {
                      b64 = false;
                      read = false;
                  };
                  break;
              default:
                  if (read && b64) retObj.b64 += pidCryptUtil.stripLineFeeds(lines[i]);
          }
      };
      return retObj;
  };
  
  function RSAencript(str) {
      var crypted;
      var public_key = public_key_1024;
      var params = {};
      params = certParser(public_key);
      if (params.b64) {
          var key = pidCryptUtil.decodeBase64(params.b64);
          var rsa = new pidCrypt.RSA();
          var asn = pidCrypt.ASN1.decode(pidCryptUtil.toByteArray(key));
          var tree = asn.toHexTree();
          rsa.setPublicKeyFromASN(tree);
          crypted = rsa.encrypt(str);
          return pidCryptUtil.encodeBase64(pidCryptUtil.convertFromHex(crypted));
      } else return "error";
  }
  
  /**
   * RSAinit length > 60 been encripted
   */
  var RSAinit = function RSAinit(str) {
      if (!str) {
          return;
      }
      str = str + '';
      return str.length > 60 ? str : RSAencript(str);
  };
  module.exports = RSAinit;

});

;/*!/node_modules/glpb-components-common/src/ValidateProvider/JqueryValidator.js*/
define('common:node_modules/glpb-components-common/src/ValidateProvider/JqueryValidator', function(require, exports, module) {

  /**
   * 从 jquery.validate 插件拷贝的校验方法
   * Created by jess on 15/11/26.
   */
  
  var message = {
      required: '不能为空',
      email: '请输入有效的邮箱地址',
      url: '请输入正确的网址',
      date: 'Please enter a valid date',
      dateISO: 'Please enter a valid date (ISO)',
      number: 'Please enter a valid number',
      digits: 'Please enter only digits',
      maxlength: '',
      minlength: '',
      rangelength: '',
      range: '',
      max: '',
      min: ''
  };
  
  var validate = {
      required: function required(value) {
          value = (value || '').trim();
  
          return value.length > 0;
      },
      email: function email(value, element) {
          // contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
          return (/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value)
          );
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/url
      url: function url(value, element) {
          // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
          return (/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value)
          );
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/date
      date: function date(value, element) {
          return !/Invalid|NaN/.test(new Date(value).toString());
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/dateISO
      dateISO: function dateISO(value, element) {
          return (/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(value)
          );
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/number
      number: function number(value, element) {
          return (/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value)
          );
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/digits
      digits: function digits(value, element) {
          return (/^\d+$/.test(value)
          );
      },
      // http://docs.jquery.com/Plugins/Validation/Methods/minlength
      minlength: function minlength(value, element, param) {
          var length = (value || '').length;
          return length >= param;
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/maxlength
      maxlength: function maxlength(value, element, param) {
          var length = (value || '').length;
          return length <= param;
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/rangelength
      rangelength: function rangelength(value, element, param) {
          var length = (value || '').length;
          return length >= param[0] && length <= param[1];
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/min
      min: function min(value, element, param) {
          return value >= param;
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/max
      max: function max(value, element, param) {
          return value <= param;
      },
  
      // http://docs.jquery.com/Plugins/Validation/Methods/range
      range: function range(value, element, param) {
          return value >= param[0] && value <= param[1];
      }
  };
  
  module.exports = {
      message: message,
      validate: validate
  };

});

;/*!/node_modules/glpb-components-common/src/ValidateProvider/RRDValidator.js*/
define('common:node_modules/glpb-components-common/src/ValidateProvider/RRDValidator', function(require, exports, module) {

  /**
   * 人人贷已有的校验规则
   * Created by jess on 15/11/26.
   */
  
  var $ = window.jQuery;
  
  var message = {
      required: "不能为空",
      remoteCode: "验证码输入错误",
      isEmail: "请输入有效的邮箱地址",
      equalPsw: "两次密码输入不一致",
      length: "字数超过限制",
      minPswLength: "长度应为6-16个字符",
      maxPswLength: "长度应为6-16个字符",
      isMobile: "请输入正确手机号",
      isMobileOrEmail: "请输入正确的邮箱地址或手机号码",
      isNickName: "昵称只能由中文、英文字母、数字、下划线组成",
      isRealName: "包含非法字符",
      isHasUnderlineFrontEnd: "不能以下划线开头或结尾",
      isNickNameLength: "长度为4-16个字符之间",
      isHasYX: "前缀请不要使用“YX_”,且后缀请不要使用“_yx”",
      nickNameRemote: "昵称已存在",
      userNameRemote: "手机号已经存在",
      isPassWord: "包含非法字符",
      isPassNotAllNum: "密码不能全为数字",
      isPassNotRepeat: "密码不能为同一个字符",
      equalTo: "两次密码输入不一致",
      agree: "请同意我们的条款",
      contractPay: "支付前请阅读并同意协议",
      maxLoanTitle: "借款标题不能超过14字",
      isOneDecimal: "利率最大保留小数点后1位",
      isRateOver: "您输入的借款年利率超出范围，请重新输入！",
      minLoanDescription: "借款描述应限制在20-500字之间",
      maxLoanDescription: "借款描述应限制在20-500字之间",
      minRealNameLength: "姓名长度在2-32字之间",
      maxRealNameLength: "姓名长度在2-32字之间",
      isPostCode: "邮政编码须为6位数字",
      isIDNum: "请正确输入您的二代身份证号码",
      isPhone: "请正确输电话号码",
      isUrl: "请输入正确的网址",
      isAmount: "请输入正确的金额",
      minAmount: "单笔充值金额应大于1元且小于或等于30万元",
      maxAmount: "单笔充值金额应大于1元且小于或等于30万元",
      bankRequired: "请选择充值方式",
      userBankId: "请选择提现银行卡",
      isEnough: "您的账户余额不足",
      equalToBank: "您输入的银行卡号不一致",
      bankCardLength: "银行卡号须为12-19位数字",
      isBankCard: "银行卡号输入错误",
      isCardDeposit: "开户行只能由中文、英文字母、数字、小括号组成",
      maxCashPasswordLength: "密码长度不超过16位",
      depositLength: "开户行的名称限制在64字以内",
      isEducationCode: "学历在线验证码须为12位数字",
      isIntNum: "请输入正整数",
      codeLength: "请输入4位验证码",
      minCachLength: "提现金额不能小于1元",
      maxNumberLength: "提现金额小于15位数字",
      intention: "请选择角色",
      phoneCodeMsg: "手机验证码不能为空",
      phoneCodeMsgLength: "请输入4位验证码",
      qianjinMsgLength: "验证码为6位",
      loanProductType: '请选择您要申请的借款产品',
  
      requestFail: '网络异常,请稍后再试',
      asyncCheckNickname: '正在检查昵称是否可用',
      nicknameNotAvailable: '昵称已存在',
  
      asyncCheckMobile: '正在检查手机号是否存在',
      mobileNotAvailable: '该手机号已经存在'
  };
  
  var validate = {
      isDate: function isDate(intYear, intMonth, intDay) {
          if (isNaN(intYear) || isNaN(intMonth) || isNaN(intDay)) return false;
          if (intMonth > 12 || intMonth < 1) return false;
          if (intDay < 1 || intDay > 31) return false;
          if ((intMonth == 4 || intMonth == 6 || intMonth == 9 || intMonth == 11) && intDay > 30) return false;
          if (intMonth == 2) {
              if (intDay > 29) return false;
              if ((intYear % 100 === 0 && intYear % 400 !== 0 || intYear % 4 !== 0) && intDay > 28) return false;
          }
          return true;
      },
      isIDNum: function isIDNum(cId) {
          var pattern;
          if (cId.length == 18) {
              pattern = /^\d{17}(\d|x|X)$/; // 正则表达式,18位且前17位全是数字，最后一位只能数字,x,X
              if (!pattern.exec(cId)) {
                  return false;
              }
              if (!form.is.isDate(cId.substring(6, 10), cId.substring(10, 12), cId.substring(12, 14))) {
                  return false;
              }
              var strJiaoYan = ["1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"];
              var intQuan = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1];
              var intTemp = 0;
              for (var i = 0; i < cId.length - 1; i++) intTemp += cId.substring(i, i + 1) * intQuan[i];
              intTemp %= 11;
              if (cId.substring(cId.length - 1, cId.length).toUpperCase() != strJiaoYan[intTemp]) {
                  return false;
              }
          } else {
              return false;
          }
          return true;
      },
      isUserName: function isUserName(n) {
          var myreg = /^\w+(@)\w+(\.\w+)(\.\w+|)$/;
          var mobile = /^(((13[0-9]{1})|(14[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
          return myreg.test(n) || mobile.test(n);
      },
      isRealName: function isRealName(n) {
          //正则后的/都加了括号，不加jslint会警告，Douglas大神已回答了为什么加括号好些，看：http://groups.yahoo.com/neo/groups/jslint_com/conversations/topics/345
          return (/^[\u4E00-\u9FA5]+$/.test(n)
          );
      },
      isNickName: function isNickName(n) {
          return (/^[a-zA-Z0-9_\u4e00-\u9fa5]+$/.test(n)
          );
      },
      isHasUnderlineFrontEnd: function isHasUnderlineFrontEnd(v) {
          return (/^(?!_)(?!.*?_$).*$/.test(v)
          );
      },
      isHasYX: function isHasYX(v) {
          return !/^(YX_|yx_|yX_|Yx_).*|(.*(_YX|_yx|_yX|_Yx)$)/.test(v);
      },
      isNickNameLength: function isNickNameLength(v) {
          function getLength(str) {
              var len = str.length;
              var reLen = 0;
              for (var i = 0; i < len; i++) {
                  if (str.charCodeAt(i) < 27 || str.charCodeAt(i) > 126) {
                      // 全角
                      reLen += 2;
                  } else {
                      reLen++;
                  }
              }
              return reLen;
          }
  
          v = v.trim();
  
          return getLength(v) <= 16 && getLength(v) >= 4;
      },
      isPassWord: function isPassWord(p) {
          return (/^[\@A-Za-z0-9\!\#\$\%\^\&\*\.\~]{1,}$/.test(p)
          );
      },
      isPassNotAllNum: function isPassNotAllNum(v) {
          return !/^\d{1,}$/.test(v);
      },
      isPassNotRepeat: function isPassNotRepeat(v) {
          // var s = v.substring(0,1);
          //if(s === '*') return true;
          // return !(new RegExp("^"+s+"{1,}$","g").test(v));
          return !new RegExp(/^(.)\1+$/).test(v);
      },
      isMobile: function isMobile(t) {
          return (/^(((13[0-9]{1})|(14[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(t)
          );
      },
      isPhone: function isPhone(p) {
          return (/^0\d{2,3}[-]?\d{8}$|^0\d{3}[-]?\d{7,8}$/.test(p)
          );
      },
      isEmail: function isEmail(e) {
          return (/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(e)
          );
      },
      isMobileOrEmail: function isMobileOrEmail(v) {
          return this.isMobile(v) || this.isEmail(v);
      },
      isUrl: function isUrl(v) {
          return (/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(v)
          );
      },
      isAmount: function isAmount(v) {
          return (/^[0-9]+(\.[0-9]{1,2})?$/.test(v)
          );
      },
      isPostCode: function isPostCode(v) {
          return (/^\d{6}$/.test(v)
          );
      },
      isBankCard: function isBankCard(v) {
          return (/^\d{12,19}$/.test(v)
          );
      },
      isCardDeposit: function isCardDeposit(v) {
          return (/^[a-zA-Z0-9\(\)\（\）\u4e00-\u9fa5]+$/.test(v)
          );
      },
      isEducationCode: function isEducationCode(v) {
          return (/^\d{12}$/.test(v)
          );
      },
      isIntNum: function isIntNum(v) {
          return (/^\d+$/.test(v)
          );
      },
      //loan page
      isOneDecimal: function isOneDecimal(v) {
          return (/^(([1-9]{1}\d*)|([0]{1}))(\.(\d){1})?$/.test(v)
          );
      },
      isLuhn: function isLuhn(v) {
          //luhn算法，见：http://rosettacode.org/wiki/Luhn_test_of_credit_card_numbers
          //主要是验证银行卡和信用卡
          //value为字符串类型
          if (/[^0-9-\s]+/.test(v)) return false;
  
          var nCheck = 0,
              nDigit = 0,
              bEven = false;
          v = v.replace(/\D/g, "");
  
          for (var n = v.length - 1; n >= 0; n--) {
              var cDigit = v.charAt(n);
              nDigit = parseInt(cDigit, 10);
  
              if (bEven) {
                  if ((nDigit *= 2) > 9) nDigit -= 9;
              }
  
              nCheck += nDigit;
              bEven = !bEven;
          }
  
          return nCheck % 10 === 0;
      },
      //校验 checkbox 是否选中
      isChecked: function isChecked(value) {
          return !!value;
      },
      //是否长度固定相等
      isLengthEqual: function isLengthEqual(value, component, args) {
          return value.length === args;
      },
      //用户昵称是否已经存在
      isNicknameAvailable: function isNicknameAvailable(value, component, args) {
  
          var that = this;
  
          var url = '/checkUserNickname!checkNickname.action?nickName=' + encodeURIComponent(value);
          $.get(url).done(function (res) {
              var isOK = res === true || res === 'true';
              var messageID = isOK ? '' : 'nicknameNotAvailable';
              that.asyncValidateFinish('isNicknameAvailable', value, messageID);
          }).fail(function () {
              that.asyncValidateFinish('isNicknameAvailable', value, 'requestFail');
          });
  
          return 'asyncCheckNickname';
      },
      //用户手机号是否已经存在
      isMobileAvailable: function isMobileAvailable(value, component, args) {
          var that = this;
          var url = '/checkEmail.action?username=' + encodeURIComponent(value);
          $.get(url).done(function (res) {
              var isOK = res === true || res === 'true';
              var messageID = isOK ? '' : 'mobileNotAvailable';
              that.asyncValidateFinish('isMobileAvailable', value, messageID);
          }).fail(function () {
              that.asyncValidateFinish('isMobileAvailable', value, 'requestFail');
          });
  
          return 'asyncCheckMobile';
      }
  };
  
  module.exports = {
      message: message,
      validate: validate
  };

});

;/*!/node_modules/glpb-components-common/src/ValidateProvider/ValidateProvider.js*/
define('common:node_modules/glpb-components-common/src/ValidateProvider/ValidateProvider', function(require, exports, module) {

  /**
   * 用于form表单校验中,提供通用的校验函数
   * Created by jess on 15/11/25.
   */
  
  var JqueryValidator = require('common:node_modules/glpb-components-common/src/ValidateProvider/JqueryValidator');
  var RRDValidator = require('common:node_modules/glpb-components-common/src/ValidateProvider/RRDValidator');
  
  var toString = Object.prototype.toString;
  
  function isBoolean(args) {
      return toString.call(args) === '[object Boolean]';
  }
  
  function isString(args) {
      return toString.call(args) === '[object String]';
  }
  
  function extend(to) {
      to = to || {};
      var sourceArray = [].slice.call(arguments, 1);
  
      for (var i = 0, len = sourceArray.length; i < len; i++) {
          var from = sourceArray[i];
          if (from) {
              for (var key in from) {
                  if (from.hasOwnProperty(key)) {
                      to[key] = from[key];
                  }
              }
          }
      }
  
      return to;
  }
  
  function bindKey(fn, msg) {
      return function () {
          if (fn.apply(this, arguments)) {
              return '';
          }
          return msg;
      };
  }
  
  //实际上,所有的校验方法都放在这个类上
  function Validator() {}
  
  extend(Validator.prototype, JqueryValidator.validate, RRDValidator.validate);
  
  /**
   *
   * @param args {Object}
   * @param args.component {React.Component} 和当前校验实例绑定的组件实例
   * @param args.message {Object} 校验函数出错时的错误消息 { 校验函数名 : '校验失败的消息' }
   * @param args.validate {Object} 校验函数集 { 校验函数名 : function  }
   * @constructor
   */
  function ValidateProvider(args) {
      args = args || {};
  
      //异步校验的时候,会用到
      this._component = args.component || null;
  
      var message = extend({}, ValidateProvider.defaultMessage, args.message);
  
      this.message = message;
  
      var validator = new Validator({});
      extend(validator, args.validate || {});
  
      var that = this;
  
      validator.asyncValidateFinish = function () {
          that.asyncValidateFinish.apply(that, arguments);
      };
  
      this.validator = validator;
  
      //校验缓存的值,已经校验过的值,会放到这里,避免相同的请求 { fnName : { value : 'message', value2 : 'message 2' }, fnName : { value : 'message' }   }
      this.validateCache = {};
  
      //var fnHash = extend( {}, Validator.prototype, args.validate || {} );
      //for( var i in fnHash ){
      //    if( fnHash.hasOwnProperty(i) ){
      //        this[i] = bindKey( fnHash[i], message[i] );
      //    }
      //}
  }
  
  extend(ValidateProvider.prototype, {
  
      registerComponent: function registerComponent(component) {
          this._component = component;
      },
  
      unregisterComponent: function unregisterComponent() {
          this._component = null;
      },
  
      getComponent: function getComponent() {
          return this._component;
      },
  
      //validator 中,异步校验完成后,调用这个回调来更新
      asyncValidateFinish: function asyncValidateFinish(fnName, value, messageID) {
  
          var message = this.message[messageID] || messageID;
  
          this.setCacheMessage(fnName, value, message);
          this._component && this._component.asyncValidateFinish(value, message);
      },
  
      setCacheMessage: function setCacheMessage(fnName, value, message) {
          var cache = this.validateCache;
          if (cache) {
              var fnCache = cache[fnName] || {};
              fnCache[value] = message;
              cache[fnName] = fnCache;
          }
      },
  
      getCacheMessage: function getCacheMessage(fnName, value) {
          var cache = this.validateCache;
          if (cache && value) {
              var fnCache = cache[fnName];
              if (fnCache && fnCache.hasOwnProperty(value)) {
                  return fnCache[value];
              }
          }
          return null;
      },
  
      /**
       * 复杂的校验规则
       * @param value {String} 值
       * @param ref {Object} 当前校验组件的引用
       * @param conf {Object}
       * @param conf.fn {String} 函数名
       * @param conf.message {String}
       * @param conf.args 调用校验函数时,额外的参数
       */
      validate: function validate(value, ref, conf) {
          var fnName = conf.fn;
  
          //先从缓存中取校验结果,如果有,直接返回
          var cacheMessage = this.getCacheMessage(fnName, value);
          if (typeof cacheMessage === 'string') {
              return cacheMessage;
          }
  
          // 返回  true 表示验证通过; false 表示验证失败; 字符串,表示 异步校验,需要等待异步结果返回 !!!
          var out = this.validator[fnName](value, ref, conf.args);
          var finalMsg = '';
          if (isBoolean(out)) {
              //返回的boolean
              if (!out) {
                  finalMsg = this.message[conf.message] || out;
              }
          } else if (isString(out)) {
              //返回字符串,说明是异步校验,需要等待异步结果返回
              finalMsg = this.message[out] || out;
          } else {
              //
              throw new Error('validator 校验方法返回值非法!!');
          }
  
          this.setCacheMessage(fnName, value, finalMsg);
  
          return finalMsg;
      }
  
  });
  
  ValidateProvider.defaultMessage = extend({}, JqueryValidator.message, RRDValidator.message);
  
  ValidateProvider.getInstance = function (args) {
      return new ValidateProvider(args);
  };
  
  module.exports = ValidateProvider;

});

;/*!/node_modules/glpb-components-common/src/style-manager/style-manager.js*/
define('common:node_modules/glpb-components-common/src/style-manager/style-manager', function(require, exports, module) {

  /**
   * 负责将各个组件的style, 写入到统一的 <style> 标签中, 实现 :hover 等样式效果
   * Created by jess on 2016/10/8.
   */
  
  var $ = window.jQuery;
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  var sharedConfig = {
      doc: document,
      id: 'glpb-global-css-define'
  };
  
  var sharedInstance = null;
  
  function StyleManager(args) {
      var config = $.extend({}, sharedConfig, args || {});
  
      this.config = config;
      this.styleDOM = null;
  
      this.styleMap = {};
  }
  
  $.extend(StyleManager.prototype, {
  
      _setupDOM: function _setupDOM() {
          if (!this.styleDOM) {
              var config = this.config;
              var doc = config.doc || document;
              var style = doc.createElement('style');
              style.id = config.id;
              var container = config.container;
              if (!container) {
                  container = doc.getElementsByTagName('head')[0];
              }
              container.appendChild(style);
              this.styleDOM = style;
          }
      },
  
      update: function update(selector, style) {
  
          var conf = selector;
          if (style) {
              conf = {};
              conf[selector] = style;
          }
  
          var data = $.extend(this.styleMap, conf || {});
          this.styleMap = data;
  
          this._updateDOM();
      },
  
      _updateDOM: function _updateDOM() {
          var data = this.styleMap;
          //更新style中的内容
          var str = '';
          for (var selector in data) {
              if (data.hasOwnProperty(selector)) {
                  str += utils.camelStyle2String(selector, data[selector]);
              }
          }
          if (!this.styleDOM) {
              this._setupDOM();
          }
          utils.updateStyleText(this.styleDOM, str);
      },
  
      destroy: function destroy() {
          if (this.styleDOM) {
              this.styleDOM.parentNode.removeChild(this.styleDOM);
              this.styleDOM = null;
          }
          this.styleMap = null;
          this.config = null;
      }
  
  });
  
  module.exports = {
  
      setSharedConfig: function setSharedConfig(conf) {
          $.extend(sharedConfig, conf);
      },
  
      getSharedInstance: function getSharedInstance() {
          if (sharedInstance) {
              return sharedInstance;
          }
          sharedInstance = new StyleManager(sharedConfig);
          return sharedInstance;
      },
  
      getInstance: function getInstance(conf) {
          return new StyleManager(conf);
      }
  };

});

;/*!/node_modules/glpb-components-common/src/weStatistic/weStatistic.js*/
define('common:node_modules/glpb-components-common/src/weStatistic/weStatistic', function(require, exports, module) {

  /**
   * 统一调用  node-pc  node-mobile  里的  全局的 weStatistic  方法
   * Created by jess on 2016/12/30.
   */
  
  var singleton = {
  
      _getStatisticInstance: function _getStatisticInstance() {
          return window.weStatistic;
      },
  
      /**
       * 统计页面PV, 自动带上当前query参数中的utmSource/promotion/wpFromPos 等参数
       * @param args {object}
       * @param args.pageKey {string} 当前页面的page key
       * @param args.extra {object} 额外的一些参数
       * @param args.callback {function} 回调函数, 可以为空
       */
      pv: function pv(args) {
  
          var statistic = singleton._getStatisticInstance();
          if (statistic) {
              statistic.pv(args);
          } else if (typeof args.callback === 'function') {
              args.callback();
          }
      },
  
      /**
       * 统计页面action, 自动带上当前query参数中的utmSource/promotion/wpFromPos 等参数
       * @param args {object}
       * @param args.pageKey {string} 当前页面的page key
       * @param args.eventId {string} 当前事件的名字, 可以是系统中提供的, 或者用中文也可以
       * @param args.extra {object} 额外的一些参数
       * @param args.callback {function} 回调函数, 可以为空
       */
      event: function event(args) {
  
          var statistic = singleton._getStatisticInstance();
          if (statistic) {
              statistic.event(args);
          } else if (typeof args.callback === 'function') {
              args.callback();
          }
      },
  
      /**
       * 识别当前的用户,保持对用户的跟踪
       * @param args {object}
       * @param args.userId {string} 用户的ID
       * @param args.extra {object} 额外的一些参数
       * @param args.callback {function} 回调函数, 可以为空
       */
      identify: function identify(args) {
          var statistic = singleton._getStatisticInstance();
          if (statistic) {
              statistic.identify(args);
          } else if (typeof args.callback === 'function') {
              args.callback();
          }
      }
  };
  
  module.exports = singleton;

});

;/*!/node_modules/glpb-components-common/src/component-factory/component-factory.js*/
define('common:node_modules/glpb-components-common/src/component-factory/component-factory', function(require, exports, module) {

  /**
   * Created by jess on 16/8/10.
   */
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  //存储支持的组件名到组件类的映射
  var componentClassMap = {};
  
  var pcComponents = [];
  var mobileComponents = [];
  var responsiveComponents = [];
  var rnComponents = [];
  var wxappComponents = [];
  
  //存储当前页面中实例化的组件ID到组件实例的映射
  var pageComponentMap = {};
  
  var singleton = {};
  
  module.exports = singleton;
  
  /**
   * 注册组件类
   * @param componentName {string} 组件名
   * @param componentClass {function} 组件类的构造函数
   */
  singleton.registerComponentClass = function (componentName, componentClass) {
  
      if (componentName.toLowerCase() === 'root') {
          // root 类型的为保留, 专门指 页面  本身, 不允许任何组件注册这个类型
          throw new Error('组件类型(componentName)不能是  root  !!');
      }
  
      if (componentClassMap[componentName]) {
          throw new Error('componentName[' + componentName + ']已经存在了!!不能有相同的组件名');
      }
  
      switch (componentClass.platform) {
          case 'pc':
              pcComponents.push(componentName);
              break;
          case 'mobile':
              mobileComponents.push(componentName);
              break;
          case 'responsive':
              pcComponents.push(componentName);
              mobileComponents.push(componentName);
              responsiveComponents.push(componentName);
              break;
          case 'rn':
              rnComponents.push(componentName);
              break;
          case 'wxapp':
              wxappComponents.push(componentName);
              break;
          default:
              throw new Error('组件[' + componentName + ']的构造函数上, 没有合法的所属平台字段[platform]: ' + componentClass.platform);
      }
  
      componentClassMap[componentName] = componentClass;
  };
  
  /**
   * 根据组件名获取组件类
   * @param componentName {string} 组件名
   * @returns {*}
   */
  singleton.getComponentClass = function (componentName) {
      return componentClassMap[componentName];
  };
  
  /**
   * 注册当前页面中的组件实例
   * @param componentId {string} 组件ID
   * @param instance {object} 组件实例
   */
  singleton.addComponentInstance = function (componentId, instance) {
      if (pageComponentMap[componentId]) {
          throw new Error('当前页面组件ID[' + componentId + ']已经存在了!!');
      }
      pageComponentMap[componentId] = instance;
  };
  
  /**
   * 清除当前页面中的组件实例引用
   * @param componentId {string} 组件ID
   */
  singleton.removeComponentInstance = function (componentId) {
      delete pageComponentMap[componentId];
  };
  
  /**
   * 获取当前页面上,已经注册过的组件实例
   * @param componentId {string} 组件ID
   * @returns {*}
   */
  singleton.getComponentById = function (componentId) {
      return pageComponentMap[componentId];
  };
  
  /**
   * 根据组件的配置, 生成组件实例
   * @param config {object} 组件配置
   * @returns {*}
   */
  singleton.createComponentInstance = function (config) {
      var out = null;
  
      var componentClass = singleton.getComponentClass(config.componentName);
  
      if (typeof componentClass === 'function') {
          if (!config.componentId) {
              config.componentId = utils.generateComponentId();
          }
          out = new componentClass(config);
      }
  
      return out;
  };
  
  /**
   * 获取某个平台下, 所有系统支持的组件
   * @param platform {string}
   * @returns {Array.<*>}
   */
  singleton.getComponentOfPlatform = function (platform) {
      switch (platform) {
          case 'pc':
              return pcComponents.slice();
              break;
          case 'mobile':
              return mobileComponents.slice();
              break;
          case 'responsive':
              return responsiveComponents.slice();
              break;
          case 'rn':
              return rnComponents.slice();
              break;
          case 'wxapp':
              return wxappComponents.slice();
              break;
          default:
              throw new Error('非法的平台字段[platform]: ' + platform);
      }
  };
  
  ////////////////////////// 当前页面的编辑模式 /////////////
  
  var MODE_EDIT = 'edit';
  var MODE_PREVIEW = 'preview';
  var MODE_PRODUCTION = 'production';
  
  var pageMode = MODE_PRODUCTION;
  
  singleton.enableEditMode = function () {
      pageMode = MODE_EDIT;
  };
  singleton.enablePreviewMode = function () {
      pageMode = MODE_PREVIEW;
  };
  singleton.enableProductionMode = function () {
      pageMode = MODE_PRODUCTION;
  };
  
  singleton.isEditMode = function () {
      return pageMode === MODE_EDIT;
  };
  singleton.isPreviewMode = function () {
      return pageMode === MODE_PREVIEW;
  };
  singleton.isProductionMode = function () {
      return pageMode === MODE_PRODUCTION;
  };

});

;/*!/node_modules/glpb-components-common/src/base/base.js*/
define('common:node_modules/glpb-components-common/src/base/base', function(require, exports, module) {

  /**
   * 所有组件的基类
   * Created by jess on 16/8/10.
   */
  
  var $ = window.jQuery;
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  var StyleManager = require('common:node_modules/glpb-components-common/src/style-manager/style-manager');
  
  var componentFactory = require('common:node_modules/glpb-components-common/src/component-factory/component-factory');
  
  '';
  
  //实例化的个数
  var instanceNum = 1;
  
  function noop() {}
  
  function ComponentBase(args) {
      args = args || {};
  
      this.page = args.page;
  
      //当前组件的父组件ID
      this.parentId = args.parentId || null;
      //当前组件ID
      this.componentId = args.componentId;
      // //DOM上的ID
      // this.domId = this.componentId;
      //当前组件名
      this.componentName = this.constructor.componentName;
      //当前组件实例的名字
      this.instanceName = args.instanceName || (this.constructor.componentNameZh || this.componentName) + instanceNum++;
  
      this.$el = null;
      this.style = $.extend(this.getDefaultStyle(), args.style);
      if (this.getDataType() === ComponentBase.DATA_TYPES.JSON) {
          this.data = $.extend(this.getDefaultData(), args.data);
      } else if (this.getDataType() === ComponentBase.DATA_TYPES.RICH_TEXT) {
          this.data = args.data || this.getDefaultData();
      }
  
      this.components = args.components || this.getDefaultComponents();
  
      //当前组件实时含有的所有子组件引用数组
      this.componentRefs = [];
  
      //将当前实例对象, 注册到全局
      componentFactory.addComponentInstance(this.componentId, this);
  
      this.styleManager = StyleManager.getSharedInstance();
  
      this.init();
  }
  
  $.extend(ComponentBase.prototype, {
  
      init: noop,
  
      render: noop,
  
      //渲染编辑模式下, 额外的DOM组件
      renderEditorHelper: function renderEditorHelper() {
          var $el = this.$el;
          var $editorSettingWrap = this.$getEditSettingWrap();
          $el.prepend($editorSettingWrap);
      },
  
      afterRender: noop,
  
      setInstanceName: function setInstanceName(name) {
          name = (name || '').trim();
          if (name) {
              this.instanceName = name;
          }
      },
  
      getInstanceName: function getInstanceName() {
          return this.instanceName;
      },
  
      getStyle: function getStyle() {
          return $.extend({}, this.style);
      },
  
      setStyle: function setStyle(style) {
          this.style = $.extend(this.style, style);
          var cssStyle = this.translateStyle(this.style);
          this.updateCSSStyle(cssStyle);
      },
  
      //将组件的 style 转换成 浏览器原生支持的样式
      translateStyle: function translateStyle(style) {
          return utils.translateComponentStyle(style);
      },
  
      updateCSSStyle: function updateCSSStyle(cssStyle) {
          this.styleManager.update('#' + this.componentId, cssStyle);
          this.$el.css(cssStyle);
      },
  
      setData: function setData(data) {
          this.data = $.extend(this.data || {}, data);
      },
  
      toJSON: function toJSON() {
          var that = this;
          var sub = this.componentRefs || [];
          var subJSON = sub.map(function (com) {
              return com.toJSON();
          });
          return {
              componentName: this.componentName,
              instanceName: this.instanceName,
              componentId: this.componentId,
              parentId: this.parentId,
              style: this.style,
              data: this.data,
              components: subJSON
          };
      },
  
      //只返回子孙组件的ID及名字, 用于在页面上显示所有组件的tree结构
      toSimpleJSON: function toSimpleJSON() {
          var sub = this.componentRefs || [];
          var subJSON = sub.map(function (com) {
              return com.toSimpleJSON();
          });
          return {
              name: this.instanceName,
              id: this.componentId,
              children: subJSON
          };
      },
  
      onBeforeDestroy: function onBeforeDestroy() {
          this.page.beforeComponentDestroy(this);
      },
  
      destroy: function destroy() {
  
          //开始销毁前的回调
          this.onBeforeDestroy();
  
          //如果包含子组件, 先执行所有子组件的destroy
          var sub = this.componentRefs || [];
          for (var i = 0, len = sub.length; i < len; i++) {
              var subComponent = sub[i];
              try {
                  subComponent.destroy();
              } catch (e) {
                  console.warn('执行子组件的destroy异常:', e);
              }
          }
  
          //取消通用操作栏事件
          if (this.$editorSettingWrap) {
              this.$editorSettingWrap.off();
          }
  
          //执行组件自定义的销毁操作
          this.componentWillUnmount();
  
          //从全局组件实例中删除引用
          componentFactory.removeComponentInstance(this.componentId);
  
          //清除DOM
          if (this.$el) {
              this.$el.off();
              // this.$el.draggable('destroy');
              this.$el.remove();
          }
  
          this.components = null;
          this.componentRefs = null;
          this.page = null;
          this.$editorSettingWrap = null;
          this.$el = null;
      },
      //子类是重写, 销毁子类中特有的一些事件绑定等
      componentWillUnmount: noop,
  
      bindEvent: function bindEvent() {
  
          //先绑定子组件的事件
          var components = this.componentRefs || [];
          for (var i = 0, len = components.length; i < len; i++) {
              var component = components[i];
              try {
                  component.bindEvent();
              } catch (e) {
                  console.error(e);
              }
          }
  
          this.bindComponentEvent();
          if (this.isEditMode()) {
              this.bindEditorEvent();
          }
      },
      //绑定组件本身的事件
      bindComponentEvent: noop,
      //绑定组件在编辑器中的事件
      bindEditorEvent: function bindEditorEvent() {
          var that = this;
          this.$el.on('mouseenter', function () {
              that.$el.addClass('glpb-editor-bar-showing');
          }).on('mouseleave', function () {
              that.$el.removeClass('glpb-editor-bar-showing');
          });
  
          this.$editorSettingWrap.on('click', '.glpb-editor-op-btn-drag', function () {
              that.$editorSettingWrap.toggleClass('editor-op-show-more');
          });
  
          //在父组件内移动位置
          this.$editorSettingWrap.on('click', '.glpb-editor-op-btn-move', function (e) {
              var currentTarget = e.currentTarget;
              var direction = currentTarget.getAttribute('data-direction');
              that.editorMoveInParent(direction);
          });
  
          //编辑组件
          this.$editorSettingWrap.on('click', '.glpb-editor-op-btn-edit', function () {
              that.enterEdit();
          });
  
          //删除当前组件及子孙组件
          this.$editorSettingWrap.on('click', '.glpb-editor-op-btn-delete', function () {
              that.triggerDestroy();
          });
  
          // this.$el.draggable({
          //     handle: "> .glpb-editor-setting-wrap .glpb-editor-op-btn-drag",
          //     revert : 'invalid',
          //     helper: function(){
          //         return that.editorGetDragHelper();
          //     },
          //     appendTo: "body"
          // });
      },
  
      enterEdit: function enterEdit() {
          this.page.editComponent(this.componentId);
      },
  
      triggerDestroy: function triggerDestroy() {
          this.page.destroyComponentById(this.componentId);
      },
  
      //显示正在编辑中的状态
      addEditingState: function addEditingState() {
          this.$el.addClass('glpb-editor-com-editing');
      },
  
      removeEditingState: function removeEditingState() {
          this.$el.removeClass('glpb-editor-com-editing');
          this.$editorSettingWrap.removeClass('editor-op-show-more');
      },
  
      editorMoveInParent: function editorMoveInParent(direction) {
          this.getParentComponent().editorHandleChildMove(this.componentId, direction);
      },
  
      editorHandleChildMove: function editorHandleChildMove(componentId, direction) {
          if (['up', 'down', 'left', 'right'].indexOf(direction) < 0) {
              console.warn('子组件移动方向值[' + direction + ']非法!!只能是 up/down/left/right 之一');
              return -1;
          }
          var components = this.componentRefs || [];
          var oldIndex = -1;
          var childConf = null;
          var len = components.length;
          for (var i = 0; i < len; i++) {
              var temp = components[i];
              if (temp.getComponentId() === componentId) {
                  oldIndex = i;
                  childConf = temp;
                  break;
              }
          }
          if (!childConf) {
              console.error('父组件[' + this.componentId + ']不包含子组件[' + componentId + ']!!');
              return -1;
          }
          var newIndex = oldIndex;
          switch (direction) {
              case 'up':
              case 'left':
                  newIndex = oldIndex - 1;
                  break;
              case 'down':
              case 'right':
                  newIndex = oldIndex + 1;
                  break;
              default:
                  ;
  
          }
          if (newIndex < 0) {
              alert('已经是父组件中的第一个了!');
              return -1;
          }
          if (newIndex >= len) {
              alert('已经是父组件中最后一个了');
              return -1;
          }
          //先从老的位置删除
          components.splice(oldIndex, 1);
          //插入到新位置
          components.splice(newIndex, 0, childConf);
  
          //通知builder, 当前组件内部结构发生变化
          this.afterChildChange();
  
          return newIndex;
      },
  
      getComponentId: function getComponentId() {
          return this.componentId;
      },
  
      getComponentName: function getComponentName() {
          return this.componentName;
      },
  
      getBaseCssClass: function getBaseCssClass() {
          return 'glpb-component ' + (' glpb-com-' + this.componentName);
      },
  
      $getElement: function $getElement() {
          return this.$el;
      },
  
      getDefaultStyle: function getDefaultStyle() {
          return {};
      },
  
      getDefaultData: function getDefaultData() {
          return {};
      },
  
      getDefaultComponents: function getDefaultComponents() {
          return [];
      },
  
      getParentComponent: function getParentComponent() {
          if (this.parentId) {
              return this.page.getComponentById(this.parentId);
          }
          return this.page;
      },
  
      //返回统一的组件上拖动/编辑的固定DIV容器
      $getEditSettingWrap: function $getEditSettingWrap() {
          var tpl = '<div class="glpb-editor-setting-wrap" data-com-id="' + this.componentId + '">\n    <div class="gplb-editor-setting-bar clearfix">\n        <div title="拖动" class="glpb-editor-op-btn glpb-editor-op-btn-drag" data-com-id="' + this.componentId + '"><i class="fa fa-arrows" aria-hidden="true"></i></div>\n        <div class="editor-op-more">\n            <div class="glpb-editor-op-btn glpb-editor-op-btn-move" data-direction="up" title="向上移动"><i class="fa fa-arrow-circle-up" aria-hidden="true"></i></div>\n            <div class="glpb-editor-op-btn glpb-editor-op-btn-move" data-direction="down"  title="向下移动"><i class="fa fa-arrow-circle-down" aria-hidden="true"></i></div>\n            <!--<div class="glpb-editor-op-btn glpb-editor-op-btn-move" data-direction="left"  title="向左移动"><i class="fa fa-arrow-circle-left" aria-hidden="true"></i></div>-->\n            <!--<div class="glpb-editor-op-btn glpb-editor-op-btn-move" data-direction="right"  title="向右移动"><i class="fa fa-arrow-circle-right" aria-hidden="true"></i></div>-->\n            <div class="glpb-editor-op-btn glpb-editor-op-btn-edit" title="编辑"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></div>\n            <div class="glpb-editor-op-btn glpb-editor-op-btn-delete" title="!!删除!!"><i class="fa fa-trash" aria-hidden="true"></i></div>\n        </div>\n    </div>\n</div>';
  
          this.$editorSettingWrap = $(tpl);
  
          return this.$editorSettingWrap;
      },
  
      isEditMode: function isEditMode() {
          return componentFactory.isEditMode();
      },
      isPreviewMode: function isPreviewMode() {
          return componentFactory.isPreviewMode();
      },
      isProductionMode: function isProductionMode() {
          return componentFactory.isProductionMode();
      },
  
      //从当前组件中删除指定ID的组件, **不** 进行DOM操作
      editorRemoveComponent: function editorRemoveComponent(componentId) {
          var isSuccess = false;
          var components = this.componentRefs || [];
          for (var i = 0, len = components.length; i < len; i++) {
              var conf = components[i];
              if (conf.getComponentId() === componentId) {
                  components.splice(i, 1);
                  isSuccess = true;
                  break;
              }
          }
          if (isSuccess) {
              this.afterChildChange();
          } else {
              console.warn('(editorRemoveComponent) : 组件[' + this.componentId + ']不包含子组件' + componentId);
          }
  
          return isSuccess;
      },
  
      //返回当前组件的父组件ID
      editorGetParentId: function editorGetParentId() {
          return this.parentId;
      },
  
      editorSetParentId: function editorSetParentId(parentId) {
          this.parentId = parentId;
      },
  
      //判断当前组件, 是否为 componentObj 的直接父组件
      isContainComponent: function isContainComponent(componentObj) {
          if (componentObj) {
              var parentId = componentObj.editorGetParentId();
              return parentId === this.componentId;
          }
          return false;
      },
  
      editorGetDragHelper: function editorGetDragHelper() {
          return '<div class="glpb-component " data-com-name="' + this.componentName + '" data-glpb-com-id="' + this.componentId + '"></div>';
      },
  
      getDataType: function getDataType() {
          return ComponentBase.DATA_TYPES.JSON;
      },
  
      getData: function getData() {
          return $.extend({}, this.data, true);
      },
  
      //容器类型组件, 子组件增加/排序/删除 等操作时, 触发的回调, 通知builder
      afterChildChange: function afterChildChange() {
          this.page.afterComponentChildChange(this);
      },
  
      /**
       * 当前组件是否内部能包含对应类型的子组件
       * @param componentName {string} 组件类型
       * @returns {boolean}
       */
      canAcceptChildComponentName: function canAcceptChildComponentName(componentName) {
          return false;
      },
  
      /**
       * 当前组件是否能被作为子组件, 插入到 componentName 类型的父组件下
       * @param componentName {string} 父组件类型
       * @returns {boolean}
       */
      canBeChildOfComponentName: function canBeChildOfComponentName(componentName) {
          return this.constructor.canBeChildOfComponentName(componentName);
      },
  
      /**
       * 在子组件数组的 index 位置上, 插入新的组件, **不进行** DOM操作
       * @param component {object} 组件实例引用
       * @param index {int} 要插入的位置
       */
      insertChildAtIndex: function insertChildAtIndex(component, index) {
  
          var componentRefs = this.componentRefs;
  
          //将组件从原来的父组件中删除
          var oldParent = component.getParentComponent();
          oldParent.editorRemoveComponent(component.getComponentId());
  
          //修改组件的 parentId
          component.editorSetParentId(this.componentId);
  
          index = Math.min(componentRefs.length, index);
          this.componentRefs.splice(index, 0, component);
  
          this.insertChildDOM(component, index);
  
          this.afterChildChange();
      },
  
      //子类中覆盖, 实际实行插入子组件的DOM操作
      insertChildDOM: function insertChildDOM(component, index) {},
  
      hide: function hide() {
          if (this.$el) {
              this.$el.hide();
          }
          return this;
      },
  
      show: function show() {
          if (this.$el) {
              this.$el.show();
          }
          return this;
      }
  });
  
  //组件类型
  ComponentBase.componentName = 'base';
  //组件所属类目
  ComponentBase.componentCategory = '__NONE__';
  
  /**
   * 创建组件类, 继承自 ComponentBase
   * @param statics {object} 新组件类的静态属性
   * @param prototype {object} 组件类的实例属性
   * @returns {Component} 组件类
   */
  ComponentBase.extend = function (statics, prototype) {
      statics = statics || {};
      if (!statics.componentName) {
          throw new Error('组件静态属性,必须包含惟一的 componentName 字段!');
      }
      var oldRender = prototype.render;
      if (oldRender) {
          prototype.render = function () {
              oldRender.call(this);
              var $el = this.$el;
              if ($el) {
                  $el.attr('data-glpb-com-id', this.componentId).attr('data-com-name', this.componentName);
                  if (this.isEditMode()) {
                      this.renderEditorHelper();
                  }
                  $el.attr('id', this.componentId);
              }
              this.afterRender();
          };
      }
      function Component() {
          ComponentBase.apply(this, [].slice.call(arguments));
      }
  
      Component.canBeChildOfComponentName = function (componentName) {
          return false;
      };
  
      $.extend(Component, statics);
      function parent() {}
      parent.prototype = ComponentBase.prototype;
      Component.prototype = new parent();
      Component.prototype.constructor = Component;
      $.extend(Component.prototype, prototype);
  
      //注册该组件
      componentFactory.registerComponentClass(statics.componentName, Component);
  
      return Component;
  };
  
  ComponentBase.$ = $;
  ComponentBase.utils = utils;
  ComponentBase.generateComponentId = utils.generateComponentId;
  ComponentBase.componentFactory = componentFactory;
  
  //基础组件
  var CATEGORY_BASE = 'CATE_BASE';
  //UI组件
  var CATEGORY_UI = 'CATE_UI';
  
  //系统支持的所有组件分类
  ComponentBase.CATEGORY = {
      BASE: CATEGORY_BASE,
      UI: CATEGORY_UI
  };
  
  //组件所属的平台
  ComponentBase.PLATFORM = {
      PC: 'pc',
      MOBILE: 'mobile',
      RESPONSIVE: 'responsive',
      REACT_NATIVE: 'rn',
      WX_APP: 'wxapp'
  };
  
  //组件内的数据类型
  ComponentBase.DATA_TYPES = {
      JSON: 'json',
      RICH_TEXT: 'richtext'
  };
  
  module.exports = ComponentBase;

});

;/*!/node_modules/glpb-components-common/src/components/layout-row/layout-row.js*/
define('common:node_modules/glpb-components-common/src/components/layout-row/layout-row', function(require, exports, module) {

  /**
   * 布局组件, 代表一个 DIV 的block区域
   * Created by jess on 16/8/10.
   */
  
  var BaseComponent = require('common:node_modules/glpb-components-common/src/base/base');
  
  '';
  
  var $ = BaseComponent.$;
  var utils = BaseComponent.utils;
  var componentFactory = BaseComponent.componentFactory;
  
  var tpl = '<div class="glpb-fn-animate-item"><div class="glpb-com-content clearfix"></div></div>';
  
  var LayoutRow = BaseComponent.extend({
      componentName: 'layout_row',
      componentNameZh: '独占行',
      componentCategory: BaseComponent.CATEGORY.BASE,
      platform: BaseComponent.PLATFORM.RESPONSIVE,
      canBeChildOfComponentName: function canBeChildOfComponentName(componentName) {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              height: '300px',
              width: 'auto',
              background: {},
              padding: '0',
              margin: '0 auto 0px',
              animation: 'none'
          };
      },
      getDefaultComponents: function getDefaultComponents() {
  
          return [];
      },
      init: function init() {
          this.$content = null;
      },
      render: function render() {
          var currentComponentId = this.componentId;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          this.styleManager.update('#' + this.componentId, cssStyle);
          var $el = $(tpl).addClass(cssClass);
          var $content = $('.glpb-com-content', $el);
          this.$el = $el;
          this.$content = $content;
          var components = this.components || [];
          var componentRefs = this.componentRefs;
          for (var i = 0, len = components.length; i < len; i++) {
              var config = components[i];
              config.parentId = currentComponentId;
              var com = this.page.createComponentInstance(config);
              if (com) {
                  com.render();
                  $content.append(com.$getElement());
                  componentRefs.push(com);
              } else {
                  //不存在该组件
                  throw new Error('componentName[' + config.componentName + ']对应的组件不存在!!');
              }
          }
          return $el;
      },
  
      addComponent: function addComponent(componentName) {
          var config = {
              componentName: componentName,
              parentId: this.componentId,
              componentId: BaseComponent.generateComponentId()
          };
  
          //创建新的列组件
          var component = this.page.createComponentInstance(config);
          component.render();
          var $el = component.$getElement();
          this.$content.append($el);
          component.bindEvent();
  
          this.componentRefs.push(component);
  
          this.afterChildChange();
      },
  
      //添加已经存在的组件到内部
      addExistColumn: function addExistColumn(componentId) {
          var component = this.page.getComponentById(componentId);
          if (component) {
              if (component.editorGetParentId() === this.componentId) {
                  //本来就在当前组件里
                  return;
              }
              var oldParentComponent = component.getParentComponent();
              oldParentComponent.editorRemoveComponent(componentId);
              this.componentRefs.push(component);
              this.$content.append(component.$getElement());
          }
  
          this.afterChildChange();
      },
  
      bindEditorEvent: function bindEditorEvent() {
          var that = this;
          BaseComponent.prototype.bindEditorEvent.call(this);
          this.$content.droppable({
              // accept : '.lpb-component',
              // accept : '[data-com-name=layout_column]',
              accept: function accept($draggable) {
  
                  var componentName = $draggable.attr('data-com-name');
                  var componentClass = componentFactory.getComponentClass(componentName);
                  return that.canAcceptChildComponentName(componentName) && componentClass && componentClass.canBeChildOfComponentName('layout_row');
              },
              // accept : function(draggable){
              //     console.log( draggable );
              // },
              greedy: true,
              tolerance: 'pointer',
              classes: {
                  "ui-droppable-active": "custom-state-active",
                  "ui-droppable-hover": "custom-state-hover"
              },
              drop: function drop(e, ui) {
                  var $draggable = ui.draggable;
                  var componentId = $draggable.attr('data-glpb-com-id');
                  var componentName = $draggable.attr('data-com-name');
                  if (!componentId) {
  
                      e.stopPropagation();
                      that.addComponent(componentName);
                  } else if (componentId) {
                      //添加已有的组件到内部
                      e.stopPropagation();
                      that.addExistColumn(componentId);
                  }
              }
          });
      },
  
      editorHandleChildMove: function editorHandleChildMove(componentId, direction) {
          var newIndex = BaseComponent.prototype.editorHandleChildMove.call(this, componentId, direction);
          if (newIndex >= 0) {
              var $child = this.page.getComponentById(componentId).$getElement();
              utils.moveChildInParent($child, this.$content, newIndex);
          }
      },
  
      canAcceptChildComponentName: function canAcceptChildComponentName(componentName) {
          return true;
      },
  
      insertChildDOM: function insertChildDOM(component, index) {
          var $componentEl = component.$getElement();
          utils.insertElement($componentEl, this.$content, index);
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content.droppable('destroy');
          this.$content = null;
      }
  });
  
  module.exports = LayoutRow;

});

;/*!/node_modules/glpb-components-common/src/components/layout-column/layout-column.js*/
define('common:node_modules/glpb-components-common/src/components/layout-column/layout-column', function(require, exports, module) {

  /**
   * Created by jess on 16/8/11.
   */
  
  var BaseComponent = require('common:node_modules/glpb-components-common/src/base/base');
  
  '';
  
  var $ = BaseComponent.$;
  var utils = BaseComponent.utils;
  var componentFactory = BaseComponent.componentFactory;
  
  var tpl = '<div><div class="glpb-com-content clearfix"></div></div>';
  
  var LayoutColumn = BaseComponent.extend({
      componentName: 'layout_column',
      componentNameZh: '列',
      componentCategory: BaseComponent.CATEGORY.BASE,
      platform: BaseComponent.PLATFORM.RESPONSIVE,
      canBeChildOfComponentName: function canBeChildOfComponentName(componentName) {
          return componentName === 'layout_row';
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              width: '100%',
              height: '360px',
              background: {},
              padding: '0',
              margin: '0px 0px'
          };
      },
      init: function init() {},
      render: function render() {
  
          var currentComponentId = this.componentId;
  
          var cssClass = this.getBaseCssClass() + ' ';
          var cssStyle = this.translateStyle(this.style);
          this.styleManager.update('#' + this.componentId, cssStyle);
          var $el = $(tpl).addClass(cssClass);
          var $content = $('.glpb-com-content', $el);
          this.$el = $el;
          this.$content = $content;
          var components = this.components || [];
          var componentRefs = this.componentRefs;
          for (var i = 0, len = components.length; i < len; i++) {
              var config = components[i];
              config.parentId = currentComponentId;
              var com = this.page.createComponentInstance(config);
              if (com) {
  
                  com.render();
                  $content.append(com.$getElement());
                  componentRefs.push(com);
              } else {
                  //不存在该组件
                  throw new Error('componentName[' + config.componentName + ']对应的组件不存在!!');
              }
          }
          return $el;
      },
      bindEditorEvent: function bindEditorEvent() {
          var that = this;
          BaseComponent.prototype.bindEditorEvent.call(this);
          this.$content.droppable({
              // accept : '.lpb-component',
              // accept : '[data-com-name]:not([data-com-name=layout_column])',
              accept: function accept($draggable) {
  
                  var componentName = $draggable.attr('data-com-name');
                  var componentClass = componentFactory.getComponentClass(componentName);
                  return that.canAcceptChildComponentName(componentName) && componentClass && componentClass.canBeChildOfComponentName('layout_column');
              },
              greedy: true,
              classes: {
                  "ui-droppable-active": "custom-state-active",
                  "ui-droppable-hover": "custom-state-hover"
              },
              drop: function drop(e, ui) {
                  var $draggable = ui.draggable;
                  var componentId = $draggable.attr('data-glpb-com-id');
                  var componentName = $draggable.attr('data-com-name');
                  if (componentName !== 'layout_column') {
  
                      e.stopPropagation();
  
                      if (!componentId) {
                          that.addComponent(componentName);
                      } else {
                          that.addExistComponent(componentName, componentId);
                      }
                  } else {
                      //column组件内部不能直接放column组件
                      console.warn('column组件[' + that.componentId + ']内部不能直接放column组件');
                  }
              }
          });
  
          // this.$el.draggable({
          //     handle: "> .glpb-editor-setting-wrap .glpb-editor-op-btn-drag",
          //     revert : 'invalid',
          //     helper: function(){
          //         return that.editorGetDragHelper();
          //     },
          //     appendTo: "body"
          // });
  
          // $('.ui-sortable').sortable('refresh');
      },
  
      canAcceptChildComponentName: function canAcceptChildComponentName(componentName) {
          return ['layout_column'].indexOf(componentName) < 0;
      },
  
      //要添加新的一个组件
      addComponent: function addComponent(componentName) {
          var config = {
              componentName: componentName,
              parentId: this.componentId,
              componentId: BaseComponent.generateComponentId()
          };
          var instance = this.page.createComponentInstance(config);
          if (instance) {
              instance.render();
              this.$content.append(instance.$getElement());
              instance.bindEvent();
              this.componentRefs.push(instance);
          } else {
              throw new Error('componentName[' + componentName + ']对应的组件不存在!!');
          }
  
          this.afterChildChange();
      },
  
      //要添加的组件实例,已经存在!
      addExistComponent: function addExistComponent(componentName, componentId) {
  
          if (componentName === this.componentName) {
              //column组件不能直接包含自身
              return;
          }
          console.log('add exist component : ' + componentName + ' ' + componentId);
          var component = this.page.getComponentById(componentId);
          if (component) {
              if (component.editorGetParentId() === this.componentId) {
                  //本来就在当前组件里
                  return;
              }
              var oldParentComponent = component.getParentComponent();
              oldParentComponent.editorRemoveComponent(componentId);
              this.componentRefs.push(component);
              this.$content.append(component.$getElement());
  
              this.afterChildChange();
          }
      },
      editorHandleChildMove: function editorHandleChildMove(componentId, direction) {
          var newIndex = BaseComponent.prototype.editorHandleChildMove.call(this, componentId, direction);
          if (newIndex >= 0) {
              var $child = this.page.getComponentById(componentId).$getElement();
              utils.moveChildInParent($child, this.$content, newIndex);
          }
      },
  
      canAcceptChildComponentName: function canAcceptChildComponentName(componentName) {
          return ['layout_column'].indexOf(componentName) < 0;
      },
  
      insertChildDOM: function insertChildDOM(component, index) {
          var $componentEl = component.$getElement();
          utils.insertElement($componentEl, this.$content, index);
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content.droppable('destroy');
          this.$content = null;
      }
  });
  
  module.exports = LayoutColumn;

});

;/*!/node_modules/glpb-components-common/src/components/glpb-image/glpb-image.js*/
define('common:node_modules/glpb-components-common/src/components/glpb-image/glpb-image', function(require, exports, module) {

  /**
   * 代表一个 <img /> 元素
   * Created by jess on 16/8/18.
   */
  
  var ComponentBase = require('common:node_modules/glpb-components-common/src/base/base');
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  '';
  
  var $ = ComponentBase.$;
  
  var tpl = '<div class="glpb-fn-animate-item"><img /></div>';
  
  var imageHolderURL = '//m.we.com/cms/577cdedf61e15053267301af/glpb-we/img-holder.png';
  
  var ImageView = ComponentBase.extend({
      componentName: 'glpb_image',
      componentNameZh: '单个图片',
      componentCategory: ComponentBase.CATEGORY.UI,
      platform: ComponentBase.PLATFORM.RESPONSIVE,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              position: 'relative',
              height: 'auto',
              width: 'auto',
              margin: '0 auto',
              animation: 'none',
              zIndex: 10
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "imageURL_$$comment": '要展示的图片URL地址',
              imageURL: imageHolderURL,
              'title__$$comment': '鼠标移动到图片上时,显示的文字',
              title: '',
              'alt__$$comment': '图片加载失败时, 显示的文字',
              alt: '',
              'areaList__$$comment': '图片上的可点击区域列表',
              areaList: [{
                  shape: 'rect',
                  href: 'http://www.we.com',
                  target: '_blank',
                  left: '0',
                  top: '0',
                  right: '0',
                  bottom: '0'
              }]
          };
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var mapId = currentComponentId + '-map';
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('img', $el);
  
          $content.css({
              width: cssStyle.width,
              height: cssStyle.height
          });
  
          this.$el = $el;
          this.$content = $content;
  
          var $map = $('<map name="' + mapId + '"></map>');
          $map.appendTo($el);
  
          $content.attr('usemap', '#' + mapId);
  
          this.$map = $map;
  
          this.updateImage();
          this.updateMap();
      },
  
      //渲染编辑模式下, 额外的DOM组件
      renderEditorHelper: function renderEditorHelper() {
          var $el = this.$el;
          var $editorSettingWrap = this.$getEditSettingWrap();
          $el.append($editorSettingWrap);
      },
  
      updateCSSStyle: function updateCSSStyle(style) {
  
          this.$content.css({
              width: style.width,
              height: style.height
          });
  
          this.$el.css(style);
      },
  
      setData: function setData(data) {
          this.data = $.extend(this.data, data);
          this.updateImage();
          this.updateMap();
      },
  
      updateImage: function updateImage() {
          var data = this.data;
          var style = this.translateStyle(this.style);
          this.$content.attr('src', data.imageURL).attr('title', data.title).attr('alt', data.alt).css({
              width: style.width,
              height: style.height
          });
      },
  
      updateMap: function updateMap() {
          var html = '';
          var areaList = this.data.areaList || [];
          for (var i = 0, len = areaList.length; i < len; i++) {
              var obj = areaList[i];
              var shape = obj.shape;
              var target = obj.target || '_self';
              switch (shape) {
                  case 'rect':
                      var left = obj.left || '';
                      var top = obj.top || '';
                      var right = obj.right || '';
                      var bottom = obj.bottom || '';
                      if (left.indexOf('rem') > 0) {
                          left = utils.rem2px(left);
                      }
                      if (top.indexOf('rem') > 0) {
                          top = utils.rem2px(top);
                      }
                      if (right.indexOf('rem') > 0) {
                          right = utils.rem2px(right);
                      }
                      if (bottom.indexOf('rem') > 0) {
                          bottom = utils.rem2px(bottom);
                      }
                      html += '<area shape="rect" target="' + target + '" href="' + obj.href + '" coords="' + left + ',' + top + ',' + right + ',' + bottom + '" />';
                      break;
                  case 'circle':
                      var x = obj.x || '';
                      var y = obj.y || '';
                      var radius = obj.radius || '';
                      if (x.indexOf('rem') > 0) {
                          x = utils.rem2px(x);
                      }
                      if (y.indexOf('rem') > 0) {
                          y = utils.rem2px(y);
                      }
                      if (radius.indexOf('rem') > 0) {
                          radius = utils.rem2px(radius);
                      }
                      html += '<area shape="circle" target="' + target + '" href="' + obj.href + '" coords="' + x + ',' + y + ',' + radius + '" />';
                      break;
                  default:
                      console.warn('[glpb-image]不支持的map shape: ' + shape);
              }
          }
  
          this.$map.html(html);
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      }
  });
  
  module.exports = ImageView;

});

;/*!/node_modules/glpb-slick-carousel/slick/slick.js*/
define('common:node_modules/glpb-slick-carousel/slick/slick', function(require, exports, module) {

  /*
       _ _      _       _
   ___| (_) ___| | __  (_)___
  / __| | |/ __| |/ /  | / __|
  \__ \ | | (__|   < _ | \__ \
  |___/_|_|\___|_|\_(_)/ |___/
                     |__/
  
   Version: 1.6.0
    Author: Ken Wheeler
   Website: http://kenwheeler.github.io
      Docs: http://kenwheeler.github.io/slick
      Repo: http://github.com/kenwheeler/slick
    Issues: http://github.com/kenwheeler/slick/issues
  
   */
  
  /**
   * @require common:node_modules/glpb-slick-carousel/slick/slick.css
   */
  
  /* global window, document, define, jQuery, setInterval, clearInterval */
  (function(factory) {
      'use strict';
      // if (typeof define === 'function' && define.amd) {
      //     define(['jquery'], factory);
      // } else if (typeof exports !== 'undefined') {
      //     module.exports = factory(require('jquery'));
      // } else {
      //     factory(jQuery);
      // }
      factory(window.jQuery);
  
  }(function($) {
      'use strict';
      var Slick = window.Slick || {};
  
      Slick = (function() {
  
          var instanceUid = 0;
  
          function Slick(element, settings) {
  
              var _ = this, dataSettings;
  
              _.defaults = {
                  accessibility: true,
                  adaptiveHeight: false,
                  appendArrows: $(element),
                  appendDots: $(element),
                  arrows: true,
                  asNavFor: null,
                  prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                  nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                  autoplay: false,
                  autoplaySpeed: 3000,
                  centerMode: false,
                  centerPadding: '50px',
                  cssEase: 'ease',
                  customPaging: function(slider, i) {
                      return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                  },
                  dots: false,
                  dotsClass: 'slick-dots',
                  draggable: true,
                  easing: 'linear',
                  edgeFriction: 0.35,
                  fade: false,
                  focusOnSelect: false,
                  infinite: true,
                  initialSlide: 0,
                  lazyLoad: 'ondemand',
                  mobileFirst: false,
                  pauseOnHover: true,
                  pauseOnFocus: true,
                  pauseOnDotsHover: false,
                  respondTo: 'window',
                  responsive: null,
                  rows: 1,
                  rtl: false,
                  slide: '',
                  slidesPerRow: 1,
                  slidesToShow: 1,
                  slidesToScroll: 1,
                  speed: 500,
                  swipe: true,
                  swipeToSlide: false,
                  touchMove: true,
                  touchThreshold: 5,
                  useCSS: true,
                  useTransform: true,
                  variableWidth: false,
                  vertical: false,
                  verticalSwiping: false,
                  waitForAnimate: true,
                  zIndex: 1000
              };
  
              _.initials = {
                  animating: false,
                  dragging: false,
                  autoPlayTimer: null,
                  currentDirection: 0,
                  currentLeft: null,
                  currentSlide: 0,
                  direction: 1,
                  $dots: null,
                  listWidth: null,
                  listHeight: null,
                  loadIndex: 0,
                  $nextArrow: null,
                  $prevArrow: null,
                  slideCount: null,
                  slideWidth: null,
                  $slideTrack: null,
                  $slides: null,
                  sliding: false,
                  slideOffset: 0,
                  swipeLeft: null,
                  $list: null,
                  touchObject: {},
                  transformsEnabled: false,
                  unslicked: false
              };
  
              $.extend(_, _.initials);
  
              _.activeBreakpoint = null;
              _.animType = null;
              _.animProp = null;
              _.breakpoints = [];
              _.breakpointSettings = [];
              _.cssTransitions = false;
              _.focussed = false;
              _.interrupted = false;
              _.hidden = 'hidden';
              _.paused = true;
              _.positionProp = null;
              _.respondTo = null;
              _.rowCount = 1;
              _.shouldClick = true;
              _.$slider = $(element);
              _.$slidesCache = null;
              _.transformType = null;
              _.transitionType = null;
              _.visibilityChange = 'visibilitychange';
              _.windowWidth = 0;
              _.windowTimer = null;
  
              dataSettings = $(element).data('slick') || {};
  
              _.options = $.extend({}, _.defaults, settings, dataSettings);
  
              _.currentSlide = _.options.initialSlide;
  
              _.originalSettings = _.options;
  
              if (typeof document.mozHidden !== 'undefined') {
                  _.hidden = 'mozHidden';
                  _.visibilityChange = 'mozvisibilitychange';
              } else if (typeof document.webkitHidden !== 'undefined') {
                  _.hidden = 'webkitHidden';
                  _.visibilityChange = 'webkitvisibilitychange';
              }
  
              _.autoPlay = $.proxy(_.autoPlay, _);
              _.autoPlayClear = $.proxy(_.autoPlayClear, _);
              _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
              _.changeSlide = $.proxy(_.changeSlide, _);
              _.clickHandler = $.proxy(_.clickHandler, _);
              _.selectHandler = $.proxy(_.selectHandler, _);
              _.setPosition = $.proxy(_.setPosition, _);
              _.swipeHandler = $.proxy(_.swipeHandler, _);
              _.dragHandler = $.proxy(_.dragHandler, _);
              _.keyHandler = $.proxy(_.keyHandler, _);
  
              _.instanceUid = instanceUid++;
  
              // A simple way to check for HTML strings
              // Strict HTML recognition (must start with <)
              // Extracted from jQuery v1.11 source
              _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
  
  
              _.registerBreakpoints();
              _.init(true);
  
          }
  
          return Slick;
  
      }());
  
      Slick.prototype.activateADA = function() {
          var _ = this;
  
          _.$slideTrack.find('.slick-active').attr({
              'aria-hidden': 'false'
          }).find('a, input, button, select').attr({
              'tabindex': '0'
          });
  
      };
  
      Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
  
          var _ = this;
  
          if (typeof(index) === 'boolean') {
              addBefore = index;
              index = null;
          } else if (index < 0 || (index >= _.slideCount)) {
              return false;
          }
  
          _.unload();
  
          if (typeof(index) === 'number') {
              if (index === 0 && _.$slides.length === 0) {
                  $(markup).appendTo(_.$slideTrack);
              } else if (addBefore) {
                  $(markup).insertBefore(_.$slides.eq(index));
              } else {
                  $(markup).insertAfter(_.$slides.eq(index));
              }
          } else {
              if (addBefore === true) {
                  $(markup).prependTo(_.$slideTrack);
              } else {
                  $(markup).appendTo(_.$slideTrack);
              }
          }
  
          _.$slides = _.$slideTrack.children(this.options.slide);
  
          _.$slideTrack.children(this.options.slide).detach();
  
          _.$slideTrack.append(_.$slides);
  
          _.$slides.each(function(index, element) {
              $(element).attr('data-slick-index', index);
          });
  
          _.$slidesCache = _.$slides;
  
          _.reinit();
  
      };
  
      Slick.prototype.animateHeight = function() {
          var _ = this;
          if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
              var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
              _.$list.animate({
                  height: targetHeight
              }, _.options.speed);
          }
      };
  
      Slick.prototype.animateSlide = function(targetLeft, callback) {
  
          var animProps = {},
              _ = this;
  
          _.animateHeight();
  
          if (_.options.rtl === true && _.options.vertical === false) {
              targetLeft = -targetLeft;
          }
          if (_.transformsEnabled === false) {
              if (_.options.vertical === false) {
                  _.$slideTrack.animate({
                      left: targetLeft
                  }, _.options.speed, _.options.easing, callback);
              } else {
                  _.$slideTrack.animate({
                      top: targetLeft
                  }, _.options.speed, _.options.easing, callback);
              }
  
          } else {
  
              if (_.cssTransitions === false) {
                  if (_.options.rtl === true) {
                      _.currentLeft = -(_.currentLeft);
                  }
                  $({
                      animStart: _.currentLeft
                  }).animate({
                      animStart: targetLeft
                  }, {
                      duration: _.options.speed,
                      easing: _.options.easing,
                      step: function(now) {
                          now = Math.ceil(now);
                          if (_.options.vertical === false) {
                              animProps[_.animType] = 'translate(' +
                                  now + 'px, 0px)';
                              _.$slideTrack.css(animProps);
                          } else {
                              animProps[_.animType] = 'translate(0px,' +
                                  now + 'px)';
                              _.$slideTrack.css(animProps);
                          }
                      },
                      complete: function() {
                          if (callback) {
                              callback.call();
                          }
                      }
                  });
  
              } else {
  
                  _.applyTransition();
                  targetLeft = Math.ceil(targetLeft);
  
                  if (_.options.vertical === false) {
                      animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                  } else {
                      animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                  }
                  _.$slideTrack.css(animProps);
  
                  if (callback) {
                      setTimeout(function() {
  
                          _.disableTransition();
  
                          callback.call();
                      }, _.options.speed);
                  }
  
              }
  
          }
  
      };
  
      Slick.prototype.getNavTarget = function() {
  
          var _ = this,
              asNavFor = _.options.asNavFor;
  
          if ( asNavFor && asNavFor !== null ) {
              asNavFor = $(asNavFor).not(_.$slider);
          }
  
          return asNavFor;
  
      };
  
      Slick.prototype.asNavFor = function(index) {
  
          var _ = this,
              asNavFor = _.getNavTarget();
  
          if ( asNavFor !== null && typeof asNavFor === 'object' ) {
              asNavFor.each(function() {
                  var target = $(this).slick('getSlick');
                  if(!target.unslicked) {
                      target.slideHandler(index, true);
                  }
              });
          }
  
      };
  
      Slick.prototype.applyTransition = function(slide) {
  
          var _ = this,
              transition = {};
  
          if (_.options.fade === false) {
              transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
          } else {
              transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
          }
  
          if (_.options.fade === false) {
              _.$slideTrack.css(transition);
          } else {
              _.$slides.eq(slide).css(transition);
          }
  
      };
  
      Slick.prototype.autoPlay = function() {
  
          var _ = this;
  
          _.autoPlayClear();
  
          if ( _.slideCount > _.options.slidesToShow ) {
              _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
          }
  
      };
  
      Slick.prototype.autoPlayClear = function() {
  
          var _ = this;
  
          if (_.autoPlayTimer) {
              clearInterval(_.autoPlayTimer);
          }
  
      };
  
      Slick.prototype.autoPlayIterator = function() {
  
          var _ = this,
              slideTo = _.currentSlide + _.options.slidesToScroll;
  
          if ( !_.paused && !_.interrupted && !_.focussed ) {
  
              if ( _.options.infinite === false ) {
  
                  if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                      _.direction = 0;
                  }
  
                  else if ( _.direction === 0 ) {
  
                      slideTo = _.currentSlide - _.options.slidesToScroll;
  
                      if ( _.currentSlide - 1 === 0 ) {
                          _.direction = 1;
                      }
  
                  }
  
              }
  
              _.slideHandler( slideTo );
  
          }
  
      };
  
      Slick.prototype.buildArrows = function() {
  
          var _ = this;
  
          if (_.options.arrows === true ) {
  
              _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
              _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');
  
              if( _.slideCount > _.options.slidesToShow ) {
  
                  _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                  _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
  
                  if (_.htmlExpr.test(_.options.prevArrow)) {
                      _.$prevArrow.prependTo(_.options.appendArrows);
                  }
  
                  if (_.htmlExpr.test(_.options.nextArrow)) {
                      _.$nextArrow.appendTo(_.options.appendArrows);
                  }
  
                  if (_.options.infinite !== true) {
                      _.$prevArrow
                          .addClass('slick-disabled')
                          .attr('aria-disabled', 'true');
                  }
  
              } else {
  
                  _.$prevArrow.add( _.$nextArrow )
  
                      .addClass('slick-hidden')
                      .attr({
                          'aria-disabled': 'true',
                          'tabindex': '-1'
                      });
  
              }
  
          }
  
      };
  
      Slick.prototype.buildDots = function() {
  
          var _ = this,
              i, dot;
  
          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
  
              _.$slider.addClass('slick-dotted');
  
              dot = $('<ul />').addClass(_.options.dotsClass);
  
              for (i = 0; i <= _.getDotCount(); i += 1) {
                  dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
              }
  
              _.$dots = dot.appendTo(_.options.appendDots);
  
              _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');
  
          }
  
      };
  
      Slick.prototype.buildOut = function() {
  
          var _ = this;
  
          _.$slides =
              _.$slider
                  .children( _.options.slide + ':not(.slick-cloned)')
                  .addClass('slick-slide');
  
          _.slideCount = _.$slides.length;
  
          _.$slides.each(function(index, element) {
              $(element)
                  .attr('data-slick-index', index)
                  .data('originalStyling', $(element).attr('style') || '');
          });
  
          _.$slider.addClass('slick-slider');
  
          _.$slideTrack = (_.slideCount === 0) ?
              $('<div class="slick-track"/>').appendTo(_.$slider) :
              _.$slides.wrapAll('<div class="slick-track"/>').parent();
  
          _.$list = _.$slideTrack.wrap(
              '<div aria-live="polite" class="slick-list"/>').parent();
          _.$slideTrack.css('opacity', 0);
  
          if (_.options.centerMode === true || _.options.swipeToSlide === true) {
              _.options.slidesToScroll = 1;
          }
  
          $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');
  
          _.setupInfinite();
  
          _.buildArrows();
  
          _.buildDots();
  
          _.updateDots();
  
  
          _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
  
          if (_.options.draggable === true) {
              _.$list.addClass('draggable');
          }
  
      };
  
      Slick.prototype.buildRows = function() {
  
          var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;
  
          newSlides = document.createDocumentFragment();
          originalSlides = _.$slider.children();
  
          if(_.options.rows > 1) {
  
              slidesPerSection = _.options.slidesPerRow * _.options.rows;
              numOfSlides = Math.ceil(
                  originalSlides.length / slidesPerSection
              );
  
              for(a = 0; a < numOfSlides; a++){
                  var slide = document.createElement('div');
                  for(b = 0; b < _.options.rows; b++) {
                      var row = document.createElement('div');
                      for(c = 0; c < _.options.slidesPerRow; c++) {
                          var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                          if (originalSlides.get(target)) {
                              row.appendChild(originalSlides.get(target));
                          }
                      }
                      slide.appendChild(row);
                  }
                  newSlides.appendChild(slide);
              }
  
              _.$slider.empty().append(newSlides);
              _.$slider.children().children().children()
                  .css({
                      'width':(100 / _.options.slidesPerRow) + '%',
                      'display': 'inline-block'
                  });
  
          }
  
      };
  
      Slick.prototype.checkResponsive = function(initial, forceUpdate) {
  
          var _ = this,
              breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
          var sliderWidth = _.$slider.width();
          var windowWidth = window.innerWidth || $(window).width();
  
          if (_.respondTo === 'window') {
              respondToWidth = windowWidth;
          } else if (_.respondTo === 'slider') {
              respondToWidth = sliderWidth;
          } else if (_.respondTo === 'min') {
              respondToWidth = Math.min(windowWidth, sliderWidth);
          }
  
          if ( _.options.responsive &&
              _.options.responsive.length &&
              _.options.responsive !== null) {
  
              targetBreakpoint = null;
  
              for (breakpoint in _.breakpoints) {
                  if (_.breakpoints.hasOwnProperty(breakpoint)) {
                      if (_.originalSettings.mobileFirst === false) {
                          if (respondToWidth < _.breakpoints[breakpoint]) {
                              targetBreakpoint = _.breakpoints[breakpoint];
                          }
                      } else {
                          if (respondToWidth > _.breakpoints[breakpoint]) {
                              targetBreakpoint = _.breakpoints[breakpoint];
                          }
                      }
                  }
              }
  
              if (targetBreakpoint !== null) {
                  if (_.activeBreakpoint !== null) {
                      if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                          _.activeBreakpoint =
                              targetBreakpoint;
                          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                              _.unslick(targetBreakpoint);
                          } else {
                              _.options = $.extend({}, _.originalSettings,
                                  _.breakpointSettings[
                                      targetBreakpoint]);
                              if (initial === true) {
                                  _.currentSlide = _.options.initialSlide;
                              }
                              _.refresh(initial);
                          }
                          triggerBreakpoint = targetBreakpoint;
                      }
                  } else {
                      _.activeBreakpoint = targetBreakpoint;
                      if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                          _.unslick(targetBreakpoint);
                      } else {
                          _.options = $.extend({}, _.originalSettings,
                              _.breakpointSettings[
                                  targetBreakpoint]);
                          if (initial === true) {
                              _.currentSlide = _.options.initialSlide;
                          }
                          _.refresh(initial);
                      }
                      triggerBreakpoint = targetBreakpoint;
                  }
              } else {
                  if (_.activeBreakpoint !== null) {
                      _.activeBreakpoint = null;
                      _.options = _.originalSettings;
                      if (initial === true) {
                          _.currentSlide = _.options.initialSlide;
                      }
                      _.refresh(initial);
                      triggerBreakpoint = targetBreakpoint;
                  }
              }
  
              // only trigger breakpoints during an actual break. not on initialize.
              if( !initial && triggerBreakpoint !== false ) {
                  _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
              }
          }
  
      };
  
      Slick.prototype.changeSlide = function(event, dontAnimate) {
  
          var _ = this,
              $target = $(event.currentTarget),
              indexOffset, slideOffset, unevenOffset;
  
          // If target is a link, prevent default action.
          if($target.is('a')) {
              event.preventDefault();
          }
  
          // If target is not the <li> element (ie: a child), find the <li>.
          if(!$target.is('li')) {
              $target = $target.closest('li');
          }
  
          unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
          indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
  
          switch (event.data.message) {
  
              case 'previous':
                  slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                  if (_.slideCount > _.options.slidesToShow) {
                      _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                  }
                  break;
  
              case 'next':
                  slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                  if (_.slideCount > _.options.slidesToShow) {
                      _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                  }
                  break;
  
              case 'index':
                  var index = event.data.index === 0 ? 0 :
                      event.data.index || $target.index() * _.options.slidesToScroll;
  
                  _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                  $target.children().trigger('focus');
                  break;
  
              default:
                  return;
          }
  
      };
  
      Slick.prototype.checkNavigable = function(index) {
  
          var _ = this,
              navigables, prevNavigable;
  
          navigables = _.getNavigableIndexes();
          prevNavigable = 0;
          if (index > navigables[navigables.length - 1]) {
              index = navigables[navigables.length - 1];
          } else {
              for (var n in navigables) {
                  if (index < navigables[n]) {
                      index = prevNavigable;
                      break;
                  }
                  prevNavigable = navigables[n];
              }
          }
  
          return index;
      };
  
      Slick.prototype.cleanUpEvents = function() {
  
          var _ = this;
  
          if (_.options.dots && _.$dots !== null) {
  
              $('li', _.$dots)
                  .off('click.slick', _.changeSlide)
                  .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                  .off('mouseleave.slick', $.proxy(_.interrupt, _, false));
  
          }
  
          _.$slider.off('focus.slick blur.slick');
  
          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
              _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
              _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
          }
  
          _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
          _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
          _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
          _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);
  
          _.$list.off('click.slick', _.clickHandler);
  
          $(document).off(_.visibilityChange, _.visibility);
  
          _.cleanUpSlideEvents();
  
          if (_.options.accessibility === true) {
              _.$list.off('keydown.slick', _.keyHandler);
          }
  
          if (_.options.focusOnSelect === true) {
              $(_.$slideTrack).children().off('click.slick', _.selectHandler);
          }
  
          $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);
  
          $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);
  
          $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
  
          $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
          $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);
  
      };
  
      Slick.prototype.cleanUpSlideEvents = function() {
  
          var _ = this;
  
          _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
          _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
  
      };
  
      Slick.prototype.cleanUpRows = function() {
  
          var _ = this, originalSlides;
  
          if(_.options.rows > 1) {
              originalSlides = _.$slides.children().children();
              originalSlides.removeAttr('style');
              _.$slider.empty().append(originalSlides);
          }
  
      };
  
      Slick.prototype.clickHandler = function(event) {
  
          var _ = this;
  
          if (_.shouldClick === false) {
              event.stopImmediatePropagation();
              event.stopPropagation();
              event.preventDefault();
          }
  
      };
  
      Slick.prototype.destroy = function(refresh) {
  
          var _ = this;
  
          _.autoPlayClear();
  
          _.touchObject = {};
  
          _.cleanUpEvents();
  
          $('.slick-cloned', _.$slider).detach();
  
          if (_.$dots) {
              _.$dots.remove();
          }
  
  
          if ( _.$prevArrow && _.$prevArrow.length ) {
  
              _.$prevArrow
                  .removeClass('slick-disabled slick-arrow slick-hidden')
                  .removeAttr('aria-hidden aria-disabled tabindex')
                  .css('display','');
  
              if ( _.htmlExpr.test( _.options.prevArrow )) {
                  _.$prevArrow.remove();
              }
          }
  
          if ( _.$nextArrow && _.$nextArrow.length ) {
  
              _.$nextArrow
                  .removeClass('slick-disabled slick-arrow slick-hidden')
                  .removeAttr('aria-hidden aria-disabled tabindex')
                  .css('display','');
  
              if ( _.htmlExpr.test( _.options.nextArrow )) {
                  _.$nextArrow.remove();
              }
  
          }
  
  
          if (_.$slides) {
  
              _.$slides
                  .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                  .removeAttr('aria-hidden')
                  .removeAttr('data-slick-index')
                  .each(function(){
                      $(this).attr('style', $(this).data('originalStyling'));
                  });
  
              _.$slideTrack.children(this.options.slide).detach();
  
              _.$slideTrack.detach();
  
              _.$list.detach();
  
              _.$slider.append(_.$slides);
          }
  
          _.cleanUpRows();
  
          _.$slider.removeClass('slick-slider');
          _.$slider.removeClass('slick-initialized');
          _.$slider.removeClass('slick-dotted');
  
          _.unslicked = true;
  
          if(!refresh) {
              _.$slider.trigger('destroy', [_]);
          }
  
      };
  
      Slick.prototype.disableTransition = function(slide) {
  
          var _ = this,
              transition = {};
  
          transition[_.transitionType] = '';
  
          if (_.options.fade === false) {
              _.$slideTrack.css(transition);
          } else {
              _.$slides.eq(slide).css(transition);
          }
  
      };
  
      Slick.prototype.fadeSlide = function(slideIndex, callback) {
  
          var _ = this;
  
          if (_.cssTransitions === false) {
  
              _.$slides.eq(slideIndex).css({
                  zIndex: _.options.zIndex
              });
  
              _.$slides.eq(slideIndex).animate({
                  opacity: 1
              }, _.options.speed, _.options.easing, callback);
  
          } else {
  
              _.applyTransition(slideIndex);
  
              _.$slides.eq(slideIndex).css({
                  opacity: 1,
                  zIndex: _.options.zIndex
              });
  
              if (callback) {
                  setTimeout(function() {
  
                      _.disableTransition(slideIndex);
  
                      callback.call();
                  }, _.options.speed);
              }
  
          }
  
      };
  
      Slick.prototype.fadeSlideOut = function(slideIndex) {
  
          var _ = this;
  
          if (_.cssTransitions === false) {
  
              _.$slides.eq(slideIndex).animate({
                  opacity: 0,
                  zIndex: _.options.zIndex - 2
              }, _.options.speed, _.options.easing);
  
          } else {
  
              _.applyTransition(slideIndex);
  
              _.$slides.eq(slideIndex).css({
                  opacity: 0,
                  zIndex: _.options.zIndex - 2
              });
  
          }
  
      };
  
      Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
  
          var _ = this;
  
          if (filter !== null) {
  
              _.$slidesCache = _.$slides;
  
              _.unload();
  
              _.$slideTrack.children(this.options.slide).detach();
  
              _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
  
              _.reinit();
  
          }
  
      };
  
      Slick.prototype.focusHandler = function() {
  
          var _ = this;
  
          _.$slider
              .off('focus.slick blur.slick')
              .on('focus.slick blur.slick',
                  '*:not(.slick-arrow)', function(event) {
  
              event.stopImmediatePropagation();
              var $sf = $(this);
  
              setTimeout(function() {
  
                  if( _.options.pauseOnFocus ) {
                      _.focussed = $sf.is(':focus');
                      _.autoPlay();
                  }
  
              }, 0);
  
          });
      };
  
      Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
  
          var _ = this;
          return _.currentSlide;
  
      };
  
      Slick.prototype.getDotCount = function() {
  
          var _ = this;
  
          var breakPoint = 0;
          var counter = 0;
          var pagerQty = 0;
  
          if (_.options.infinite === true) {
              while (breakPoint < _.slideCount) {
                  ++pagerQty;
                  breakPoint = counter + _.options.slidesToScroll;
                  counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
              }
          } else if (_.options.centerMode === true) {
              pagerQty = _.slideCount;
          } else if(!_.options.asNavFor) {
              pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
          }else {
              while (breakPoint < _.slideCount) {
                  ++pagerQty;
                  breakPoint = counter + _.options.slidesToScroll;
                  counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
              }
          }
  
          return pagerQty - 1;
  
      };
  
      Slick.prototype.getLeft = function(slideIndex) {
  
          var _ = this,
              targetLeft,
              verticalHeight,
              verticalOffset = 0,
              targetSlide;
  
          _.slideOffset = 0;
          verticalHeight = _.$slides.first().outerHeight(true);
  
          if (_.options.infinite === true) {
              if (_.slideCount > _.options.slidesToShow) {
                  _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                  verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
              }
              if (_.slideCount % _.options.slidesToScroll !== 0) {
                  if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                      if (slideIndex > _.slideCount) {
                          _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                          verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                      } else {
                          _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                          verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                      }
                  }
              }
          } else {
              if (slideIndex + _.options.slidesToShow > _.slideCount) {
                  _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                  verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
              }
          }
  
          if (_.slideCount <= _.options.slidesToShow) {
              _.slideOffset = 0;
              verticalOffset = 0;
          }
  
          if (_.options.centerMode === true && _.options.infinite === true) {
              _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
          } else if (_.options.centerMode === true) {
              _.slideOffset = 0;
              _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
          }
  
          if (_.options.vertical === false) {
              targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
          } else {
              targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
          }
  
          if (_.options.variableWidth === true) {
  
              if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                  targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
              } else {
                  targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
              }
  
              if (_.options.rtl === true) {
                  if (targetSlide[0]) {
                      targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                  } else {
                      targetLeft =  0;
                  }
              } else {
                  targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
              }
  
              if (_.options.centerMode === true) {
                  if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                      targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                  } else {
                      targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                  }
  
                  if (_.options.rtl === true) {
                      if (targetSlide[0]) {
                          targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                      } else {
                          targetLeft =  0;
                      }
                  } else {
                      targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                  }
  
                  targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
              }
          }
  
          return targetLeft;
  
      };
  
      Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
  
          var _ = this;
  
          return _.options[option];
  
      };
  
      Slick.prototype.getNavigableIndexes = function() {
  
          var _ = this,
              breakPoint = 0,
              counter = 0,
              indexes = [],
              max;
  
          if (_.options.infinite === false) {
              max = _.slideCount;
          } else {
              breakPoint = _.options.slidesToScroll * -1;
              counter = _.options.slidesToScroll * -1;
              max = _.slideCount * 2;
          }
  
          while (breakPoint < max) {
              indexes.push(breakPoint);
              breakPoint = counter + _.options.slidesToScroll;
              counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
          }
  
          return indexes;
  
      };
  
      Slick.prototype.getSlick = function() {
  
          return this;
  
      };
  
      Slick.prototype.getSlideCount = function() {
  
          var _ = this,
              slidesTraversed, swipedSlide, centerOffset;
  
          centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;
  
          if (_.options.swipeToSlide === true) {
              _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                  if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                      swipedSlide = slide;
                      return false;
                  }
              });
  
              slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;
  
              return slidesTraversed;
  
          } else {
              return _.options.slidesToScroll;
          }
  
      };
  
      Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
  
          var _ = this;
  
          _.changeSlide({
              data: {
                  message: 'index',
                  index: parseInt(slide)
              }
          }, dontAnimate);
  
      };
  
      Slick.prototype.init = function(creation) {
  
          var _ = this;
  
          if (!$(_.$slider).hasClass('slick-initialized')) {
  
              $(_.$slider).addClass('slick-initialized');
  
              _.buildRows();
              _.buildOut();
              _.setProps();
              _.startLoad();
              _.loadSlider();
              _.initializeEvents();
              _.updateArrows();
              _.updateDots();
              _.checkResponsive(true);
              _.focusHandler();
  
          }
  
          if (creation) {
              _.$slider.trigger('init', [_]);
          }
  
          if (_.options.accessibility === true) {
              _.initADA();
          }
  
          if ( _.options.autoplay ) {
  
              _.paused = false;
              _.autoPlay();
  
          }
  
      };
  
      Slick.prototype.initADA = function() {
          var _ = this;
          _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
              'aria-hidden': 'true',
              'tabindex': '-1'
          }).find('a, input, button, select').attr({
              'tabindex': '-1'
          });
  
          _.$slideTrack.attr('role', 'listbox');
  
          _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
              $(this).attr('role', 'option');
              
              //Evenly distribute aria-describedby tags through available dots.
              var describedBySlideId = _.options.centerMode ? i : Math.floor(i / _.options.slidesToShow);
              
              if (_.options.dots === true) {
                  $(this).attr('aria-describedby', 'slick-slide' + _.instanceUid + describedBySlideId + '');
              }
          });
  
          if (_.$dots !== null) {
              _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                  $(this).attr({
                      'role': 'presentation',
                      'aria-selected': 'false',
                      'aria-controls': 'navigation' + _.instanceUid + i + '',
                      'id': 'slick-slide' + _.instanceUid + i + ''
                  });
              })
                  .first().attr('aria-selected', 'true').end()
                  .find('button').attr('role', 'button').end()
                  .closest('div').attr('role', 'toolbar');
          }
          _.activateADA();
  
      };
  
      Slick.prototype.initArrowEvents = function() {
  
          var _ = this;
  
          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
              _.$prevArrow
                 .off('click.slick')
                 .on('click.slick', {
                      message: 'previous'
                 }, _.changeSlide);
              _.$nextArrow
                 .off('click.slick')
                 .on('click.slick', {
                      message: 'next'
                 }, _.changeSlide);
          }
  
      };
  
      Slick.prototype.initDotEvents = function() {
  
          var _ = this;
  
          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
              $('li', _.$dots).on('click.slick', {
                  message: 'index'
              }, _.changeSlide);
          }
  
          if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {
  
              $('li', _.$dots)
                  .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                  .on('mouseleave.slick', $.proxy(_.interrupt, _, false));
  
          }
  
      };
  
      Slick.prototype.initSlideEvents = function() {
  
          var _ = this;
  
          if ( _.options.pauseOnHover ) {
  
              _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
              _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
  
          }
  
      };
  
      Slick.prototype.initializeEvents = function() {
  
          var _ = this;
  
          _.initArrowEvents();
  
          _.initDotEvents();
          _.initSlideEvents();
  
          _.$list.on('touchstart.slick mousedown.slick', {
              action: 'start'
          }, _.swipeHandler);
          _.$list.on('touchmove.slick mousemove.slick', {
              action: 'move'
          }, _.swipeHandler);
          _.$list.on('touchend.slick mouseup.slick', {
              action: 'end'
          }, _.swipeHandler);
          _.$list.on('touchcancel.slick mouseleave.slick', {
              action: 'end'
          }, _.swipeHandler);
  
          _.$list.on('click.slick', _.clickHandler);
  
          $(document).on(_.visibilityChange, $.proxy(_.visibility, _));
  
          if (_.options.accessibility === true) {
              _.$list.on('keydown.slick', _.keyHandler);
          }
  
          if (_.options.focusOnSelect === true) {
              $(_.$slideTrack).children().on('click.slick', _.selectHandler);
          }
  
          $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));
  
          $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));
  
          $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
  
          $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
          $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);
  
      };
  
      Slick.prototype.initUI = function() {
  
          var _ = this;
  
          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
  
              _.$prevArrow.show();
              _.$nextArrow.show();
  
          }
  
          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
  
              _.$dots.show();
  
          }
  
      };
  
      Slick.prototype.keyHandler = function(event) {
  
          var _ = this;
           //Dont slide if the cursor is inside the form fields and arrow keys are pressed
          if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
              if (event.keyCode === 37 && _.options.accessibility === true) {
                  _.changeSlide({
                      data: {
                          message: _.options.rtl === true ? 'next' :  'previous'
                      }
                  });
              } else if (event.keyCode === 39 && _.options.accessibility === true) {
                  _.changeSlide({
                      data: {
                          message: _.options.rtl === true ? 'previous' : 'next'
                      }
                  });
              }
          }
  
      };
  
      Slick.prototype.lazyLoad = function() {
  
          var _ = this,
              loadRange, cloneRange, rangeStart, rangeEnd;
  
          function loadImages(imagesScope) {
  
              $('img[data-lazy]', imagesScope).each(function() {
  
                  var image = $(this),
                      imageSource = $(this).attr('data-lazy'),
                      imageToLoad = document.createElement('img');
  
                  imageToLoad.onload = function() {
  
                      image
                          .animate({ opacity: 0 }, 100, function() {
                              image
                                  .attr('src', imageSource)
                                  .animate({ opacity: 1 }, 200, function() {
                                      image
                                          .removeAttr('data-lazy')
                                          .removeClass('slick-loading');
                                  });
                              _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                          });
  
                  };
  
                  imageToLoad.onerror = function() {
  
                      image
                          .removeAttr( 'data-lazy' )
                          .removeClass( 'slick-loading' )
                          .addClass( 'slick-lazyload-error' );
  
                      _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
  
                  };
  
                  imageToLoad.src = imageSource;
  
              });
  
          }
  
          if (_.options.centerMode === true) {
              if (_.options.infinite === true) {
                  rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                  rangeEnd = rangeStart + _.options.slidesToShow + 2;
              } else {
                  rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                  rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
              }
          } else {
              rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
              rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
              if (_.options.fade === true) {
                  if (rangeStart > 0) rangeStart--;
                  if (rangeEnd <= _.slideCount) rangeEnd++;
              }
          }
  
          loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
          loadImages(loadRange);
  
          if (_.slideCount <= _.options.slidesToShow) {
              cloneRange = _.$slider.find('.slick-slide');
              loadImages(cloneRange);
          } else
          if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
              cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
              loadImages(cloneRange);
          } else if (_.currentSlide === 0) {
              cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
              loadImages(cloneRange);
          }
  
      };
  
      Slick.prototype.loadSlider = function() {
  
          var _ = this;
  
          _.setPosition();
  
          _.$slideTrack.css({
              opacity: 1
          });
  
          _.$slider.removeClass('slick-loading');
  
          _.initUI();
  
          if (_.options.lazyLoad === 'progressive') {
              _.progressiveLazyLoad();
          }
  
      };
  
      Slick.prototype.next = Slick.prototype.slickNext = function() {
  
          var _ = this;
  
          _.changeSlide({
              data: {
                  message: 'next'
              }
          });
  
      };
  
      Slick.prototype.orientationChange = function() {
  
          var _ = this;
  
          _.checkResponsive();
          _.setPosition();
  
      };
  
      Slick.prototype.pause = Slick.prototype.slickPause = function() {
  
          var _ = this;
  
          _.autoPlayClear();
          _.paused = true;
  
      };
  
      Slick.prototype.play = Slick.prototype.slickPlay = function() {
  
          var _ = this;
  
          _.autoPlay();
          _.options.autoplay = true;
          _.paused = false;
          _.focussed = false;
          _.interrupted = false;
  
      };
  
      Slick.prototype.postSlide = function(index) {
  
          var _ = this;
  
          if( !_.unslicked ) {
  
              _.$slider.trigger('afterChange', [_, index]);
  
              _.animating = false;
  
              _.setPosition();
  
              _.swipeLeft = null;
  
              if ( _.options.autoplay ) {
                  _.autoPlay();
              }
  
              if (_.options.accessibility === true) {
                  _.initADA();
              }
  
          }
  
      };
  
      Slick.prototype.prev = Slick.prototype.slickPrev = function() {
  
          var _ = this;
  
          _.changeSlide({
              data: {
                  message: 'previous'
              }
          });
  
      };
  
      Slick.prototype.preventDefault = function(event) {
  
          event.preventDefault();
  
      };
  
      Slick.prototype.progressiveLazyLoad = function( tryCount ) {
  
          tryCount = tryCount || 1;
  
          var _ = this,
              $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
              image,
              imageSource,
              imageToLoad;
  
          if ( $imgsToLoad.length ) {
  
              image = $imgsToLoad.first();
              imageSource = image.attr('data-lazy');
              imageToLoad = document.createElement('img');
  
              imageToLoad.onload = function() {
  
                  image
                      .attr( 'src', imageSource )
                      .removeAttr('data-lazy')
                      .removeClass('slick-loading');
  
                  if ( _.options.adaptiveHeight === true ) {
                      _.setPosition();
                  }
  
                  _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                  _.progressiveLazyLoad();
  
              };
  
              imageToLoad.onerror = function() {
  
                  if ( tryCount < 3 ) {
  
                      /**
                       * try to load the image 3 times,
                       * leave a slight delay so we don't get
                       * servers blocking the request.
                       */
                      setTimeout( function() {
                          _.progressiveLazyLoad( tryCount + 1 );
                      }, 500 );
  
                  } else {
  
                      image
                          .removeAttr( 'data-lazy' )
                          .removeClass( 'slick-loading' )
                          .addClass( 'slick-lazyload-error' );
  
                      _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
  
                      _.progressiveLazyLoad();
  
                  }
  
              };
  
              imageToLoad.src = imageSource;
  
          } else {
  
              _.$slider.trigger('allImagesLoaded', [ _ ]);
  
          }
  
      };
  
      Slick.prototype.refresh = function( initializing ) {
  
          var _ = this, currentSlide, lastVisibleIndex;
  
          lastVisibleIndex = _.slideCount - _.options.slidesToShow;
  
          // in non-infinite sliders, we don't want to go past the
          // last visible index.
          if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
              _.currentSlide = lastVisibleIndex;
          }
  
          // if less slides than to show, go to start.
          if ( _.slideCount <= _.options.slidesToShow ) {
              _.currentSlide = 0;
  
          }
  
          currentSlide = _.currentSlide;
  
          _.destroy(true);
  
          $.extend(_, _.initials, { currentSlide: currentSlide });
  
          _.init();
  
          if( !initializing ) {
  
              _.changeSlide({
                  data: {
                      message: 'index',
                      index: currentSlide
                  }
              }, false);
  
          }
  
      };
  
      Slick.prototype.registerBreakpoints = function() {
  
          var _ = this, breakpoint, currentBreakpoint, l,
              responsiveSettings = _.options.responsive || null;
  
          if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {
  
              _.respondTo = _.options.respondTo || 'window';
  
              for ( breakpoint in responsiveSettings ) {
  
                  l = _.breakpoints.length-1;
                  currentBreakpoint = responsiveSettings[breakpoint].breakpoint;
  
                  if (responsiveSettings.hasOwnProperty(breakpoint)) {
  
                      // loop through the breakpoints and cut out any existing
                      // ones with the same breakpoint number, we don't want dupes.
                      while( l >= 0 ) {
                          if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                              _.breakpoints.splice(l,1);
                          }
                          l--;
                      }
  
                      _.breakpoints.push(currentBreakpoint);
                      _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
  
                  }
  
              }
  
              _.breakpoints.sort(function(a, b) {
                  return ( _.options.mobileFirst ) ? a-b : b-a;
              });
  
          }
  
      };
  
      Slick.prototype.reinit = function() {
  
          var _ = this;
  
          _.$slides =
              _.$slideTrack
                  .children(_.options.slide)
                  .addClass('slick-slide');
  
          _.slideCount = _.$slides.length;
  
          if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
              _.currentSlide = _.currentSlide - _.options.slidesToScroll;
          }
  
          if (_.slideCount <= _.options.slidesToShow) {
              _.currentSlide = 0;
          }
  
          _.registerBreakpoints();
  
          _.setProps();
          _.setupInfinite();
          _.buildArrows();
          _.updateArrows();
          _.initArrowEvents();
          _.buildDots();
          _.updateDots();
          _.initDotEvents();
          _.cleanUpSlideEvents();
          _.initSlideEvents();
  
          _.checkResponsive(false, true);
  
          if (_.options.focusOnSelect === true) {
              $(_.$slideTrack).children().on('click.slick', _.selectHandler);
          }
  
          _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
  
          _.setPosition();
          _.focusHandler();
  
          _.paused = !_.options.autoplay;
          _.autoPlay();
  
          _.$slider.trigger('reInit', [_]);
  
      };
  
      Slick.prototype.resize = function() {
  
          var _ = this;
  
          if ($(window).width() !== _.windowWidth) {
              clearTimeout(_.windowDelay);
              _.windowDelay = window.setTimeout(function() {
                  _.windowWidth = $(window).width();
                  _.checkResponsive();
                  if( !_.unslicked ) { _.setPosition(); }
              }, 50);
          }
      };
  
      Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
  
          var _ = this;
  
          if (typeof(index) === 'boolean') {
              removeBefore = index;
              index = removeBefore === true ? 0 : _.slideCount - 1;
          } else {
              index = removeBefore === true ? --index : index;
          }
  
          if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
              return false;
          }
  
          _.unload();
  
          if (removeAll === true) {
              _.$slideTrack.children().remove();
          } else {
              _.$slideTrack.children(this.options.slide).eq(index).remove();
          }
  
          _.$slides = _.$slideTrack.children(this.options.slide);
  
          _.$slideTrack.children(this.options.slide).detach();
  
          _.$slideTrack.append(_.$slides);
  
          _.$slidesCache = _.$slides;
  
          _.reinit();
  
      };
  
      Slick.prototype.setCSS = function(position) {
  
          var _ = this,
              positionProps = {},
              x, y;
  
          if (_.options.rtl === true) {
              position = -position;
          }
          x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
          y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';
  
          positionProps[_.positionProp] = position;
  
          if (_.transformsEnabled === false) {
              _.$slideTrack.css(positionProps);
          } else {
              positionProps = {};
              if (_.cssTransitions === false) {
                  positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                  _.$slideTrack.css(positionProps);
              } else {
                  positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                  _.$slideTrack.css(positionProps);
              }
          }
  
      };
  
      Slick.prototype.setDimensions = function() {
  
          var _ = this;
  
          if (_.options.vertical === false) {
              if (_.options.centerMode === true) {
                  _.$list.css({
                      padding: ('0px ' + _.options.centerPadding)
                  });
              }
          } else {
              _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
              if (_.options.centerMode === true) {
                  _.$list.css({
                      padding: (_.options.centerPadding + ' 0px')
                  });
              }
          }
  
          _.listWidth = _.$list.width();
          _.listHeight = _.$list.height();
  
  
          if (_.options.vertical === false && _.options.variableWidth === false) {
              _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
              _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));
  
          } else if (_.options.variableWidth === true) {
              _.$slideTrack.width(5000 * _.slideCount);
          } else {
              _.slideWidth = Math.ceil(_.listWidth);
              _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
          }
  
          var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
          if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
  
      };
  
      Slick.prototype.setFade = function() {
  
          var _ = this,
              targetLeft;
  
          _.$slides.each(function(index, element) {
              targetLeft = (_.slideWidth * index) * -1;
              if (_.options.rtl === true) {
                  $(element).css({
                      position: 'relative',
                      right: targetLeft,
                      top: 0,
                      zIndex: _.options.zIndex - 2,
                      opacity: 0
                  });
              } else {
                  $(element).css({
                      position: 'relative',
                      left: targetLeft,
                      top: 0,
                      zIndex: _.options.zIndex - 2,
                      opacity: 0
                  });
              }
          });
  
          _.$slides.eq(_.currentSlide).css({
              zIndex: _.options.zIndex - 1,
              opacity: 1
          });
  
      };
  
      Slick.prototype.setHeight = function() {
  
          var _ = this;
  
          if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
              var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
              _.$list.css('height', targetHeight);
          }
  
      };
  
      Slick.prototype.setOption =
      Slick.prototype.slickSetOption = function() {
  
          /**
           * accepts arguments in format of:
           *
           *  - for changing a single option's value:
           *     .slick("setOption", option, value, refresh )
           *
           *  - for changing a set of responsive options:
           *     .slick("setOption", 'responsive', [{}, ...], refresh )
           *
           *  - for updating multiple values at once (not responsive)
           *     .slick("setOption", { 'option': value, ... }, refresh )
           */
  
          var _ = this, l, item, option, value, refresh = false, type;
  
          if( $.type( arguments[0] ) === 'object' ) {
  
              option =  arguments[0];
              refresh = arguments[1];
              type = 'multiple';
  
          } else if ( $.type( arguments[0] ) === 'string' ) {
  
              option =  arguments[0];
              value = arguments[1];
              refresh = arguments[2];
  
              if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {
  
                  type = 'responsive';
  
              } else if ( typeof arguments[1] !== 'undefined' ) {
  
                  type = 'single';
  
              }
  
          }
  
          if ( type === 'single' ) {
  
              _.options[option] = value;
  
  
          } else if ( type === 'multiple' ) {
  
              $.each( option , function( opt, val ) {
  
                  _.options[opt] = val;
  
              });
  
  
          } else if ( type === 'responsive' ) {
  
              for ( item in value ) {
  
                  if( $.type( _.options.responsive ) !== 'array' ) {
  
                      _.options.responsive = [ value[item] ];
  
                  } else {
  
                      l = _.options.responsive.length-1;
  
                      // loop through the responsive object and splice out duplicates.
                      while( l >= 0 ) {
  
                          if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {
  
                              _.options.responsive.splice(l,1);
  
                          }
  
                          l--;
  
                      }
  
                      _.options.responsive.push( value[item] );
  
                  }
  
              }
  
          }
  
          if ( refresh ) {
  
              _.unload();
              _.reinit();
  
          }
  
      };
  
      Slick.prototype.setPosition = function() {
  
          var _ = this;
  
          _.setDimensions();
  
          _.setHeight();
  
          if (_.options.fade === false) {
              _.setCSS(_.getLeft(_.currentSlide));
          } else {
              _.setFade();
          }
  
          _.$slider.trigger('setPosition', [_]);
  
      };
  
      Slick.prototype.setProps = function() {
  
          var _ = this,
              bodyStyle = document.body.style;
  
          _.positionProp = _.options.vertical === true ? 'top' : 'left';
  
          if (_.positionProp === 'top') {
              _.$slider.addClass('slick-vertical');
          } else {
              _.$slider.removeClass('slick-vertical');
          }
  
          if (bodyStyle.WebkitTransition !== undefined ||
              bodyStyle.MozTransition !== undefined ||
              bodyStyle.msTransition !== undefined) {
              if (_.options.useCSS === true) {
                  _.cssTransitions = true;
              }
          }
  
          if ( _.options.fade ) {
              if ( typeof _.options.zIndex === 'number' ) {
                  if( _.options.zIndex < 3 ) {
                      _.options.zIndex = 3;
                  }
              } else {
                  _.options.zIndex = _.defaults.zIndex;
              }
          }
  
          if (bodyStyle.OTransform !== undefined) {
              _.animType = 'OTransform';
              _.transformType = '-o-transform';
              _.transitionType = 'OTransition';
              if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
          }
          if (bodyStyle.MozTransform !== undefined) {
              _.animType = 'MozTransform';
              _.transformType = '-moz-transform';
              _.transitionType = 'MozTransition';
              if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
          }
          if (bodyStyle.webkitTransform !== undefined) {
              _.animType = 'webkitTransform';
              _.transformType = '-webkit-transform';
              _.transitionType = 'webkitTransition';
              if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
          }
          if (bodyStyle.msTransform !== undefined) {
              _.animType = 'msTransform';
              _.transformType = '-ms-transform';
              _.transitionType = 'msTransition';
              if (bodyStyle.msTransform === undefined) _.animType = false;
          }
          if (bodyStyle.transform !== undefined && _.animType !== false) {
              _.animType = 'transform';
              _.transformType = 'transform';
              _.transitionType = 'transition';
          }
          _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
      };
  
  
      Slick.prototype.setSlideClasses = function(index) {
  
          var _ = this,
              centerOffset, allSlides, indexOffset, remainder;
  
          allSlides = _.$slider
              .find('.slick-slide')
              .removeClass('slick-active slick-center slick-current')
              .attr('aria-hidden', 'true');
  
          _.$slides
              .eq(index)
              .addClass('slick-current');
  
          if (_.options.centerMode === true) {
  
              centerOffset = Math.floor(_.options.slidesToShow / 2);
  
              if (_.options.infinite === true) {
  
                  if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
  
                      _.$slides
                          .slice(index - centerOffset, index + centerOffset + 1)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');
  
                  } else {
  
                      indexOffset = _.options.slidesToShow + index;
                      allSlides
                          .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');
  
                  }
  
                  if (index === 0) {
  
                      allSlides
                          .eq(allSlides.length - 1 - _.options.slidesToShow)
                          .addClass('slick-center');
  
                  } else if (index === _.slideCount - 1) {
  
                      allSlides
                          .eq(_.options.slidesToShow)
                          .addClass('slick-center');
  
                  }
  
              }
  
              _.$slides
                  .eq(index)
                  .addClass('slick-center');
  
          } else {
  
              if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {
  
                  _.$slides
                      .slice(index, index + _.options.slidesToShow)
                      .addClass('slick-active')
                      .attr('aria-hidden', 'false');
  
              } else if (allSlides.length <= _.options.slidesToShow) {
  
                  allSlides
                      .addClass('slick-active')
                      .attr('aria-hidden', 'false');
  
              } else {
  
                  remainder = _.slideCount % _.options.slidesToShow;
                  indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;
  
                  if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {
  
                      allSlides
                          .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');
  
                  } else {
  
                      allSlides
                          .slice(indexOffset, indexOffset + _.options.slidesToShow)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');
  
                  }
  
              }
  
          }
  
          if (_.options.lazyLoad === 'ondemand') {
              _.lazyLoad();
          }
  
      };
  
      Slick.prototype.setupInfinite = function() {
  
          var _ = this,
              i, slideIndex, infiniteCount;
  
          if (_.options.fade === true) {
              _.options.centerMode = false;
          }
  
          if (_.options.infinite === true && _.options.fade === false) {
  
              slideIndex = null;
  
              if (_.slideCount > _.options.slidesToShow) {
  
                  if (_.options.centerMode === true) {
                      infiniteCount = _.options.slidesToShow + 1;
                  } else {
                      infiniteCount = _.options.slidesToShow;
                  }
  
                  for (i = _.slideCount; i > (_.slideCount -
                          infiniteCount); i -= 1) {
                      slideIndex = i - 1;
                      $(_.$slides[slideIndex]).clone(true).attr('id', '')
                          .attr('data-slick-index', slideIndex - _.slideCount)
                          .prependTo(_.$slideTrack).addClass('slick-cloned');
                  }
                  for (i = 0; i < infiniteCount; i += 1) {
                      slideIndex = i;
                      $(_.$slides[slideIndex]).clone(true).attr('id', '')
                          .attr('data-slick-index', slideIndex + _.slideCount)
                          .appendTo(_.$slideTrack).addClass('slick-cloned');
                  }
                  _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                      $(this).attr('id', '');
                  });
  
              }
  
          }
  
      };
  
      Slick.prototype.interrupt = function( toggle ) {
  
          var _ = this;
  
          if( !toggle ) {
              _.autoPlay();
          }
          _.interrupted = toggle;
  
      };
  
      Slick.prototype.selectHandler = function(event) {
  
          var _ = this;
  
          var targetElement =
              $(event.target).is('.slick-slide') ?
                  $(event.target) :
                  $(event.target).parents('.slick-slide');
  
          var index = parseInt(targetElement.attr('data-slick-index'));
  
          if (!index) index = 0;
  
          if (_.slideCount <= _.options.slidesToShow) {
  
              _.setSlideClasses(index);
              _.asNavFor(index);
              return;
  
          }
  
          _.slideHandler(index);
  
      };
  
      Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
  
          var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
              _ = this, navTarget;
  
          sync = sync || false;
  
          if (_.animating === true && _.options.waitForAnimate === true) {
              return;
          }
  
          if (_.options.fade === true && _.currentSlide === index) {
              return;
          }
  
          if (_.slideCount <= _.options.slidesToShow) {
              return;
          }
  
          if (sync === false) {
              _.asNavFor(index);
          }
  
          targetSlide = index;
          targetLeft = _.getLeft(targetSlide);
          slideLeft = _.getLeft(_.currentSlide);
  
          _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
  
          if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
              if (_.options.fade === false) {
                  targetSlide = _.currentSlide;
                  if (dontAnimate !== true) {
                      _.animateSlide(slideLeft, function() {
                          _.postSlide(targetSlide);
                      });
                  } else {
                      _.postSlide(targetSlide);
                  }
              }
              return;
          } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
              if (_.options.fade === false) {
                  targetSlide = _.currentSlide;
                  if (dontAnimate !== true) {
                      _.animateSlide(slideLeft, function() {
                          _.postSlide(targetSlide);
                      });
                  } else {
                      _.postSlide(targetSlide);
                  }
              }
              return;
          }
  
          if ( _.options.autoplay ) {
              clearInterval(_.autoPlayTimer);
          }
  
          if (targetSlide < 0) {
              if (_.slideCount % _.options.slidesToScroll !== 0) {
                  animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
              } else {
                  animSlide = _.slideCount + targetSlide;
              }
          } else if (targetSlide >= _.slideCount) {
              if (_.slideCount % _.options.slidesToScroll !== 0) {
                  animSlide = 0;
              } else {
                  animSlide = targetSlide - _.slideCount;
              }
          } else {
              animSlide = targetSlide;
          }
  
          _.animating = true;
  
          _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);
  
          oldSlide = _.currentSlide;
          _.currentSlide = animSlide;
  
          _.setSlideClasses(_.currentSlide);
  
          if ( _.options.asNavFor ) {
  
              navTarget = _.getNavTarget();
              navTarget = navTarget.slick('getSlick');
  
              if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                  navTarget.setSlideClasses(_.currentSlide);
              }
  
          }
  
          _.updateDots();
          _.updateArrows();
  
          if (_.options.fade === true) {
              if (dontAnimate !== true) {
  
                  _.fadeSlideOut(oldSlide);
  
                  _.fadeSlide(animSlide, function() {
                      _.postSlide(animSlide);
                  });
  
              } else {
                  _.postSlide(animSlide);
              }
              _.animateHeight();
              return;
          }
  
          if (dontAnimate !== true) {
              _.animateSlide(targetLeft, function() {
                  _.postSlide(animSlide);
              });
          } else {
              _.postSlide(animSlide);
          }
  
      };
  
      Slick.prototype.startLoad = function() {
  
          var _ = this;
  
          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
  
              _.$prevArrow.hide();
              _.$nextArrow.hide();
  
          }
  
          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
  
              _.$dots.hide();
  
          }
  
          _.$slider.addClass('slick-loading');
  
      };
  
      Slick.prototype.swipeDirection = function() {
  
          var xDist, yDist, r, swipeAngle, _ = this;
  
          xDist = _.touchObject.startX - _.touchObject.curX;
          yDist = _.touchObject.startY - _.touchObject.curY;
          r = Math.atan2(yDist, xDist);
  
          swipeAngle = Math.round(r * 180 / Math.PI);
          if (swipeAngle < 0) {
              swipeAngle = 360 - Math.abs(swipeAngle);
          }
  
          if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
              return (_.options.rtl === false ? 'left' : 'right');
          }
          if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
              return (_.options.rtl === false ? 'left' : 'right');
          }
          if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
              return (_.options.rtl === false ? 'right' : 'left');
          }
          if (_.options.verticalSwiping === true) {
              if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                  return 'down';
              } else {
                  return 'up';
              }
          }
  
          return 'vertical';
  
      };
  
      Slick.prototype.swipeEnd = function(event) {
  
          var _ = this,
              slideCount,
              direction;
  
          _.dragging = false;
          _.interrupted = false;
          _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;
  
          if ( _.touchObject.curX === undefined ) {
              return false;
          }
  
          if ( _.touchObject.edgeHit === true ) {
              _.$slider.trigger('edge', [_, _.swipeDirection() ]);
          }
  
          if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {
  
              direction = _.swipeDirection();
  
              switch ( direction ) {
  
                  case 'left':
                  case 'down':
  
                      slideCount =
                          _.options.swipeToSlide ?
                              _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                              _.currentSlide + _.getSlideCount();
  
                      _.currentDirection = 0;
  
                      break;
  
                  case 'right':
                  case 'up':
  
                      slideCount =
                          _.options.swipeToSlide ?
                              _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                              _.currentSlide - _.getSlideCount();
  
                      _.currentDirection = 1;
  
                      break;
  
                  default:
  
  
              }
  
              if( direction != 'vertical' ) {
  
                  _.slideHandler( slideCount );
                  _.touchObject = {};
                  _.$slider.trigger('swipe', [_, direction ]);
  
              }
  
          } else {
  
              if ( _.touchObject.startX !== _.touchObject.curX ) {
  
                  _.slideHandler( _.currentSlide );
                  _.touchObject = {};
  
              }
  
          }
  
      };
  
      Slick.prototype.swipeHandler = function(event) {
  
          var _ = this;
  
          if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
              return;
          } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
              return;
          }
  
          _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
              event.originalEvent.touches.length : 1;
  
          _.touchObject.minSwipe = _.listWidth / _.options
              .touchThreshold;
  
          if (_.options.verticalSwiping === true) {
              _.touchObject.minSwipe = _.listHeight / _.options
                  .touchThreshold;
          }
  
          switch (event.data.action) {
  
              case 'start':
                  _.swipeStart(event);
                  break;
  
              case 'move':
                  _.swipeMove(event);
                  break;
  
              case 'end':
                  _.swipeEnd(event);
                  break;
  
          }
  
      };
  
      Slick.prototype.swipeMove = function(event) {
  
          var _ = this,
              edgeWasHit = false,
              curLeft, swipeDirection, swipeLength, positionOffset, touches;
  
          touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;
  
          if (!_.dragging || touches && touches.length !== 1) {
              return false;
          }
  
          curLeft = _.getLeft(_.currentSlide);
  
          _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
          _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
  
          _.touchObject.swipeLength = Math.round(Math.sqrt(
              Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
  
          if (_.options.verticalSwiping === true) {
              _.touchObject.swipeLength = Math.round(Math.sqrt(
                  Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
          }
  
          swipeDirection = _.swipeDirection();
  
          if (swipeDirection === 'vertical') {
              return;
          }
  
          if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
              event.preventDefault();
          }
  
          positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
          if (_.options.verticalSwiping === true) {
              positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
          }
  
  
          swipeLength = _.touchObject.swipeLength;
  
          _.touchObject.edgeHit = false;
  
          if (_.options.infinite === false) {
              if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                  swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                  _.touchObject.edgeHit = true;
              }
          }
  
          if (_.options.vertical === false) {
              _.swipeLeft = curLeft + swipeLength * positionOffset;
          } else {
              _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
          }
          if (_.options.verticalSwiping === true) {
              _.swipeLeft = curLeft + swipeLength * positionOffset;
          }
  
          if (_.options.fade === true || _.options.touchMove === false) {
              return false;
          }
  
          if (_.animating === true) {
              _.swipeLeft = null;
              return false;
          }
  
          _.setCSS(_.swipeLeft);
  
      };
  
      Slick.prototype.swipeStart = function(event) {
  
          var _ = this,
              touches;
  
          _.interrupted = true;
  
          if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
              _.touchObject = {};
              return false;
          }
  
          if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
              touches = event.originalEvent.touches[0];
          }
  
          _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
          _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
  
          _.dragging = true;
  
      };
  
      Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
  
          var _ = this;
  
          if (_.$slidesCache !== null) {
  
              _.unload();
  
              _.$slideTrack.children(this.options.slide).detach();
  
              _.$slidesCache.appendTo(_.$slideTrack);
  
              _.reinit();
  
          }
  
      };
  
      Slick.prototype.unload = function() {
  
          var _ = this;
  
          $('.slick-cloned', _.$slider).remove();
  
          if (_.$dots) {
              _.$dots.remove();
          }
  
          if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
              _.$prevArrow.remove();
          }
  
          if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
              _.$nextArrow.remove();
          }
  
          _.$slides
              .removeClass('slick-slide slick-active slick-visible slick-current')
              .attr('aria-hidden', 'true')
              .css('width', '');
  
      };
  
      Slick.prototype.unslick = function(fromBreakpoint) {
  
          var _ = this;
          _.$slider.trigger('unslick', [_, fromBreakpoint]);
          _.destroy();
  
      };
  
      Slick.prototype.updateArrows = function() {
  
          var _ = this,
              centerOffset;
  
          centerOffset = Math.floor(_.options.slidesToShow / 2);
  
          if ( _.options.arrows === true &&
              _.slideCount > _.options.slidesToShow &&
              !_.options.infinite ) {
  
              _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
              _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
  
              if (_.currentSlide === 0) {
  
                  _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                  _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
  
              } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
  
                  _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                  _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
  
              } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
  
                  _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                  _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
  
              }
  
          }
  
      };
  
      Slick.prototype.updateDots = function() {
  
          var _ = this;
  
          if (_.$dots !== null) {
  
              _.$dots
                  .find('li')
                  .removeClass('slick-active')
                  .attr('aria-hidden', 'true');
  
              _.$dots
                  .find('li')
                  .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                  .addClass('slick-active')
                  .attr('aria-hidden', 'false');
  
          }
  
      };
  
      Slick.prototype.visibility = function() {
  
          var _ = this;
  
          if ( _.options.autoplay ) {
  
              if ( document[_.hidden] ) {
  
                  _.interrupted = true;
  
              } else {
  
                  _.interrupted = false;
  
              }
  
          }
  
      };
  
      $.fn.slick = function() {
          var _ = this,
              opt = arguments[0],
              args = Array.prototype.slice.call(arguments, 1),
              l = _.length,
              i,
              ret;
          for (i = 0; i < l; i++) {
              if (typeof opt == 'object' || typeof opt == 'undefined')
                  _[i].slick = new Slick(_[i], opt);
              else
                  ret = _[i].slick[opt].apply(_[i].slick, args);
              if (typeof ret != 'undefined') return ret;
          }
          return _;
      };
  
  }));
  

});

;/*!/node_modules/glpb-components-common/src/components/glpb-carousel/glpb-carousel.js*/
define('common:node_modules/glpb-components-common/src/components/glpb-carousel/glpb-carousel', function(require, exports, module) {

  /**
   * 轮播图
   * Created by jess on 16/8/22.
   */
  
  var ComponentBase = require('common:node_modules/glpb-components-common/src/base/base');
  
  var slick = require('common:node_modules/glpb-slick-carousel/slick/slick');
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  '';
  
  var $ = ComponentBase.$;
  
  var tpl = '<div class="glpb-fn-animate-item"><div class="glpb-carousel-inner"></div></div>';
  
  var Carousel = ComponentBase.extend({
      componentName: 'glpb_carousel',
      componentNameZh: '轮播图',
      componentCategory: ComponentBase.CATEGORY.UI,
      platform: ComponentBase.PLATFORM.RESPONSIVE,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              height: '200px',
              width: '100%',
              margin: '0 auto',
              animation: 'none'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
  
              'list__$$comment': '轮播图的配置',
              list: [{
                  "imageURL_$$comment": '要展示的图片URL地址',
                  imageURL: '//placehold.it/350x150',
                  'href__$$comment': '点击图片要跳转的URL',
                  href: ''
              }, {
                  "imageURL_$$comment": '要展示的图片URL地址',
                  imageURL: '//placehold.it/350x150',
                  'href__$$comment': '点击图片要跳转的URL',
                  href: ''
              }, {
                  "imageURL_$$comment": '要展示的图片URL地址',
                  imageURL: '//placehold.it/350x150',
                  'href__$$comment': '点击图片要跳转的URL',
                  href: ''
              }],
  
              'setting__$$comment': '轮播图插件的配置,一般**不用**修改!!',
              setting: {
                  infinite: true,
                  dots: false,
                  speed: 300
              }
  
          };
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var $el = $(tpl).addClass(cssClass).css(this.style);
          var $content = $('.glpb-carousel-inner', $el);
          this.$el = $el;
          this.$content = $content;
      },
  
      bindComponentEvent: function bindComponentEvent() {
          this.updateSlick();
      },
  
      //渲染编辑模式下, 额外的DOM组件
      renderEditorHelper: function renderEditorHelper() {
          var $el = this.$el;
          var $editorSettingWrap = this.$getEditSettingWrap();
          $el.append($editorSettingWrap);
      },
  
      setStyle: function setStyle(newStyle) {
          var lastStyle = this.style;
          this.style = $.extend({}, this.style, newStyle);
  
          var lastCssStyle = this.translateStyle(lastStyle);
          var newCssStyle = this.translateStyle(newStyle);
  
          this.$el.css(newCssStyle);
  
          if (lastCssStyle.width !== newCssStyle.width || lastCssStyle.height !== newCssStyle.height) {
              this.updateSlick();
          }
      },
  
      setData: function setData(data) {
          this.data = $.extend(this.data, data);
          this.updateSlick();
      },
  
      updateSlick: function updateSlick() {
          var data = this.data || {};
          try {
              this.$content.slick('unslick').hide();
          } catch (e) {}
  
          this.updateDOM();
          var setting = data.setting || {};
          this.$content.show().slick({
              dots: setting.dots,
              infinite: setting.infinite,
              speed: setting.speed,
              arrows: false
          });
      },
  
      updateDOM: function updateDOM() {
          var style = this.style;
          var data = this.data || {};
          var list = data.list || [];
          var html = '';
          for (var i = 0, len = list.length; i < len; i++) {
              var obj = list[i];
              var href = obj.href;
              if (href) {
                  html += '<div style="width:' + style.width + ';height:' + style.height + ';" class="glpb-carousel-item"><a href="' + href + '"><img src="' + obj.imageURL + '" /></a></div>';
              } else {
                  html += '<div style="width:' + style.width + ';height:' + style.height + ';" class="glpb-carousel-item"><img src="' + obj.imageURL + '" /></div>';
              }
          }
  
          this.$content.html(html);
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content.slick('unslick');
          this.$content.off();
          this.$content = null;
      }
  });
  
  module.exports = Carousel;

});

;/*!/node_modules/glpb-components-common/src/components/glpb-rich-text/glpb-rich-text.js*/
define('common:node_modules/glpb-components-common/src/components/glpb-rich-text/glpb-rich-text', function(require, exports, module) {

  /**
   * 代表一个 富文本 区域块
   * Created by jess on 16/8/18.
   */
  
  var ComponentBase = require('common:node_modules/glpb-components-common/src/base/base');
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  '';
  
  var $ = ComponentBase.$;
  
  var tpl = '<div class="glpb-fn-animate-item"><div class="glpb-content"></div></div>';
  
  var RichText = ComponentBase.extend({
      componentName: 'glpb_rich_text',
      componentNameZh: '富文本块',
      componentCategory: ComponentBase.CATEGORY.UI,
      platform: ComponentBase.PLATFORM.RESPONSIVE,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              position: 'relative',
              height: 'auto',
              width: 'auto',
              padding: '0',
              margin: '0 auto',
              fontSize: 'inherit',
              lineHeight: '1.5',
              color: '#000',
              background: {
                  backgroundColor: 'transparent'
              },
              textAlign: 'left',
              animation: 'none',
              zIndex: 10
          };
      },
  
      getDefaultData: function getDefaultData() {
          return '这里是富文本的内容, 记得修改默认值哦 :) ';
      },
  
      getDataType: function getDataType() {
          return ComponentBase.DATA_TYPES.RICH_TEXT;
      },
  
      getData: function getData() {
          return this.data || '';
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass);
          var $content = $('.glpb-content', $el);
          this.$el = $el;
          this.$content = $content;
  
          // $content.css( cssStyle );
          this.updateCSSStyle(cssStyle);
  
          this.setData(data);
      },
  
      //渲染编辑模式下, 额外的DOM组件
      renderEditorHelper: function renderEditorHelper() {
          var $el = this.$el;
          var $editorSettingWrap = this.$getEditSettingWrap();
          $el.append($editorSettingWrap);
      },
  
      updateCSSStyle: function updateCSSStyle(cssStyle) {
          this.styleManager.update('#' + this.componentId + '>.glpb-content', cssStyle);
          // this.$content.css( style );
      },
  
      setData: function setData(data) {
          this.data = data || '';
          //处理HTML中可能包含的系统定义的变量
          data = utils.translateString(this.data);
          this.$content.html(data);
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      }
  });
  
  module.exports = RichText;

});

;/*!/node_modules/glpb-components-common/src/components/link-button/link-button.js*/
define('common:node_modules/glpb-components-common/src/components/link-button/link-button', function(require, exports, module) {

  /**
   * 一个按钮样式的 <a> 链接, 可以设置 :hover 的样式
   * Created by jess on 2016/10/8.
   */
  
  var ComponentBase = require('common:node_modules/glpb-components-common/src/base/base');
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  '';
  
  var $ = ComponentBase.$;
  
  var tpl = '<div class="glpb-fn-animate-item"><a class="glpb-content"></a></div>';
  
  var LinkButton = ComponentBase.extend({
      componentName: 'glpb_link_button',
      componentNameZh: '带链接按钮',
      componentCategory: ComponentBase.CATEGORY.UI,
      platform: ComponentBase.PLATFORM.RESPONSIVE,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              position: 'relative',
              height: '88px',
              width: '80%',
              padding: '0',
              margin: '0 auto',
              fontSize: 'inherit',
              lineHeight: '88px',
              'color|>[DOT]glpb-content': '#000',
              'color|>[DOT]glpb-content:hover': '#000',
              background: {
                  backgroundColor: 'transparent'
              },
              'background|:hover': {
                  backgroundColor: 'transparent'
              },
              textAlign: 'center',
              animation: 'none',
              textDecoration: 'none',
              borderRadius: '5px',
              zIndex: 10
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "href_$$comment": '要跳转的URL地址',
              href: '#',
              'title__$$comment': '鼠标移动到按钮上时,显示的文字',
              title: '',
              'target_$$comment': '新页面打开方式: _blank(新tab页); _self(当前页)',
              target: '_blank',
              'text_$$comment': '按钮上显示的文字',
              text: '按钮文字'
          };
      },
  
      getDataType: function getDataType() {
          return ComponentBase.DATA_TYPES.JSON;
      },
  
      getData: function getData() {
          return this.data || {};
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass);
          var $content = $('.glpb-content', $el);
          this.$el = $el;
          this.$content = $content;
  
          // $content.css( cssStyle );
          this.updateCSSStyle(cssStyle);
  
          this.setData(data);
      },
  
      updateCSSStyle: function updateCSSStyle(cssStyle) {
          this.styleManager.update('#' + this.componentId, cssStyle);
          // this.$content.css( style );
      },
  
      setData: function setData(data) {
          this.data = $.extend(this.data, data);
  
          data = this.data;
          this.$content.attr({
              title: data.title || '',
              href: data.href || ''
          }).html(data.text);
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      }
  });
  
  module.exports = LinkButton;

});

;/*!/node_modules/glpb-components-common/src/index.js*/
define('common:node_modules/glpb-components-common/src/index', function(require, exports, module) {

  /**
   * Created by jess on 16/8/19.
   */
  
  var $ = window.jQuery;
  
  var utils = require('common:node_modules/glpb-components-common/src/utils/utils');
  
  var Cookies = require('common:node_modules/glpb-components-common/src/utils/js-cookie');
  
  var parameter = require('common:node_modules/glpb-components-common/src/utils/parameter-utils');
  
  var rsaCrypt = require('common:node_modules/glpb-components-common/src/rsa/rsaCrypt');
  
  var ValidateProvider = require('common:node_modules/glpb-components-common/src/ValidateProvider/ValidateProvider');
  
  var StyleManager = require('common:node_modules/glpb-components-common/src/style-manager/style-manager');
  
  var weStatistic = require('common:node_modules/glpb-components-common/src/weStatistic/weStatistic');
  
  var BaseComponent = require('common:node_modules/glpb-components-common/src/base/base');
  var factory = require('common:node_modules/glpb-components-common/src/component-factory/component-factory');
  var LayoutRow = require('common:node_modules/glpb-components-common/src/components/layout-row/layout-row');
  var LayoutColumn = require('common:node_modules/glpb-components-common/src/components/layout-column/layout-column');
  
  var Image = require('common:node_modules/glpb-components-common/src/components/glpb-image/glpb-image');
  var Carousel = require('common:node_modules/glpb-components-common/src/components/glpb-carousel/glpb-carousel');
  
  var RichText = require('common:node_modules/glpb-components-common/src/components/glpb-rich-text/glpb-rich-text');
  
  var LinkButton = require('common:node_modules/glpb-components-common/src/components/link-button/link-button');
  
  module.exports = {
      "$": $,
      rsaCrypt: rsaCrypt,
      ValidateProvider: ValidateProvider,
      utils: utils,
      StyleManager: StyleManager,
      weStatistic: weStatistic,
      Cookies: Cookies,
      parameter: parameter,
      BaseComponent: BaseComponent,
      factory: factory,
      LayoutRow: LayoutRow,
      LayoutColumn: LayoutColumn,
      Image: Image,
      Carousel: Carousel,
      RichText: RichText,
      LinkButton: LinkButton
  };

});

;/*!/node_modules/glpb-we-pc/src/service/service-base.js*/
define('common:node_modules/glpb-we-pc/src/service/service-base', function(require, exports, module) {

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
  
  /**
   * 负责请求后端服务的基类
   * Created by jess on 16/4/26.
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var Promise = require('common:node_modules/bluebird/js/browser/bluebird');
  
  var ServiceBase = (function () {
      function ServiceBase(apiConf, adapter) {
          _classCallCheck(this, ServiceBase);
  
          var that = this;
  
          for (var apiKey in apiConf) {
              if (apiConf.hasOwnProperty(apiKey)) {
                  that[apiKey] = (function (conf) {
                      return function (data) {
                          return that.request(conf, data);
                      };
                  })(apiConf[apiKey]);
              }
          }
  
          this.adapter = $.extend({}, ServiceBase.prototype.adapter, adapter);
      }
  
      //请求出错
  
      /**
       * 请求后端服务
       * @param conf {object} 后端服务的配置, 包括请求地址, 返回数据类型, 请求method, 返回数据的 适配器 等
       * @param data {object} 请求的参数
       * @return {Promise} 返回promise对象
       */
  
      ServiceBase.prototype.request = function request(conf, data) {
          var _this = this;
  
          var finalData = $.extend({}, conf.data || {}, data);
  
          return new Promise(function (resolve, reject) {
  
              var options = {
                  url: conf.url,
                  data: finalData,
                  method: conf.method || conf.type,
                  cache: conf.cache === true,
                  dataType: conf.dataType,
                  error: function error(xhr) {
                      resolve({
                          requestStatus: _this.STATUS.ERROR
                      });
                  },
  
                  success: function success(data) {
                      if (typeof _this.adapter[conf.adapter] === 'function') {
                          data = _this.adapter[conf.adapter].call(_this, data);
                      }
                      resolve({
                          requestStatus: _this.STATUS.SUCCESS,
                          data: data
                      });
                  }
              };
  
              $.ajax(options);
          });
      };
  
      return ServiceBase;
  })();
  
  ServiceBase.prototype.STATUS = {
      ERROR: 'error',
      SUCCESS: 'success'
  };
  
  //数据适配函数
  ServiceBase.prototype.adapter = {};
  
  module.exports = ServiceBase;

});

;/*!/node_modules/glpb-we-pc/src/service/sub/passport-service.js*/
define('common:node_modules/glpb-we-pc/src/service/sub/passport-service', function(require, exports, module) {

  
  /**
   * 请求注册相关的后端API的封装类
   * Created by 王半仙 on 16/6/13.
   */
  
  var ServiceBase = require('common:node_modules/glpb-we-pc/src/service/service-base');
  
  var adapters = {};
  
  var apiConf = {
  
      /* 注册 获取手机验证码 */
  
      register: {
          url: '/mo/passport/register/doRegister',
          method: 'POST',
          dataType: 'json'
      },
  
      smsCode: {
          url: '/mo/passport/register/getSmsCode',
          method: 'POST',
          dataType: 'json'
      },
  
      verifySmsCode: {
          url: '/mo/passport/register/verifySmsCode',
          method: 'GET',
          dataType: 'json'
      },
  
      /**获取signature*/
      getWxSignature: {
          url: '/mo/passport/wx/signature',
          method: 'GET',
          dataType: 'json'
      }
  
  };
  
  var singleton = new ServiceBase(apiConf, adapters);
  
  module.exports = singleton;

});

;/*!/node_modules/glpb-we-pc/src/service/sub/fund-service.js*/
define('common:node_modules/glpb-we-pc/src/service/sub/fund-service', function(require, exports, module) {

  /**
   * 基金相关的异步接口
   * Created by jess on 16/6/29.
   */
  
  var ServiceBase = require('common:node_modules/glpb-we-pc/src/service/service-base');
  
  var adapters = {};
  
  var MOBILE_URL_PREFIX = '/pc';
  
  var apiConf = {
  
      getFundDetail: {
          url: MOBILE_URL_PREFIX + '/fund/fund/product/detail',
          method: 'GET',
          dataType: 'json',
          data: {}
      },
  
      //批量获取多个基金的详情, 用于基金列表页的显示
      getListBatchDetail: {
          url: MOBILE_URL_PREFIX + '/fund/fund/listBatchDetail',
          method: 'GET',
          dataType: 'json',
          data: {}
      }
  
  };
  
  var utilService = new ServiceBase(apiConf, adapters);
  
  module.exports = utilService;

});

;/*!/node_modules/glpb-we-pc/src/service/sub/exchange-service.js*/
define('common:node_modules/glpb-we-pc/src/service/sub/exchange-service', function(require, exports, module) {

  /**
   * 交易所相关的异步接口
   * Created by jess on 16/6/29.
   */
  
  var ServiceBase = require('common:node_modules/glpb-we-pc/src/service/service-base');
  
  var adapters = {};
  
  var MOBILE_URL_PREFIX = '/pc';
  
  var apiConf = {
  
      //获取单个交易所的详情
      getExchangeDetail: {
          url: MOBILE_URL_PREFIX + '/exchange/product/detail',
          method: 'GET',
          dataType: 'json',
          data: {}
      },
  
      //批量获取多个交易所的详情, 用于交易所列表页的显示
      getListBatchDetail: {
          url: MOBILE_URL_PREFIX + '/exchange/product/listBatchDetail',
          method: 'GET',
          dataType: 'json',
          data: {}
      }
  
  };
  
  var utilService = new ServiceBase(apiConf, adapters);
  
  module.exports = utilService;

});

;/*!/node_modules/glpb-we-pc/src/service/sub/user-service.js*/
define('common:node_modules/glpb-we-pc/src/service/sub/user-service', function(require, exports, module) {

  /**
   * 获取用户相关的异步接口
   * Created by jess on 16/6/29.
   */
  
  var ServiceBase = require('common:node_modules/glpb-we-pc/src/service/service-base');
  
  var adapters = {};
  
  var MOBILE_URL_PREFIX = '/pc';
  
  var apiConf = {
  
      //获取单个交易所的详情
      getUserInfo: {
          url: MOBILE_URL_PREFIX + '/ppb/user/info',
          method: 'GET',
          dataType: 'json',
          data: {}
      }
  
  };
  
  var service = new ServiceBase(apiConf, adapters);
  
  module.exports = service;

});

;/*!/node_modules/glpb-we-pc/src/service/sub/register-service.js*/
define('common:node_modules/glpb-we-pc/src/service/sub/register-service', function(require, exports, module) {

  /**
   * Created by 王半仙 on 2016/12/28.
   * LP 注册接口
   */
  
  var ServiceBase = require('common:node_modules/glpb-we-pc/src/service/service-base');
  
  var adapters = {};
  
  var MOBILE_URL_PREFIX = '/pc';
  
  var apiConf = {
      /* 验证手机号是否存在 */
      checkMobile: {
          url: MOBILE_URL_PREFIX + '/home/register/checkMobile',
          method: 'GET',
          dataType: 'json'
      },
      /* 发送短信验证码 */
      sendPhoneCode: {
          url: MOBILE_URL_PREFIX + '/home/register/sendPhoneCode',
          method: 'POST',
          dataType: 'json'
      },
  
      /* 注册*/
      rrdRegister: {
          url: MOBILE_URL_PREFIX + '/passport/index/doRegister',
          method: 'POST',
          dataType: 'json'
      }
  };
  
  var utilService = new ServiceBase(apiConf, adapters);
  
  module.exports = utilService;

});

;/*!/node_modules/glpb-we-pc/src/service/sub/uPlan-service.js*/
define('common:node_modules/glpb-we-pc/src/service/sub/uPlan-service', function(require, exports, module) {

  /**
   * U计划接口
   * Created by liucong，2016-12-29 19:15
   **/
  
  var ServiceBase = require('common:node_modules/glpb-we-pc/src/service/service-base');
  
  var adapters = {};
  
  var PC_URL_PREFIX = '/pc';
  
  var apiConf = {
      /* U计划列表 */
      getUPlanListByCondition: {
          url: PC_URL_PREFIX + '/p2p/uPlan/getUPlanList',
          method: 'GET',
          dataType: 'json'
      },
      getAutoInvestPlan: {
          url: PC_URL_PREFIX + '/p2p/uPlan/getAutoInvestPlan',
          method: 'GET',
          dataType: 'json'
      },
      /*优选计划*/
      getUplanPremium: {
          url: PC_URL_PREFIX + '/ppb/plan/premium',
          method: 'GET',
          dataType: 'json'
      },
      getFinancePlanListForIndex: {
          url: PC_URL_PREFIX + '/ppb/plan/getFinancePlanByType',
          method: 'GET',
          dataType: 'json'
      },
      //获取公司数据
      getCompanyInfo: {
          url: PC_URL_PREFIX + '/ppb/plan/getIndexTrade',
          method: 'GET',
          dataType: 'json'
      }
  };
  
  var utilService = new ServiceBase(apiConf, adapters);
  
  module.exports = utilService;

});

;/*!/node_modules/glpb-we-pc/src/service/sub/lp-service.js*/
define('common:node_modules/glpb-we-pc/src/service/sub/lp-service', function(require, exports, module) {

  /**
   * 基金相关的异步接口
   * Created by LILING on 17/12/30.
   */
  
  var ServiceBase = require('common:node_modules/glpb-we-pc/src/service/service-base');
  
  var adapters = {};
  
  var PC_URL_PREFIX = '/pc';
  
  var apiConf = {
  
      /*lp新人专享*/
      getNewer: {
          url: PC_URL_PREFIX + '/home/home/uNewer',
          method: 'GET',
          dataType: 'json'
      }
  
  };
  
  var utilService = new ServiceBase(apiConf, adapters);
  
  module.exports = utilService;

});

;/*!/node_modules/glpb-we-pc/src/service/service-factory.js*/
define('common:node_modules/glpb-we-pc/src/service/service-factory', function(require, exports, module) {

  /**
   * 维护所有的service的工厂
   * Created by 王半仙 on 16/6/13.
   */
  
  var passportService = require('common:node_modules/glpb-we-pc/src/service/sub/passport-service');
  
  var fundService = require('common:node_modules/glpb-we-pc/src/service/sub/fund-service');
  var exchangeService = require('common:node_modules/glpb-we-pc/src/service/sub/exchange-service');
  var userService = require('common:node_modules/glpb-we-pc/src/service/sub/user-service');
  var registerService = require('common:node_modules/glpb-we-pc/src/service/sub/register-service');
  var uPlanService = require('common:node_modules/glpb-we-pc/src/service/sub/uPlan-service');
  var lpService = require('common:node_modules/glpb-we-pc/src/service/sub/lp-service');
  
  var serviceMap = {
      passport: passportService,
      user: userService,
      fund: fundService,
      exchange: exchangeService,
      register: registerService,
      uPlan: uPlanService,
      lp: lpService
  
  };
  
  var singleton = {
  
      getService: function getService(name) {
          return serviceMap[name];
      }
  
  };
  
  module.exports = singleton;

});

;/*!/node_modules/glpb-we-pc/src/common/data-manager/data-manager.js*/
define('common:node_modules/glpb-we-pc/src/common/data-manager/data-manager', function(require, exports, module) {

  /**
   * 负责请求并缓存页面级的通用后端数据
   * Created by jess on 2016/9/22.
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var $ = glpbCommon.$;
  
  var Promise = window.Promise;
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  var userService = serviceFactory.getService('user');
  
  function DataManager(initData) {
  
      var data = {};
  
      //如果没有传, 从window上获取
      initData = initData || window.glpbTplData;
  
      if (initData) {
          //随着页面返回的一些后端数据
          data = $.extend(data, initData);
      }
  
      this._data = data;
  }
  
  $.extend(DataManager.prototype, {
  
      //获取当前登录用户的信息
      getUserInfo: function getUserInfo() {
          var data = this._data;
          if (data.hasOwnProperty('user')) {
              return Promise.resolve(data.user);
          }
          data.user = userService.getUserInfo().then(function (out) {
              if (out.requestStatus === userService.STATUS.SUCCESS) {
                  var res = out.data;
                  if (res.status === 0) {
                      data.user = res.data;
                      return data.user;
                  }
                  return Promise.reject(new Error(res.message));
              }
              return Promise.reject(new Error('请求用户信息异常'));
          })['catch'](function (e) {
              data.user = null;
              return Promise.reject(e);
          });
          return data.user;
      }
  
  });
  
  var instance = null;
  
  module.exports = {
  
      getInstance: function getInstance(initData) {
          if (instance) {
              return instance;
          }
          instance = new DataManager(initData);
          return instance;
      }
  
  };

});

;/*!/node_modules/glpb-we-pc/src/components/exchange-item-list/exchange-item-list.js*/
define('common:node_modules/glpb-we-pc/src/components/exchange-item-list/exchange-item-list', function(require, exports, module) {

  /**
   * 交易所(定期理财)产品的列表
   * Created by jess on 16/9/5.
   */
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var exchangeService = serviceFactory.getService('exchange');
  
  var tpl = '<div><ul class="glpb-exchange-list"></ul></div>';
  
  var editorPlaceHolderImage = '//www.we.com/cms/5788c3322fc6cb3b46b9e7e2/pb/exchange/pc-exchange-list-item.png';
  
  var ExchangeItemList = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_exchange_item_list',
      componentNameZh: 'PC交易所产品列表',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fcfcfc'
              },
              width: 'auto',
              padding: '0',
              margin: '0 auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "exchangeIdList_$$comment": '输入要显示的多个交易所ID',
              exchangeIdList: []
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //交易所列表对应的详细数据
          this.listDetailData = null;
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-exchange-list', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<li><img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="交易所资产列表占位图片(非真实数据)" /></li>').appendTo($content);
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
          var exchangeIdList = data.exchangeIdList || [];
          if (this.isProductionMode() && !this.eventBinded && exchangeIdList.length > 0) {
              //正式环境才绑定事件, 并且Ajax请求每个交易所的详情数据
              this.$content.on('click', '.glpb-exchange-list-item', function (e) {
                  var $target = $(e.currentTarget);
                  var exchangeId = $target.attr('data-exchange-id');
                  that.openExchangeDetail(exchangeId);
              });
  
              this.querySign = utils.generateQuerySign();
              var reqData = {
                  ids: exchangeIdList
              };
              exchangeService.getListBatchDetail(reqData).then(function (reqResult) {
                  if (reqResult.requestStatus === exchangeService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          that.setListDetailData(result.data);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取定义理财数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      /**
       * 调用APP的bridge, 打开APP的交易所详情页
       * @param exchangeId {string} 交易所ID
       */
      openExchangeDetail: function openExchangeDetail(exchangeId) {},
  
      setListDetailData: function setListDetailData(list) {
          list = list || [];
          this.listDetailData = list;
          if (!list || list.length < 1) {
              return this.hide();
          }
  
          var html = '';
          for (var i = 0, len = list.length; i < len; i++) {
              html += this._renderExchangeItem(list[i]);
          }
  
          if (html) {
              this.$content.html(html);
          } else {
              this.hide();
          }
      },
  
      _renderExchangeItem: function _renderExchangeItem(obj) {
  
          var nameEscaped = utils.escapeHTML(obj.productName);
          var sourceEscaped = utils.escapeHTML(obj.projectSource);
  
          var detailURL = '/pc/exchange/product/detail/productNo/' + encodeURIComponent(obj.productNo);
  
          var startSellDate = '';
          var endSellDate = '';
  
          if (obj.startSellingTime) {
              startSellDate = moment(parseInt(obj.startSellingTime, 10)).format('MM.DD');
          }
          if (obj.endSellingTime) {
              endSellDate = moment(parseInt(obj.endSellingTime, 10)).format('MM.DD');
          }
  
          var startAmount = '';
          if (obj.startAmount) {
              startAmount = numeral(obj.startAmount).format('0,0.00');
          }
  
          //募集进度
          var progress = 0;
          var actualAmount = obj.actualAmount;
          var totalAmount = obj.totalAmount;
  
          var temp = actualAmount * 100 / totalAmount;
          if (!isNaN(temp)) {
              var tempStr = temp + '';
              if (tempStr.indexOf('.') >= 0) {
                  //包含小数点, 取一位小数
                  temp = temp.toFixed(1);
              }
              progress = temp;
          }
  
          progress = Math.min(progress, 100);
          progress = Math.max(0, progress);
  
          return '<li class="glpb-exchange-list-item" data-exchange-id="' + obj.productNo + '">\n                        <h2 class="exchange-item-title">\n                            <a href="' + detailURL + '" target="_blank">' + nameEscaped + '</a>\n                        </h2>\n                        <div class="exchange-item-info-main clearfix">\n                            <div class="info-box year-rate-box w127">\n                                <div class="product-year-rate highlight bd"><span class="num-family">' + obj.annualRate + '</span>%</div>\n                                <div class="info">预期年收益</div>\n                            </div>\n                            <div class="info-box product-period-box w191">\n                                <div class="product-period bd"><span class="num-family">' + obj.productPeriod + '</span>天</div>\n                                <div class="info">期限</div>\n                            </div>\n                            <div class="info-box product-start-amount-box w181">\n                                <div class="bd">' + startAmount + '元</div>\n                                <div class="info">起投金额</div>\n                            </div>\n                            <div class="info-box product-source-box w280">\n                                <div class="bd fn-text-overflow">' + sourceEscaped + '</div>\n                                <div class="info">项目来源</div>\n                            </div>\n                            <div class="info-box product-process-box w112 ">\n                                <div class="bd clear fn-clear">\n                                    <div class=" process-text">' + progress + '%</div>\n                                    <div class="process-bar"><div class="process-bar-inner" style="width: ' + progress + '%;"></div></div>\n                                </div>\n                                <div class="info">募集进度</div>\n                            </div>\n                            <div class="info-box product-btn-box w95 ">\n                                <a href="' + detailURL + '" target="_blank" class="buy-btn">投 资</a>\n                            </div>\n                        </div>\n                       \n                </li>';
      }
  });
  
  module.exports = ExchangeItemList;

});

;/*!/node_modules/glpb-we-pc/src/components/lp-header/lp-header.js*/
define('common:node_modules/glpb-we-pc/src/components/lp-header/lp-header', function(require, exports, module) {

  /**
   * LP页面顶部的header区域
   * Created by jess on 2016/9/22.
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var DataManager = require('common:node_modules/glpb-we-pc/src/common/data-manager/data-manager');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var tpl = '<div><div class="glpb-content"></div></div>';
  
  var LandingPageHeader = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_lp_header',
      componentNameZh: 'PC-LP-header',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fff'
              },
              height: '83px',
              width: 'auto',
              padding: '0',
              margin: '0 auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "logoImageURL_$$comment": '公司logo图片的URL',
              logoImageURL: 'https://www.we.com/cms/5864b0d6a24d131067ef7956/logo/logo-new@2x.png',
              logoImageWidth: '90px',
              logoImageHeight: '34px',
              logoImageTop: '24px'
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-content', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          var html = '<a href="/"><img style="width:' + data.logoImageWidth + '; height:' + data.logoImageHeight + '; margin-top:' + data.logoImageTop + ';" class="we-logo" src="' + data.logoImageURL + '" alt="logo" /></a>\n<div class="we-contact">\n<span class="user-abs">已有账号？<a href="/pc/passport/index/login">立即登录</a></span>\n<span class="icon-we-tel-empty"></span>\n<strong class="contact-us">400-090-6600</strong>\n</div>\n';
  
          $content.html(html);
  
          this.$logo = $content.find('.we-logo');
          this.$userAbs = $content.find('.user-abs');
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var _this = this;
  
          var that = this;
          var data = this.data || {};
          if (this.isProductionMode() && !this.eventBinded) {
              (function () {
                  //正式环境才绑定事件, 并且Ajax请求
                  var dataManager = DataManager.getInstance();
  
                  var querySign = _this.querySign = utils.generateQuerySign();
  
                  dataManager.getUserInfo().then(function (user) {
  
                      if (querySign !== that.querySign) {
                          return;
                      }
  
                      if (user) {
                          //当前用户已登录
                          var html = '您好，<a href="/pc/user/account/home/myAccount">' + user.displayName + '</a>';
                          that.$userAbs.html(html);
                      }
                  })['catch'](function (e) {
                      console.warn(e);
                  });
              })();
          }
      },
  
      setData: function setData(data) {
          this.data = $.extend({}, this.data, data);
          data = this.data;
  
          this.$logo.attr('src', data.logoImageURL).css({
              width: data.logoImageWidth,
              height: data.logoImageHeight,
              marginTop: data.logoImageTop
          });
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.querySign = null;
          this.$userAbs = null;
          this.$content = null;
      }
  
  });
  
  module.exports = LandingPageHeader;

});

;/*!/node_modules/glpb-we-pc/src/components/uPlan-item-list/uPlan-item-list.js*/
define('common:node_modules/glpb-we-pc/src/components/uPlan-item-list/uPlan-item-list', function(require, exports, module) {

  /**
   * U计划列表
   * Created by liucong，2016-12-30 11:20
   **/
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var uPlanService = serviceFactory.getService('uPlan');
  
  var tpl = '<div><ul class="glpb-uPlan-list"></ul></div>';
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b3f0c5ee7210913f6796/register/place-holder-img/u-plan-place-holder-img.png';
  
  var UPlanItemList = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_uPlan_item_list',
      componentNameZh: 'PC U计划产品',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#f2f2f2'
              },
              width: 'auto',
              padding: '0',
              margin: '16px auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "uPlanParamsList_$$comment": "输入要显示的多个U计划产品信息，e.g. ['A-1','A-3','B-6','C-12','C-24']",
              uPlanParamsList: []
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //交易所列表对应的详细数据
          this.listDetailData = null;
      },
  
      render: function render() {
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-uPlan-list', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<li><img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="U计划列表占位图片(非真实数据)" /></li>').appendTo($content);
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
          var uPlanParamsList = data.uPlanParamsList || [];
          if (this.isProductionMode() && !this.eventBinded && uPlanParamsList.length > 0) {
              //正式环境才绑定事件, 并且Ajax请求U计划的具体数据
  
              this.querySign = utils.generateQuerySign();
              var reqData = {
                  needUPlanList: uPlanParamsList.join(",")
              };
  
              uPlanService.getUPlanListByCondition(reqData).then(function (reqResult) {
                  if (reqResult.requestStatus === uPlanService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          that.setListDetailData(result.data.list);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取定义理财数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      setListDetailData: function setListDetailData(list) {
          list = list || [];
          if (!list || list.length < 1) {
              return this.hide();
          }
  
          var html = '';
          for (var i = 0, len = list.length; i < len; i++) {
              html += this._renderUPlanItem(list[i]);
          }
  
          if (html) {
              this.$content.html(html);
          } else {
              this.hide();
          }
      },
  
      _renderUPlanItem: function _renderUPlanItem(obj) {
          var getHost = utils.getTplConf();
          var hostName = getHost.we_renrendai_host;
  
          var detailURL = hostName + '/financeplan/' + obj.id;
  
          return '<li class="uPlan-detail clearfix">\n                        <div class="float-left align-left">\n                            <div class="name one-line align-left font-20 color-black" title="' + obj.name + '">' + obj.name + '</div>\n                            <div class="tag one-line align-left font-14 color-orange border-orange" title="' + obj.tag + '">' + (obj.tag || "极致省心 分散投资") + '</div>\n                        </div>\n                        <a class="btn-join"  href="#lp-depository" title="立即加入">立即加入</a>\n                        <dl class="float-right clearfix">\n                            <div class="float-left width-205">\n                                <p class="color-deep-orange font-18"><span class="bigger font-40">' + obj.expectedYearRate + '</span>%</p>\n                                <p class="tips font-14">预期年化利率</p>\n                            </div>\n                \n                            <div class="float-left width-205 border-left-right">\n                                <p class="color-grey font-18"><span class="bigger font-40">' + obj.lockPeriod + '</span>个月</p>\n                                <p class="tips font-14">投资期限</p>\n                            </div>\n                \n                            <div class="float-left width-205">\n                                <p class="color-grey font-18"><span class="bigger font-40">' + obj.minRegisterAmount + '</span>元</p>\n                                <p class="tips font-14">起投金额</p>\n                            </div>\n                        </dl>\n                    </li>';
      }
  });
  
  module.exports = UPlanItemList;

});

;/*!/node_modules/glpb-we-pc/src/components/salary-item-list/salary-item-list.js*/
define('common:node_modules/glpb-we-pc/src/components/salary-item-list/salary-item-list', function(require, exports, module) {

  /**
   * U计划列表
   * Created by liucong，2016-12-30 11:20
   **/
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var uPlanService = serviceFactory.getService('uPlan');
  
  var tpl = '<div><ul class="glpb-salary"></ul></div>';
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b3f0c5ee7210913f6796/register/place-holder-img/salary-place-holder-img.png';
  
  var SalaryItemList = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_salary_item',
      componentNameZh: 'PC 薪计划',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#f2f2f2'
              },
              width: 'auto',
              padding: '0',
              margin: '16px auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {};
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
      },
  
      render: function render() {
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-salary', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<li><img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="薪计划占位图片(非真实数据)" /></li>').appendTo($content);
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
          if (this.isProductionMode() && !this.eventBinded) {
              //正式环境才绑定事件, 并且Ajax请求U计划的具体数据
              this.querySign = utils.generateQuerySign();
              uPlanService.getAutoInvestPlan().then(function (reqResult) {
                  if (reqResult.requestStatus === uPlanService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          that.setListDetailData(result.data);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取定义理财数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      setListDetailData: function setListDetailData(planData) {
          if (!planData) {
              return this.hide();
          }
  
          var html = this._renderSalaryItem(planData);
  
          if (html) {
              this.$content.html(html);
          } else {
              this.hide();
          }
      },
  
      _renderSalaryItem: function _renderSalaryItem(obj) {
          var getHost = utils.getTplConf();
          var hostName = getHost.we_renrendai_host;
  
          var detailURL = hostName + '/autoinvestplan/' + obj.id;
  
          return '<li class="salary-detail clearfix">\n                        <div class="float-left align-left">\n                            <div class="name one-line align-left font-20 color-black" title="薪计划">薪计划</div>\n                            <div class="tag one-line align-left font-14 color-blue border-blue" title="每月一投 零存整取">每月一投 零存整取</div>\n                        </div>\n                        <a class="btn-join" href="#lp-depository" title="立即加入">立即加入</a>\n                        <dl class="float-right clearfix">\n                            <div class="float-left width-205">\n                                <p class="color-deep-orange font-18"><span class="bigger font-40">' + obj.expectedRate + '</span>%</p>\n                                <p class="tips font-14">预期年收益</p>\n                            </div>\n                \n                            <div class="float-left width-205 border-left-right">\n                                <p class="color-grey font-18"><span class="bigger font-40">' + obj.lockPeriod + '</span>个月</p>\n                                <p class="tips font-14">投资期限</p>\n                            </div>\n                \n                            <div class="float-left width-205">\n                                <p class="color-grey font-18"><span class="bigger font-40">' + obj.minRechargeAmount + '</span>元</p>\n                                <p class="tips font-14">起投金额</p>\n                            </div>\n                        </dl>\n                    </li>';
      }
  });
  
  module.exports = SalaryItemList;

});

;/*!/node_modules/glpb-we-pc/src/common-ui/lp-newer-list-item/lp-newer-list-item.js*/
define('common:node_modules/glpb-we-pc/src/common-ui/lp-newer-list-item/lp-newer-list-item', function(require, exports, module) {

  /**
   *  渲染新手专享列表其中一个
   * Created by liling on 2016/12/30.
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  function LpNewerListItem(args) {
  
      this.source = args.source || '';
  
      this.$el = null;
  }
  
  $.extend(LpNewerListItem.prototype, {
  
      $getElement: function $getElement() {
          return this.$el;
      },
  
      render: function render() {
  
          var $el = $('<div class="glpb-ui-newer-list-item"></div>');
  
          this.$el = $el;
      },
  
      setNewerData: function setNewerData(data, iconImageUrl, style) {
          var rate = 0,
              time = 0,
              money = 0,
              id = '';
  
          if (!data) {
              return;
          }
  
          if (data.financePlan_list.length > 0) {
              rate = data.financePlan_list[0].expectedRate;
              time = data.financePlan_list[0].lockPeriod;
              money = data.financePlan_list[0].singleMaxRegisterAmount;
              id = data.financePlan_list[0].id;
          }
  
          var getHost = utils.getTplConf();
          var hostName = getHost.we_renrendai_host;
  
          var html = '<div class="new-vip-top"><img src="' + iconImageUrl + '" alt="icon"></div>\n                        <ul class="new-vip-list">\n                            <li class="new-vip-info new-vip-left">\n                                <div class="number"><span>' + rate + '</span><i>%</i></div>\n                                <div class="text">预期年化利率 </div>\n                            </li>\n                            <li class="new-vip-info new-vip-right">\n                                <div class="number">期限' + time + '个月</div>\n                                <div class="text">最高可投' + money + '元</div></li>\n                        </ul>\n                        <div class="btn-wrap"><a target="_blank" class="j-btn" href="' + hostName + '/financeplan/' + id + '">立即加入</a></div>\n            ';
          this.$el.html(html).addClass(style).show();
      },
  
      destroy: function destroy() {
          this.$el.off();
          this.$el.remove();
          this.$el = null;
      }
  });
  
  module.exports = LpNewerListItem;

});

;/*!/node_modules/glpb-we-pc/src/components/lp-register-newer/lp-register-newer.js*/
define('common:node_modules/glpb-we-pc/src/components/lp-register-newer/lp-register-newer', function(require, exports, module) {

  /**
   *lp 新人专享
   * Created by liling on 16/12/30.
   */
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var lpService = serviceFactory.getService('lp');
  
  var UILpNewerListItem = require('common:node_modules/glpb-we-pc/src/common-ui/lp-newer-list-item/lp-newer-list-item');
  
  var tpl = "<div><div class='glpb-new-vip'></div></div>";
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b3f0c5ee7210913f6796/newer/newer.jpg';
  
  var LandingPageNewerItem = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_lp_register_newer',
      componentNameZh: 'PC-lp注册页-新手专享',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fcfcfc'
              },
              width: '500px',
              padding: '0',
              margin: '0 auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "style_$$comment": 'warm为暖色调,cold为冷色调',
              style: 'warm',
              "type_$$comment": 'u1为1个月的U新标,u3期限3个月的U新标',
              type: 'u1',
              "iconImageUrl_$$comment": 'icon图片地址',
              iconImageURL: '//www.we.com/cms/5864b3f0c5ee7210913f6796/newer/lp-new-vip-icon.png'
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //单个U新渲染的视图
          this.newerItemView = null;
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + ' glpb-lp-new-vip';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-new-vip', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="基金资产列表占位图片(非真实数据)" />').appendTo($content);
          } else {
  
              var newerView = new UILpNewerListItem({
                  source: data.source || ''
              });
              newerView.render();
              this.$content.append(newerView.$getElement());
              this.newerItemView = newerView;
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
          if (this.newerItemView) {
              this.newerItemView.destroy();
              this.newerItemView = null;
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
          var type = data.type;
          var style = data.style;
          var iconImageUrl = data.iconImageURL;
  
          if (this.isProductionMode() && !this.eventBinded && type) {
  
              this.eventBinded = true;
  
              this.querySign = utils.generateQuerySign();
  
              var reqData = {
                  type: type
              };
  
              lpService.getNewer(reqData).then(function (reqResult) {
                  if (reqResult.requestStatus === lpService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          that.setNewerData(result.data, iconImageUrl, style);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取U新数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      setNewerData: function setNewerData(data, iconImageUrl, style) {
          this.newerItemView.setNewerData(data, iconImageUrl, style);
      }
  });
  
  module.exports = LandingPageNewerItem;

});

;/*!/node_modules/glpb-we-pc/src/components/lp-register-title/lp-register-title.js*/
define('common:node_modules/glpb-we-pc/src/components/lp-register-title/lp-register-title', function(require, exports, module) {

  /**
   * LP页面品台优势
   * Created by liling on 2016/12/30
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var DataManager = require('common:node_modules/glpb-we-pc/src/common/data-manager/data-manager');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var tpl = '<div><div class="glpb-content"></div></div>';
  
  var LandingPageHeader = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_lp_title',
      componentNameZh: 'PC-LP-标题文本',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fff'
              },
              height: 'auto',
              width: 'auto',
              padding: '0',
              margin: '0 auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "titleTxet_$$comment": 'lp各部分标题文本',
              "titleTxet": '平台优势',
              "titleFontSize": '字号',
              "titleFontSize": '30px',
              "titleLineHeight_$$comment": '标题行高',
              "titleLineHeight": '130px',
              "titleColor_$$comment": '标题颜色',
              "titleColor": '#2b2b2b'
          };
      },
  
      init: function init() {
  
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-content', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          var html = '<h1 style="font-size: ' + data.titleFontSize + ';line-height: ' + data.titleLineHeight + ';color: ' + data.titleColor + '">' + data.titleTxet + '</h1>';
  
          $content.html(html);
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      }
  
  });
  
  module.exports = LandingPageHeader;

});

;/*!/node_modules/glpb-we-pc/src/components/lp-registration-box/lp-registration-box.js*/
define('common:node_modules/glpb-we-pc/src/components/lp-registration-box/lp-registration-box', function(require, exports, module) {

  /**
   * LP注册框组件
   * Created by 王半仙 on 16/12/27.
   */
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var RSAencript = glpbCommon.rsaCrypt;
  
  var utils = BaseComponent.utils;
  
  var parameter = glpbCommon.parameter;
  
  var registerService = serviceFactory.getService('register');
  
  var statistic = glpbCommon.weStatistic;
  
  var tpl = "<div>\n    <div class=\"login-bg-new\" id=\"lp-depository\"></div>\n    <div class=\"glpb-content\">\n        <div class=\"register-head\">\n            <h3>投资资金全程由民生银行存管</h3>\n        </div>\n        <div class=\"step-list\">\n            <div class=\"step-item step-1\"></div>\n            <div class=\"step-item stop-2\"></div>\n        </div>\n    </div>\n</div>";
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b3f0c5ee7210913f6796/register/register-box.png';
  
  var $formBox;
  var $phone;
  var $phoneCode;
  var $randCode;
  var $img_clickable;
  var $countDown;
  var $rankCodeWrap;
  var $rankCodeShow;
  var $mobilePhoneCon;
  var $phoneCodeCon;
  var $codeImage;
  var $password;
  var $passwordCon;
  var $agree;
  var $registerAgreeCon;
  var $submitErroInfo;
  var exist = false;
  
  var mess = '';
  
  var SECONDS = 60;
  var sendTimes = 0;
  
  var timer;
  var remainSeconds = 0;
  
  var pageKey;
  
  var registerItemList = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_lp_regitstration_box',
      componentNameZh: 'PC-LP注册框',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fff'
              },
              width: 'auto',
              padding: '0',
              position: 'absolute',
              right: '0',
              top: '66'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              promotion: '',
              inviteCode: '',
              "type_$$comment": '来源,默认为空',
              type: '',
              intention: 'LENDER',
              "submitText_$$comment": '按钮文本内容',
              submitText: '注册领红包',
              "btnBgColor_$$comment": '按钮颜色(包括验证码和注册按钮)',
              btnBgColor: '#ff771c',
              "btnTextColor_$$comment": '按钮文本颜色(包括验证码和注册按钮)',
              btnTextColor: '#fff',
              "hasCallBack_$$comment": '注册成功后执行回调函数,true执行，false不执行,注:script标签里的函数名**必须**为callBackPbFn',
              hasCallBack: false
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //交易所列表对应的详细数据
          this.listDetailData = null;
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
          var cssClass = this.getBaseCssClass() + ' glpb-lp-registration-box';
          var cssStyle = this.translateStyle(this.style);
          cssStyle.height = "350px";
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-content', $el);
  
          this.$el = $el;
          this.$boxBg = $el.find('.login-bg-new');
  
          this.$stepContainer = $content.find('.step-list');
          this.$step1 = this.$stepContainer.find('.step-1');
          this.$step2 = this.$stepContainer.find('.step-2');
          this.renderStep1();
      },
  
      registerSubmit: function registerSubmit() {
  
          var singleton = this;
  
          $(".submit-btn").on("click", function () {
  
              if (!(singleton.isMobile() && singleton.isMobileAvailable())) {
                  if (!singleton.isRankCode()) return;
                  return;
              }
  
              if (!singleton.isPhoneCode()) {
                  return;
              }
              if (!singleton.isPassWord()) {
                  return;
              }
  
              if (!singleton.isAgree()) {
                  return;
              }
  
              //异步提交表单
  
              var $form = $("form");
  
              var serializeData = $form.serialize();
  
              serializeData = utils.query2json(serializeData);
  
              //现阶段，url中的utmSource、utm_source并行，但cookie中只存utmSource字段
              var utmSourceInUrl = parameter.getUtmSourceBySearch();
              if (utmSourceInUrl) {
                  serializeData.utmSource = utmSourceInUrl;
              }
  
              //从cookie中获取所有的utm参数
              var utmCookieParams = parameter.getAllUtmCookies();
  
              var queryData = parameter.getQueryData();
  
              var dataForm = $.extend({}, utmCookieParams, serializeData, queryData);
  
              //删掉可能存在的utm_source字段，只给node端传utmSource
              delete dataForm.utm_source;
  
              //特殊处理promotion
              if (Object.prototype.hasOwnProperty.call(dataForm, "promotion")) {
                  dataForm.promotion = dataForm.utmSource || null;
              }
  
              //需要把密码加密后在发送给后端
              dataForm.password = RSAencript(dataForm.password);
  
              var mobileNum = dataForm.username;
  
              registerService.rrdRegister(dataForm).then(function (res) {
                  if (res.requestStatus === registerService.STATUS.SUCCESS) {
                      var out;
                      if (typeof res === 'string') {
                          try {
                              out = JSON.parse(res).data;
                          } catch (e) {
                              out = {
                                  status: -1,
                                  message: '解析结果出错'
                              };
                          }
                      } else {
                          out = res.data;
                      }
  
                      //3310手机验证码类的,3320手机号类的,3330密码类的
                      if (out.status === 0) {
  
                          if (singleton.data.hasCallBack) {
                              try {
                                  if (typeof callBackPbFn === 'function') {
                                      callBackPbFn();
                                  }
                              } catch (e) {}
                          }
  
                          if (out.data.jumpURL) {
                              location.href = out.data.jumpURL;
                          } else {
                              location.href = '/rrdRegist!regSuccess.action?username=' + encodeURIComponent(mobileNum);
                          }
                          /*statistic.event({
                              pageKey : tplConf.pageKey,
                              eventId : 'mainFormRegisterSuccess',
                              extra : {
                                  'url' : location.href
                              },
                              callback : function(){
                                  //验证码正确,跳转到 注册成功页
                                  location.href = '/rrdRegist!regSuccess.action?username=' + encodeURIComponent(mobileNum);
                              }
                          });*/
                      } else if (out.status === 3310) {
                              //singleton.zhugeFail(out.message);
                              singleton.messageTips($phoneCodeCon, out.message);
                          } else if (out.status === 3320) {
                              //singleton.zhugeFail(out.message);
                              singleton.messageTips($mobilePhoneCon, out.message);
                          } else if (out.status === 3330) {
                              //singleton.zhugeFail(out.message);
                              singleton.messageTips($passwordCon, out.message);
                          } else {
                              //singleton.zhugeFail(out.message);
                              singleton.setCodeMessage(out.message);
                              singleton.getURL();
                          }
                  }
              })['catch'](function (e) {
                  //singleton.zhuge('服务器异常,请稍后再试');
                  singleton.setCodeMessage('服务器异常,请稍后再试');
                  singleton.getURL();
              });
          });
      },
  
      sendPhoneCode: function sendPhoneCode() {
          var singleton = this;
          $countDown.on('click', function () {
  
              if (remainSeconds > 0) {
                  return;
              }
  
              var mobileNum = $phone.val();
              var randCode = $randCode.val() || "";
  
              //发送验证码前验证手机号
              if (!(singleton.isMobile() && singleton.isMobileAvailable())) {
                  return;
              }
  
              if (!singleton.isRankCode()) {
                  return;
              }
  
              //异步发送手机验证码
              var getHost = utils.getTplConf();
              var _isWeCom = getHost._isWeCom;
              var channal = _isWeCom == 'true' ? 'WE' : 'RRD';
  
              var data = {
                  checkCode: 'regNew',
                  phone: mobileNum,
                  randomCode: randCode,
                  channal: channal
              };
  
              registerService.sendPhoneCode(data).then(function (res) {
                  if (res.requestStatus === registerService.STATUS.SUCCESS) {
                      if (res.data.status == '3230') {
                          //显示验证码
                          singleton.$boxBg.css("height", "420px");
                          $formBox.css("top", "37px!important");
                          $rankCodeWrap.show();
                          $img_clickable.trigger("click");
                      } else if (res.data.status == '3240') {
                          $img_clickable.trigger("click");
                          mess = "验证码不正确";
                          singleton.messageTips($rankCodeWrap, mess);
                      } else if (res.data.status == '0') {
                          singleton.resetCountdown(); //发送验证码
                          sendTimes++;
                      } else {
                          $img_clickable.trigger("click");
                          $submitErroInfo.text(res.data.message);
                      }
                      return;
                  }
                  mess = "获取验证码网络异常";
                  singleton.messageTips($rankCodeWrap, mess);
              })['catch'](function (e) {
                  $img_clickable.trigger("click");
                  $submitErroInfo.text('服务器异常,请稍后再试');
              });
              /*statistic.event({
                  pageKey : tplConf.pageKey,
                  eventId : 'mainFormSendPhoneCode'
              });*/
          });
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var $stepContainer = this.$stepContainer;
          $formBox = $stepContainer.find('.form-phone');
          $phone = $stepContainer.find(".phone"); //手机号码
          $phoneCode = $stepContainer.find('.phoneCode'); //手机验证码
          $randCode = $stepContainer.find('.randCode'); //图形验证码
          $img_clickable = $stepContainer.find(".img-clickable");
          $countDown = $stepContainer.find('.count-down-wrap'); //发送验证码按钮
          $rankCodeWrap = $stepContainer.find(".rank-code-wrap");
          $mobilePhoneCon = $stepContainer.find(".mobile-phone-con");
          $phoneCodeCon = $stepContainer.find(".phone-code-con");
          $password = $stepContainer.find(".password"); //密码
          $passwordCon = $stepContainer.find(".password-con");
          $codeImage = $stepContainer.find(".img-clickable");
          $agree = $stepContainer.find(".agree");
          $registerAgreeCon = $stepContainer.find('.register-agree-con');
          $submitErroInfo = $stepContainer.find(".submit-error-info");
  
          this.sendPhoneCode();
  
          this.validate();
  
          this.getURL();
  
          this.registerSubmit();
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      renderStep1: function renderStep1() {
  
          var type = this.data.type;
          var inviteCode = this.data.inviteCode;
          var intention = this.data.intention;
          var submitText = this.data.submitText;
          var $background = this.data.btnBgColor;
          var $color = this.data.btnTextColor;
  
          var html = '<div class="form-phone">\n                            <div class="lp-register-new-con">\n                                <form class=" rui-form">\n                                    <div class="mobile-phone-con register-item-con rui-form-text-container">\n                                        <div class="rui-input-wrap">\n                                            <input autocomplete="off" type="text" name="username" value="" _id="phone" class="rui-form-input phone">\n                                            <div class="rui-form-placeholder">输入手机号码</div>\n                                        </div>\n                                        <div class="rui-form-error-info"></div>\n                                    </div>\n\n                                    <div class="register-item-con rank-code-wrap fn-clear" >\n                                        <div class="rand-code-con  rui-form-text-container">\n                                            <div class="rui-input-wrap">\n                                                <input autocomplete="off" type="text" name="randCode" value="" _id="randCode" class="rui-form-input randCode">\n                                                <div class="rui-form-placeholder">输入图形验证码</div>\n                                            </div>\n                                        </div>\n                                        <div class="rui-form-error-info"></div>\n                                        <span class="code-image-con rui-phone-code-image-con img-clickable">\n                                            <span class="code-image-wrap"><img src="other/getRandCode"></span>\n                                        </span>\n                                    </div>\n\n                                    <div class="register-item-con phone-code-input fn-clear" >\n                                         <div class="phone-code-con rui-form-text-container">\n                                              <div class="rui-input-wrap">\n                                                   <input autocomplete="off" type="text" name="mobileCode" _id="phoneCode" value="" class="rui-form-input phoneCode"/>\n                                                   <div class="rui-form-placeholder">输入验证码</div>\n                                              </div>\n                                            <div class="rui-form-error-info"></div>\n                                         </div>\n                                         <div class="count-down-wrap phone-code-pass j-btn-orange" style="background:' + $background + ';color:' + $color + ';">获取验证码</div>\n                                    </div>\n                                    <div class="password-con register-item-con rui-form-text-container">\n                                         <div class="rui-input-wrap">\n                                              <input autocomplete="off" type="password" name="password" _id="password" value="" class="rui-form-input password"/>\n                                              <div class="rui-form-placeholder">输入登录密码</div>\n                                         </div>\n                                         <div class="rui-form-error-info"></div>\n                                    </div>\n                                    <div class="register-item-con agreement-wrap">\n                                     <span class="rui-form-checkbox register-agree-con rui-form-checkbox-checked">\n                                         <span class="checkbox-holder">\n                                             <input type="checkbox" class="agree" name="agree" checked />\n                                             <span class="rui-checkbox-label">我已阅读并同意</span>\n                                         </span>\n                                         <a href="/pc/agreement/contract/currency/name/user.we_reg" target="_blank">《we.com平台注册服务协议》</a>和<a href="/pc/agreement/contract/currency/name/user.rrd_reg" target="_blank">《renrendai.com平台注册服务协议》</a>\n                                         <div class="rui-form-error-info"></div>\n                                     </span>\n                                    </div>\n                                    <input type="hidden" name="lpjumptoreg" value="" />\n                                    <input type="hidden" name="type" value="' + type + '" />\n                                    <input type="hidden" name="intention" value="' + intention + '"/>\n                                    <input type="hidden" name="promotion" />\n                                    <input type="hidden" name="inviteCode" value="' + inviteCode + '"/>\n                                    <input type="hidden" name="userid" value=""  />\n                                    <input type="hidden" name="extra" value="" />\n                                    <input type="button" class="submit-btn j-btn j-btn-block j-border-radius j-btn-orange" style="background:' + $background + ';color:' + $color + ';" value="' + submitText + '"/>\n                                    <div class="submit-error-info"></div>\n                                </form>\n                            </div>\n                        </div>';
          var $remain = $(html);
          this.$step1.append($remain);
      },
  
      //重新发送手机验证的倒计时
      resetCountdown: function resetCountdown() {
          var singleton = this;
          clearTimeout(timer);
  
          remainSeconds = SECONDS;
  
          $countDown.text('重新发送(' + remainSeconds + ')');
  
          $countDown.addClass("j-btn-gary").removeClass("j-btn-orange");
  
          function update() {
              remainSeconds--;
              if (remainSeconds < 1) {
                  if (sendTimes > 0) {
                      $countDown.removeClass("count-down-wrap").addClass("count-down-fresh");
                      $countDown.unbind('click');
                      singleton.sendFresh();
                  }
                  $countDown.text('重新发送');
                  $countDown.addClass("j-btn-orange").removeClass("j-btn-gary");
              } else {
                  $countDown.text('重新发送(' + remainSeconds + ')');
                  timer = setTimeout(update, 1000);
              }
          }
  
          timer = setTimeout(update, 1000);
      },
  
      sendFresh: function sendFresh() {
          var singleton = this;
          //重新发送刷新验证码
          $(".count-down-fresh").on('click', function () {
              $(".count-down-fresh").unbind("click");
              $img_clickable.trigger("click");
              $countDown.removeClass("count-down-fresh").addClass("count-down-wrap");
              singleton.sendPhoneCode();
          });
      },
  
      setCodeMessage: function setCodeMessage(msg) {
          $submitErroInfo.text(msg);
          $phoneCode.focus();
      },
  
      isMobile: function isMobile() {
          var singleton = this;
          var mobileNum = $phone.val();
          var isMobileOk = false;
  
          if (mobileNum.length == 0) {
              mess = "不能为空";
              singleton.messageTips($mobilePhoneCon, mess);
          } else {
              var isMobile = /^(((13[0-9]{1})|(14[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(mobileNum);
              if (!isMobile) {
                  mess = "请输入正确手机号";
                  singleton.messageTips($mobilePhoneCon, mess);
              } else {
                  singleton.messageTipsHide($mobilePhoneCon);
                  isMobileOk = true;
              }
          }
          return isMobileOk;
      },
  
      //图形验证码校验
      isRankCode: function isRankCode() {
          var singleton = this;
  
          var isRankOk = false;
  
          $rankCodeShow = $(".rank-code-wrap:visible");
  
          if ($rankCodeShow.length > 0) {
  
              var randCode = $randCode.val() || "";
  
              if (randCode.length == 0) {
                  mess = "不能为空";
                  singleton.messageTips($rankCodeWrap, mess);
              } else if (randCode.length == 4) {
                  singleton.messageTipsHide($rankCodeWrap);
                  isRankOk = true;
              } else {
                  mess = "请输入4位验证码";
                  singleton.messageTips($rankCodeWrap, mess);
              }
          } else {
              isRankOk = true;
          }
  
          return isRankOk;
      },
  
      //用户手机号是否已经存在
      isMobileAvailable: function isMobileAvailable() {
          var singleton = this;
          var mobileNum = $phone.val();
          registerService.checkMobile({
              username: encodeURIComponent(mobileNum)
          }).then(function (res) {
              if (res.requestStatus === registerService.STATUS.SUCCESS) {
                  if (res.data.status == 0) {
                      exist = true;
                      singleton.messageTipsHide($mobilePhoneCon);
                  } else {
                      exist = false;
                      mess = res.data.message || '网络异常';
                      singleton.messageTips($mobilePhoneCon, mess);
                  }
              } else {
                  mess = "网络错误";
                  singleton.messageTips($mobilePhoneCon, mess);
              }
          })['catch'](function (e) {
              mess = "网络错误";
              singleton.messageTips($mobilePhoneCon, mess);
              exist = false;
          });
  
          return exist;
      },
  
      checkPassword: function checkPassword(password) {
          var tmp = [];
          if (password.length < 8 || password.length > 16) {
              return false;
          }
          for (var i = 0; i < password.length; i++) {
              var result = this.passReg(password.charAt(i));
              if (!result) {
                  return false;
              } else {
                  if (tmp.join('').indexOf(result) == -1) {
                      tmp.push(result);
                  }
              }
          }
          return tmp.length >= 2;
      },
  
      passReg: function passReg(letter) {
          if (/[A-Za-z]/.test(letter)) {
              return 1;
          }
          if (/[0-9]/.test(letter)) {
              return 2;
          }
          if (/[!@#$%^&*._]/.test(letter)) {
              return 3;
          }
          return false;
      },
  
      //密码校验
      isPassWord: function isPassWord() {
          var singleton = this;
  
          var isPassOk = false;
          var v = $password.val();
  
          var isPassWord = this.checkPassword(v);
          //var isPassWord = (/^[\@A-Za-z0-9\!\#\$\%\^\&\*\.\~]{1,}$/).test(v);
          //var isPassNotAllNum = !((/^\d{1,}$/).test(v));
          //var isPassNotRepeat = !(new RegExp(/^(.)\1+$/).test(v));
  
          if (v.length == 0) {
              mess = "不能为空";
              singleton.messageTips($passwordCon, mess);
          } else if (!isPassWord) {
              mess = "8-16位数字、字母或符号组合";
              singleton.messageTips($passwordCon, mess);
          } else {
              singleton.messageTipsHide($passwordCon);
              isPassOk = true;
          }
  
          return isPassOk;
      },
  
      //短信验证码校验
      isPhoneCode: function isPhoneCode() {
          var singleton = this;
  
          var isPhoneCodeOk = false;
          var phoneC = $phoneCode.val();
  
          if (phoneC.length == 0) {
              mess = "不能为空";
              singleton.messageTips($phoneCodeCon, mess);
          } else {
              singleton.messageTipsHide($phoneCodeCon);
              isPhoneCodeOk = true;
          }
  
          return isPhoneCodeOk;
      },
  
      isAgree: function isAgree() {
          var singleton = this;
  
          var isAgreeOk = false;
          var agreeChecked = singleton.$stepContainer.find(".agree")[0].checked;
  
          if (agreeChecked) {
              $registerAgreeCon.addClass("rui-form-checkbox-checked").removeClass('rui-form-checkbox-error validate-error-con');
              singleton.messageTipsHide($registerAgreeCon);
              isAgreeOk = true;
          } else {
              $registerAgreeCon.addClass("rui-form-checkbox-error validate-error-con").removeClass('rui-form-checkbox-checked');
              singleton.messageTips($registerAgreeCon, "请同意我们的条款");
          }
  
          return isAgreeOk;
      },
  
      getURL: function getURL() {
  
          $rankCodeShow = $(".rank-code-wrap:visible");
  
          if ($rankCodeShow.length > 0) {
              var url = "other/getRandCode";
              var random = new Date().getTime();
  
              if (url.indexOf('?') > 0) {
                  url += '&' + random;
              } else {
                  url += '?' + random;
              }
  
              return url;
          }
      },
  
      validate: function validate() {
          var singleton = this;
          var $stepContainer = this.$stepContainer;
          $(document).on({
              blur: function blur(e) {
  
                  var id = $(this).attr("_id");
  
                  if ($(this).val().length == 0) {
                      $("." + id, $stepContainer).parents(".register-item-con").find(".rui-form-placeholder").show();
                  }
  
                  switch (id) {
                      case 'phone':
                          if (singleton.isMobile()) {
                              singleton.isMobileAvailable();
                          }
                          break;
  
                      case 'randCode':
                          singleton.isRankCode();
                          break;
  
                      case 'phoneCode':
                          singleton.isPhoneCode();
                          break;
  
                      case 'password':
                          singleton.isPassWord();
                          break;
                  }
              }
          }, '.phone,.randCode,.phoneCode,.password');
  
          $password.on({
              focus: function focus() {
                  mess = "8-16位数字、字母或符号组合";
                  singleton.messageTips($passwordCon, mess);
              },
              keyup: function keyup() {
                  singleton.isPassWord();
              }
          });
          $(".randCode ,.phone ,.password ,.phoneCode", $stepContainer).next(".rui-form-placeholder").on("click", function () {
              $(this).hide().prev(".randCode ,.phone ,.password ,.phoneCode", $stepContainer).focus();
          });
  
          //刷新验证码
          $codeImage.on("click", function () {
              var imgurl = singleton.getURL();
              $codeImage.find("img").attr("src", imgurl);
          });
  
          //同意条款
          $(".checkbox-holder").on("click", function () {
  
              var agreeChecked = $stepContainer.find(".agree")[0];
              agreeChecked.checked = !agreeChecked.checked;
              singleton.isAgree();
          });
      },
  
      messageTips: function messageTips(id, mess) {
  
          id.find(".rui-input-wrap").css("border-color", "#ee7565");
          id.addClass(" rui-form-text-error validate-error-con");
          id.find(".rui-form-error-info").show().text(mess);
      },
  
      messageTipsHide: function messageTipsHide(id) {
  
          id.find(".rui-input-wrap").css("border-color", "#78828c");
          id.removeClass(" rui-form-text-error validate-error-con");
          id.find(".rui-form-error-info").hide();
      },
  
      zhugeFail: function zhugeFail(mess) {
          statistic.event({
              pageKey: tplConf.pageKey,
              eventId: 'mainFormRegisterFail',
              extra: {
                  '失败原因': mess
              }
          });
      }
  });
  
  module.exports = registerItemList;

});

;/*!/node_modules/glpb-we-pc/src/components/lp-registration-row/lp-registration-row.js*/
define('common:node_modules/glpb-we-pc/src/components/lp-registration-row/lp-registration-row', function(require, exports, module) {

  /**
   * LP页面顶部的 注册区域通栏, 包含: 注册框, 通栏背景
   * Created by 王半仙 on 2017/1/4.
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var DataManager = require('common:node_modules/glpb-we-pc/src/common/data-manager/data-manager');
  
  var RegisterBox = require('common:node_modules/glpb-we-pc/src/components/lp-registration-box/lp-registration-box');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var tpl = "<div>\n    <div class=\"glpb-content\">\n\n    </div>\n</div>";
  
  var LandingPageHeader = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_lp_registration_row',
      componentNameZh: 'PC-LP-注册通栏',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundImage: 'http://www.we.com/cms/5788c3322fc6cb3b46b9e7e2/glpb/lp/lp-banner.jpg',
                  backgroundColor: '#f4452b',
                  backgroundPosition: 'center 0'
              },
              height: '491px',
              width: 'auto',
              padding: '0',
              margin: '0 auto'
          };
      },
  
      getDefaultData: function getDefaultData() {},
  
      getDefaultComponents: function getDefaultComponents() {
  
          return [{
              componentName: 'glpb_we_com_pc_lp_regitstration_box'
          }];
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-content', $el);
  
          this.$el = $el;
          this.$content = $content;
          var components = this.components || [];
          var componentRefs = this.componentRefs;
          for (var i = 0, len = components.length; i < len; i++) {
              var config = components[i];
              config.parentId = currentComponentId;
              var com = this.page.createComponentInstance(config);
              if (com) {
                  com.render();
                  $content.append(com.$getElement());
                  componentRefs.push(com);
              } else {
                  //不存在该组件
                  throw new Error('componentName[' + config.componentName + ']对应的组件不存在!!');
              }
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
  
          if (this.isProductionMode() && !this.eventBinded) {
              //正式环境才绑定事件, 并且Ajax请求
  
              var querySign = this.querySign = utils.generateQuerySign();
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.querySign = null;
          this.$content = null;
      }
  
  });
  
  module.exports = LandingPageHeader;

});

;/*!/node_modules/glpb-we-pc/src/components/newer/newer.js*/
define('common:node_modules/glpb-we-pc/src/components/newer/newer', function(require, exports, module) {

  /*
   * 新手专享-条形样式
   * 王浩
   */
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var lpService = serviceFactory.getService('lp');
  
  var tpl = '<div><ul class="glpb-newer-own-list"></ul></div>';
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b3f0c5ee7210913f6796/register/place-holder-img/newer-plan-place-holder-img.png';
  
  var NewerOwnItemList = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_newer-own_item_list',
      componentNameZh: '新手专享-条形',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fff'
              },
              width: '1040px',
              padding: '0',
              margin: '16px auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "type_$$comment": 'u1为1个月的U新标,u3期限3个月的U新标',
              type: 'u1',
              "iconImageUrl_$$comment": 'icon图片地址',
              iconImageURL: '//www.we.com/cms/5864b3f0c5ee7210913f6796/register/place-holder-img/newer-icon.png',
              "explain_$$comment": '新手标Title旁边的说明文案',
              explain: '*甄选精品限量发布 新人仅可购买一次',
              "target_$$comment": '按钮下方的标签文案',
              target: '精选短期 收益更佳'
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //交易所列表对应的详细数据
          this.listDetailData = null;
      },
  
      render: function render() {
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-newer-own-list', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<li><img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="新手专享占位图片(非真实数据)" /></li>').appendTo($content);
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
          var type = data.type;
  
          if (this.isProductionMode() && !this.eventBinded) {
              //正式环境才绑定事件, 并且Ajax请求U计划的具体数据
  
              var reqData = {
                  type: type
              };
              lpService.getNewer(reqData).then(function (reqResult) {
                  if (reqResult.requestStatus === lpService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          that.setNewerOwnData(result.data.financePlan_list);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取新手专享数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      setNewerOwnData: function setNewerOwnData(list) {
          list = list || [];
          if (!list || list.length < 1) {
              return this.hide();
          }
  
          var html = this._renderNewnerOwnItem(list[0]);
  
          if (html) {
              this.$content.html(html);
          } else {
              this.hide();
          }
      },
  
      _renderNewnerOwnItem: function _renderNewnerOwnItem(obj) {
          var getHost = utils.getTplConf();
          var hostName = getHost.we_renrendai_host;
          var data = this.data || {};
          var rate = obj.expectedRate;
          var time = obj.lockPeriod;
          var name = obj.name;
  
          var detailURL = hostName + '/financeplan/' + obj.id;
  
          return '<li class="newer-own-detail clearfix">\n                        <div class="newer-title clearfix">\n                            <div class="newer-icon">\n                                <img src="' + data.iconImageURL + '" width="100%" />\n                            </div>\n                            <div class="newer-plan-name">' + name + '</div>\n                            <div class="newer-explain">' + data.explain + '</div>\n                        </div>\n                        <dl class="newer-data clearfix">\n                            <dt class="clearfix">\n                                <div>\n                                    <p class="color-deep-orange font-18"><span class="bigger font-36">' + rate + '</span>%</p>\n                                    <p class="tips font-12">预期年化利率</p>\n                                </div>\n                    \n                                <div>\n                                    <p class="color-grey font-18"><span class="bigger font-36">' + time + '</span>个月</p>\n                                    <p class="tips font-12">投资起点</p>\n                                </div>\n                            </dt>\n                            <dd>\n                                <a class="btn-join" href="#lp-depository" title="立即加入">立即加入</a>\n                                <p>' + data.target + '</p>\n                            </dd>\n                        </dl>\n                    </li>';
      }
  });
  
  module.exports = NewerOwnItemList;

});

;/*!/node_modules/glpb-we-pc/src/components/uplan-premium/uplan-premium.js*/
define('common:node_modules/glpb-we-pc/src/components/uplan-premium/uplan-premium', function(require, exports, module) {

  /**
   * 优选计划组件
   * Created by liling，2017/6/1
   **/
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var uPlanService = serviceFactory.getService('uPlan');
  
  var tpl = "<div><div class='glpb-pc-uplan-premium'></div></div>";
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b3f0c5ee7210913f6796/uplan_premium/uplan-premium.jpg';
  
  var UplanPremiumItem = BaseComponent.extend({
      componentName: 'glpb_we_com_pc_uplan_premium',
      componentNameZh: 'PC-优选计划',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#f2f2f2'
              },
              width: 'auto',
              padding: '0',
              margin: '16px auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "style_$$comment": 'warm为暖色调,cold为冷色调',
              style: 'warm'
  
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //交易所列表对应的详细数据
          this.listDetailData = null;
      },
  
      render: function render() {
          var cssClass = this.getBaseCssClass() + ' ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-pc-uplan-premium', $el);
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<li><img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="U计划列表占位图片(非真实数据)" /></li>').appendTo($content);
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
          if (this.isProductionMode() && !this.eventBinded) {
              //正式环境才绑定事件, 并且Ajax请求U计划的具体数据
              this.querySign = utils.generateQuerySign();
  
              uPlanService.getUplanPremium().then(function (reqResult) {
                  if (reqResult.requestStatus === uPlanService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          that.setListDetailData(result.data.financePlanVos);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取优选数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      setListDetailData: function setListDetailData(list) {
          list = list || [];
          if (!list && list.length < 1) {
              return this.hide();
          }
  
          var html = '';
          //取数组第一条数据
          html = this._renderUPlanPremium(list[0]);
          this.$content.html(html);
      },
  
      _renderUPlanPremium: function _renderUPlanPremium(obj) {
  
          return '<ul class="premuim-list">\n                        <li class="premuim-name">优选计划</li>\n                        <li class="premuim-rate">\n                            <p>' + obj.expectedRate + '<span>%</span></p>\n                            <p class="text">预期年化利率</p>\n                        </li>\n                        <li class="premuim-lock">\n                            <p>到期后仍享' + obj.expectedRate + '%  随时可退</p>\n                            <p class="text">' + obj.lockPeriod + '个月锁定期</p>\n                        </li>\n                        <li class="premuim-btn"><a class="btn-join" href="#lp-depository">立即加入</a></li>\n                    </ul>';
      }
  });
  
  module.exports = UplanPremiumItem;

});

;/*!/node_modules/glpb-we-pc/src/components/rrd-lp-footer/rrd-lp-footer.js*/
define('common:node_modules/glpb-we-pc/src/components/rrd-lp-footer/rrd-lp-footer', function(require, exports, module) {

  /**
   * LP页面底部的footer区域
   * Created by Liu Cong on 2017/6/24.
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var DataManager = require('common:node_modules/glpb-we-pc/src/common/data-manager/data-manager');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var tpl = '<div><div class="glpb-footer"></div></div>';
  
  var LandingPageHeader = BaseComponent.extend({
      componentName: 'glpb_rrd_com_pc_lp_footer',
      componentNameZh: 'PC-LP-footer',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {};
      },
  
      getDefaultData: function getDefaultData() {
          return {};
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
      },
  
      render: function render() {
          var currentComponentId = this.componentId;
          var data = this.data;
  
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-footer', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          var html = '<div class="rrd-lp-footer">\n                            <div class="footer-box">\n                                <p>© 2017 人人贷商务顾问(北京)有限公司 All rights reserved     京ICP证 100953号 京公网安备 11010802021944 京ICP备12025643号-1     市场有风险 投资需谨慎 </p>\n                                <p>客服热线：400-090-6600</p>\n                            </div>\n                        </div>';
  
          $content.html(html);
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
      },
  
      setData: function setData(data) {
          this.data = $.extend({}, this.data, data);
          data = this.data;
      },
  
      componentWillUnmount: function componentWillUnmount() {}
  });
  
  module.exports = LandingPageHeader;

});

;/*!/node_modules/glpb-we-pc/src/components/rrd-lp-u-plan/rrd-lp-u-plan.js*/
define('common:node_modules/glpb-we-pc/src/components/rrd-lp-u-plan/rrd-lp-u-plan', function(require, exports, module) {

  /**
   * 优选计划、U计划
   * Created by liucong，2017-6-24
   **/
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var uPlanService = serviceFactory.getService('uPlan');
  
  var tpl = '<div><div class="glpb-rrd-finance-plan"></div></div>';
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b0d6a24d131067ef7956/spread/financePlan.jpg?t=1';
  
  var RRDUPlanItem = BaseComponent.extend({
      componentName: 'glpb_rrd_com_pc_uPlan_item',
      componentNameZh: '新手、优选产品（20170624新样式）',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fff'
              },
              width: '1080px',
              padding: '0',
              margin: '16px auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {
              "financePlanType_$$comment": "输入要显示的U计划产品信息，e.g. 'PREMIUM'、'NOVICE'",
              financePlanType: 'PREMIUM',
              "prductTitle_$$comment": "产品标题，e.g. 优选计划、U计划-新（支持html写法）",
              prductTitle: '优选计划',
              "productAd_$$comment": "广告语，e.g.最高返现1.8%（支持html写法）",
              prductAd: '',
              "productIntro_$$comment": "产品描述语,e.g. 到期后转入自由期，仍享#rate#（支持html写法）",
              productIntro: "使用红包，收益更高"
          };
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //产品对应的详细数据
          this.productData = null;
      },
  
      render: function render() {
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-rrd-finance-plan', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<li><img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="U计划列表占位图片(非真实数据)" /></li>').appendTo($content);
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var that = this;
          var data = this.data || {};
          var financePlanType = data.financePlanType || [];
          if (this.isProductionMode() && !this.eventBinded && financePlanType != "") {
              //正式环境才绑定事件, 并且Ajax请求U计划的具体数据
  
              this.querySign = utils.generateQuerySign();
              var reqData = {
                  financePlanType: financePlanType
              };
  
              uPlanService.getFinancePlanListForIndex(reqData).then(function (reqResult) {
                  if (reqResult.requestStatus === uPlanService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          that.setListDetailData(result.data);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取定义产品数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      setListDetailData: function setListDetailData(list) {
          list = list.financePlanVos || [];
          if (!list || list.length < 1) {
              return this.hide();
          }
  
          var html = '';
          //只展示一条数据
          html += this._renderUPlanItem(list[0]);
  
          if (html) {
              this.$content.html(html);
          } else {
              this.hide();
          }
      },
  
      _renderUPlanItem: function _renderUPlanItem(obj) {
          var getHost = utils.getTplConf();
          var hostName = getHost.we_renrendai_host;
  
          var detailURL = hostName + '/financeplan/' + obj.id;
  
          var productIntro = this.data.productIntro.replace(/#rate#/g, '' + obj.expectedRate);
  
          return '\n                <div class="uplan-item-box">\n                    <div class="product-title">\n                        <div class="fl-right gift">\n                            ' + this.data.prductAd + '\n                        </div>\n                        <h2>\n                            ' + this.data.prductTitle + '\n                        </h2>\n                    </div>\n                    <ul class="plan-detail-box">\n                        <li class="rate-box"><em class="num">' + obj.expectedRate + '</em><em class="symbol">%</em><br>预期年化利率</li>\n                        <li class="month-box"><em class="month">' + obj.lockPeriod + '个月</em><br>期限</li>\n                        <li class="tip-box"><a class="join-btn" href="#lp-depository">立即加入</a>' + productIntro + '</li>\n                    </ul>\n                </div>\n            ';
      }
  });
  
  module.exports = RRDUPlanItem;

});

;/*!/node_modules/glpb-we-pc/src/components/rrd-lp-company-info/rrd-lp-company-info.js*/
define('common:node_modules/glpb-we-pc/src/components/rrd-lp-company-info/rrd-lp-company-info', function(require, exports, module) {

  /**
   * rrd 累计注册人数、累积成交额组件
   * Created by liucong，2017-6-24
   **/
  
  var moment = require('common:node_modules/moment/moment');
  
  var numeral = require('common:node_modules/numeral/numeral');
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var serviceFactory = require('common:node_modules/glpb-we-pc/src/service/service-factory');
  
  '';
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var $ = BaseComponent.$;
  
  var utils = BaseComponent.utils;
  
  var uPlanService = serviceFactory.getService('uPlan');
  
  var tpl = '<div><div class="glpb-rrd-company-info"></div></div>';
  
  var editorPlaceHolderImage = '//www.we.com/cms/5864b0d6a24d131067ef7956/spread/company_info.jpg?t=1';
  
  var RRDUPlanItem = BaseComponent.extend({
      componentName: 'glpb_rrd_com_pc_company_info',
      componentNameZh: '公司成交额等数据',
      componentCategory: BaseComponent.CATEGORY.UI,
      platform: BaseComponent.PLATFORM.PC,
      canBeChildOfComponentName: function canBeChildOfComponentName() {
          return true;
      }
  }, {
      getDefaultStyle: function getDefaultStyle() {
          return {
              background: {
                  backgroundColor: '#fff'
              },
              width: '1080px',
              padding: '0',
              margin: '16px auto'
          };
      },
  
      getDefaultData: function getDefaultData() {
          return {};
      },
  
      init: function init() {
          //当前Ajax请求的ID
          this.querySign = null;
          //是否已经绑定了组件自定义事件
          this.eventBinded = false;
          //产品对应的详细数据
          this.companyInfo = null;
      },
  
      render: function render() {
          var cssClass = this.getBaseCssClass() + '  ';
          var cssStyle = this.translateStyle(this.style);
          var $el = $(tpl).addClass(cssClass).css(cssStyle);
          var $content = $('.glpb-rrd-company-info', $el);
  
          this.$el = $el;
          this.$content = $content;
  
          if (!this.isProductionMode()) {
              //编辑模式, 显示一个图片占位
              $('<li><img class="editor-place-holder-img" src="' + editorPlaceHolderImage + '" title="公司数据占位图(非真实数据)" /></li>').appendTo($content);
          }
      },
  
      bindComponentEvent: function bindComponentEvent() {
          var _this = this;
  
          var that = this;
          var data = this.data || {};
          if (this.isProductionMode() && !this.eventBinded) {
              //正式环境才绑定事件, 并且Ajax请求U计划的具体数据
  
              this.querySign = utils.generateQuerySign();
              var reqData = {};
  
              uPlanService.getCompanyInfo(reqData).then(function (reqResult) {
                  if (reqResult.requestStatus === uPlanService.STATUS.SUCCESS) {
                      var result = reqResult.data;
                      if (result.status === 0) {
                          var html = _this._renderInfoItem(result.data);;
                          that.$content.html(html);
                          return;
                      }
                      return Promise.reject(new Error(result.message));
                  }
                  return Promise.reject(new Error('获取定义产品数据异常!'));
              })['catch'](function (e) {
                  alert(e.message);
                  that.hide();
              });
          }
      },
  
      componentWillUnmount: function componentWillUnmount() {
          this.$content = null;
      },
  
      handleNumber: function handleNumber(num, unit) {
          var real_num = num / unit;
  
          if (real_num >= 1) {
              real_num = parseInt(real_num);
          } else if (real_num >= 0) {
              real_num = real_num.toFixed(1);
          } else {
              real_num = 0;
          }
  
          var real_num_arr = ('' + real_num).split("");
  
          var real_num_arr_html = "<em>" + real_num_arr.join("</em><em>") + "</em>";
  
          return real_num_arr_html;
      },
  
      _renderInfoItem: function _renderInfoItem(obj) {
  
          var register_num_html = this.handleNumber(obj.userTotalCount, 10000);
          var deal_money_html = this.handleNumber(obj.tradeAmount, 100000000);
  
          return '\n                <div class="rrd-company-info-box">\n                    <div class="data-box">\n                        <div class="rrd-data left border-right">累计注册人数超 <span class="number-box">' + register_num_html + '</span>万</div>\n                        <div class="rrd-data right">累计成交额超 <span class="number-box">' + deal_money_html + '</span>亿</div>\n                    </div>\n            \n                    <ul class="company-info-box">\n                        <li class="left mg-left-50"><img src="images/AAA.png" alt="AAA信用认证">AAA信用认证</li>\n                        <li class="right mg-right-50"><img src="images/7years.png" alt="7年稳健运营">7年稳健运营</li>\n                        <li><img src="images/depository.png" alt="银行资金存管">银行资金存管</li>\n                    </ul>\n                </div>\n            ';
      }
  });
  
  module.exports = RRDUPlanItem;

});

;/*!/node_modules/glpb-we-pc/src/index.js*/
define('common:node_modules/glpb-we-pc/src/index', function(require, exports, module) {

  /**
   * Created by jess on 16/8/19.
   */
  
  var glpbCommon = require('common:node_modules/glpb-components-common/src/index');
  
  var BaseComponent = glpbCommon.BaseComponent;
  
  var DataManager = require('common:node_modules/glpb-we-pc/src/common/data-manager/data-manager');
  
  var ExchangeItemList = require('common:node_modules/glpb-we-pc/src/components/exchange-item-list/exchange-item-list');
  
  var LandingPageHeader = require('common:node_modules/glpb-we-pc/src/components/lp-header/lp-header');
  
  //const LandingPageRegisterBox = require('./components/lp-register-box/lp-register-box.js');
  
  //const LandingPageRegisterRow = require('./components/lp-register-row/lp-register-row.js');
  
  //U计划
  var UPlanItemList = require('common:node_modules/glpb-we-pc/src/components/uPlan-item-list/uPlan-item-list');
  //薪计划
  var SalaryItemList = require('common:node_modules/glpb-we-pc/src/components/salary-item-list/salary-item-list');
  
  var LPNewer = require('common:node_modules/glpb-we-pc/src/components/lp-register-newer/lp-register-newer');
  
  var LPTitle = require('common:node_modules/glpb-we-pc/src/components/lp-register-title/lp-register-title');
  
  var LPRegisterBox = require('common:node_modules/glpb-we-pc/src/components/lp-registration-box/lp-registration-box');
  
  var LPRegisterRow = require('common:node_modules/glpb-we-pc/src/components/lp-registration-row/lp-registration-row');
  
  var NewerBar = require('common:node_modules/glpb-we-pc/src/components/newer/newer');
  
  var UplanPremiumBar = require('common:node_modules/glpb-we-pc/src/components/uplan-premium/uplan-premium');
  
  var RRDLpFooter = require('common:node_modules/glpb-we-pc/src/components/rrd-lp-footer/rrd-lp-footer');
  
  var RRDLpUPlan = require('common:node_modules/glpb-we-pc/src/components/rrd-lp-u-plan/rrd-lp-u-plan');
  
  var RRDLpCompanyInfo = require('common:node_modules/glpb-we-pc/src/components/rrd-lp-company-info/rrd-lp-company-info');
  
  module.exports = {
      DataManager: DataManager,
      ExchangeItemList: ExchangeItemList,
      LandingPageHeader: LandingPageHeader,
      LPRegisterBox: LPRegisterBox,
      LPRegisterRow: LPRegisterRow,
      UPlanItemList: UPlanItemList,
      SalaryItemList: SalaryItemList,
      LPNewer: LPNewer,
      LPTitle: LPTitle,
      NewerBar: NewerBar,
      UplanPremiumBar: UplanPremiumBar,
      RRDLpFooter: RRDLpFooter,
      RRDLpUPlan: RRDLpUPlan,
      RRDLpCompanyInfo: RRDLpCompanyInfo
  };

});

;/*!/node_modules/react-paginate-ie8/node_modules/classnames/index.js*/
define('common:node_modules/react-paginate-ie8/node_modules/classnames/index', function(require, exports, module) {

  /*!
    Copyright (c) 2015 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  
  function classNames() {
  	var classes = '';
  	var arg;
  
  	for (var i = 0; i < arguments.length; i++) {
  		arg = arguments[i];
  		if (!arg) {
  			continue;
  		}
  
  		if ('string' === typeof arg || 'number' === typeof arg) {
  			classes += ' ' + arg;
  		} else if (Object.prototype.toString.call(arg) === '[object Array]') {
  			classes += ' ' + classNames.apply(null, arg);
  		} else if ('object' === typeof arg) {
  			for (var key in arg) {
  				if (!arg.hasOwnProperty(key) || !arg[key]) {
  					continue;
  				}
  				classes += ' ' + key;
  			}
  		}
  	}
  	return classes.substr(1);
  }
  
  // safely export classNames for node / browserify
  if (typeof module !== 'undefined' && module.exports) {
  	module.exports = classNames;
  }
  
  // safely export classNames for RequireJS
  if (typeof define !== 'undefined' && define.amd) {
  	define('classnames', [], function() {
  		return classNames;
  	});
  }
  

});

;/*!/node_modules/react/lib/ReactFragment.js*/
define('common:node_modules/react/lib/ReactFragment', function(require, exports, module) {

  /**
   * Copyright 2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactFragment
   */
  
  'use strict';
  
  var ReactChildren = require('common:node_modules/react/lib/ReactChildren');
  var ReactElement = require('common:node_modules/react/lib/ReactElement');
  
  var emptyFunction = require('common:node_modules/fbjs/lib/emptyFunction');
  var invariant = require('common:node_modules/fbjs/lib/invariant');
  var warning = require('common:node_modules/fbjs/lib/warning');
  
  /**
   * We used to allow keyed objects to serve as a collection of ReactElements,
   * or nested sets. This allowed us a way to explicitly key a set a fragment of
   * components. This is now being replaced with an opaque data structure.
   * The upgrade path is to call React.addons.createFragment({ key: value }) to
   * create a keyed fragment. The resulting data structure is an array.
   */
  
  var numericPropertyRegex = /^\d+$/;
  
  var warnedAboutNumeric = false;
  
  var ReactFragment = {
    // Wrap a keyed object in an opaque proxy that warns you if you access any
    // of its properties.
    create: function (object) {
      if (typeof object !== 'object' || !object || Array.isArray(object)) {
        'development' !== 'production' ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : undefined;
        return object;
      }
      if (ReactElement.isValidElement(object)) {
        'development' !== 'production' ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : undefined;
        return object;
      }
  
      !(object.nodeType !== 1) ? 'development' !== 'production' ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM ' + 'elements are not valid children of React components.') : invariant(false) : undefined;
  
      var result = [];
  
      for (var key in object) {
        if ('development' !== 'production') {
          if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
            'development' !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : undefined;
            warnedAboutNumeric = true;
          }
        }
        ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
      }
  
      return result;
    }
  };
  
  module.exports = ReactFragment;

});

;/*!/node_modules/react-addons-create-fragment/index.js*/
define('common:node_modules/react-addons-create-fragment/index', function(require, exports, module) {

  module.exports = require('common:node_modules/react/lib/ReactFragment').create;

});

;/*!/node_modules/react-paginate-ie8/dist/PageView.js*/
define('common:node_modules/react-paginate-ie8/dist/PageView', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var PageView = function (_React$Component) {
    _inherits(PageView, _React$Component);
  
    function PageView() {
      _classCallCheck(this, PageView);
  
      return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
  
    PageView.prototype.render = function render() {
      var linkClassName = this.props.pageLinkClassName;
      var cssClassName = this.props.pageClassName;
  
      if (this.props.selected) {
        if (typeof cssClassName !== 'undefined') {
          cssClassName = cssClassName + ' ' + this.props.activeClassName;
        } else {
          cssClassName = this.props.activeClassName;
        }
      }
  
      return _react2['default'].createElement(
        'li',
        { className: cssClassName },
        _react2['default'].createElement(
          'a',
          _extends({}, this.props, { className: linkClassName }),
          this.props.page
        )
      );
    };
  
    return PageView;
  }(_react2['default'].Component);
  
  exports['default'] = PageView;
  ;
  //# sourceMappingURL=/static/nm/react-paginate-ie8/dist/PageView.js.map

});

;/*!/node_modules/react-paginate-ie8/dist/BreakView.js*/
define('common:node_modules/react-paginate-ie8/dist/BreakView', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var BreakView = function (_React$Component) {
    _inherits(BreakView, _React$Component);
  
    function BreakView() {
      _classCallCheck(this, BreakView);
  
      return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
  
    BreakView.prototype.render = function render() {
      var label = this.props.breakLabel;
  
      return _react2['default'].createElement(
        'li',
        { className: 'break' },
        label
      );
    };
  
    return BreakView;
  }(_react2['default'].Component);
  
  exports['default'] = BreakView;
  ;
  //# sourceMappingURL=/static/nm/react-paginate-ie8/dist/BreakView.js.map

});

;/*!/node_modules/react-paginate-ie8/dist/PaginationBoxView.js*/
define('common:node_modules/react-paginate-ie8/dist/PaginationBoxView', function(require, exports, module) {

  'use strict';
  
  exports.__esModule = true;
  
  var _react = require('common:node_modules/react/react');
  
  var _react2 = _interopRequireDefault(_react);
  
  var _classnames = require('common:node_modules/react-paginate-ie8/node_modules/classnames/index');
  
  var _classnames2 = _interopRequireDefault(_classnames);
  
  var _reactAddonsCreateFragment = require('common:node_modules/react-addons-create-fragment/index');
  
  var _reactAddonsCreateFragment2 = _interopRequireDefault(_reactAddonsCreateFragment);
  
  var _PageView = require('common:node_modules/react-paginate-ie8/dist/PageView');
  
  var _PageView2 = _interopRequireDefault(_PageView);
  
  var _BreakView = require('common:node_modules/react-paginate-ie8/dist/BreakView');
  
  var _BreakView2 = _interopRequireDefault(_BreakView);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var PaginationBoxView = function (_Component) {
    _inherits(PaginationBoxView, _Component);
  
    function PaginationBoxView(props) {
      _classCallCheck(this, PaginationBoxView);
  
      var _this = _possibleConstructorReturn(this, _Component.call(this, props));
  
      _this.handlePreviousPage = function (evt) {
        evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
        if (_this.state.selected > 0) {
          _this.handlePageSelected(_this.state.selected - 1, evt);
        }
      };
  
      _this.handleNextPage = function (evt) {
        evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
        if (_this.state.selected < _this.props.pageNum - 1) {
          _this.handlePageSelected(_this.state.selected + 1, evt);
        }
      };
  
      _this.handlePageSelected = function (selected, evt) {
        evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
  
        if (_this.state.selected === selected) return;
  
        _this.setState({ selected: selected });
  
        // Call the callback with the new selected item:
        _this.callCallback(selected);
      };
  
      _this.callCallback = function (selectedItem) {
        if (typeof _this.props.clickCallback !== "undefined" && typeof _this.props.clickCallback === "function") {
          _this.props.clickCallback({ selected: selectedItem });
        }
      };
  
      _this.pagination = function () {
        var items = {};
  
        if (_this.props.pageNum <= _this.props.pageRangeDisplayed) {
  
          for (var index = 0; index < _this.props.pageNum; index++) {
            items['key' + index] = _react2['default'].createElement(_PageView2['default'], {
              onClick: _this.handlePageSelected.bind(null, index),
              selected: _this.state.selected === index,
              pageClassName: _this.props.pageClassName,
              pageLinkClassName: _this.props.pageLinkClassName,
              activeClassName: _this.props.activeClassName,
              page: index + 1 });
          }
        } else {
  
          var leftSide = _this.props.pageRangeDisplayed / 2;
          var rightSide = _this.props.pageRangeDisplayed - leftSide;
  
          if (_this.state.selected > _this.props.pageNum - _this.props.pageRangeDisplayed / 2) {
            rightSide = _this.props.pageNum - _this.state.selected;
            leftSide = _this.props.pageRangeDisplayed - rightSide;
          } else if (_this.state.selected < _this.props.pageRangeDisplayed / 2) {
            leftSide = _this.state.selected;
            rightSide = _this.props.pageRangeDisplayed - leftSide;
          }
  
          var _index = void 0;
          var page = void 0;
          var breakView = void 0;
  
          for (_index = 0; _index < _this.props.pageNum; _index++) {
  
            page = _index + 1;
  
            var pageView = _react2['default'].createElement(_PageView2['default'], {
              onClick: _this.handlePageSelected.bind(null, _index),
              selected: _this.state.selected === _index,
              pageClassName: _this.props.pageClassName,
              pageLinkClassName: _this.props.pageLinkClassName,
              activeClassName: _this.props.activeClassName,
              page: _index + 1 });
  
            if (page <= _this.props.marginPagesDisplayed) {
              items['key' + _index] = pageView;
              continue;
            }
  
            if (page > _this.props.pageNum - _this.props.marginPagesDisplayed) {
              items['key' + _index] = pageView;
              continue;
            }
  
            if (_index >= _this.state.selected - leftSide && _index <= _this.state.selected + rightSide) {
              items['key' + _index] = pageView;
              continue;
            }
  
            var keys = Object.keys(items);
            var breakLabelKey = keys[keys.length - 1];
            var breakLabelValue = items[breakLabelKey];
  
            if (_this.props.breakLabel && breakLabelValue !== breakView) {
              breakView = _react2['default'].createElement(_BreakView2['default'], { breakLabel: _this.props.breakLabel });
  
              items['key' + _index] = breakView;
            }
          }
        }
  
        return items;
      };
  
      _this.state = {
        selected: props.initialSelected ? props.initialSelected : props.forceSelected ? props.forceSelected : 0
      };
      return _this;
    }
  
    PaginationBoxView.prototype.componentDidMount = function componentDidMount() {
      // Call the callback with the initialSelected item:
      if (typeof this.props.initialSelected !== 'undefined') {
        this.callCallback(this.props.initialSelected);
      }
    };
  
    PaginationBoxView.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (typeof nextProps.forceSelected !== 'undefined' && this.props.forceSelected !== nextProps.forceSelected) {
        this.setState({ selected: nextProps.forceSelected });
      }
    };
  
    PaginationBoxView.prototype.render = function render() {
      var _classNames, _classNames2;
  
      var disabled = this.props.disabledClassName;
  
      var previousClasses = (0, _classnames2['default'])(this.props.previousClassName, (_classNames = {}, _classNames[disabled] = this.state.selected === 0, _classNames));
  
      var nextClasses = (0, _classnames2['default'])(this.props.nextClassName, (_classNames2 = {}, _classNames2[disabled] = this.state.selected === this.props.pageNum - 1, _classNames2));
  
      return _react2['default'].createElement(
        'ul',
        { className: this.props.containerClassName },
        _react2['default'].createElement(
          'li',
          { onClick: this.handlePreviousPage, className: previousClasses },
          _react2['default'].createElement(
            'a',
            { className: this.props.previousLinkClassName },
            this.props.previousLabel
          )
        ),
        (0, _reactAddonsCreateFragment2['default'])(this.pagination()),
        _react2['default'].createElement(
          'li',
          { onClick: this.handleNextPage, className: nextClasses },
          _react2['default'].createElement(
            'a',
            { className: this.props.nextLinkClassName },
            this.props.nextLabel
          )
        )
      );
    };
  
    return PaginationBoxView;
  }(_react.Component);
  
  PaginationBoxView.propTypes = {
    pageNum: _react.PropTypes.number.isRequired,
    pageRangeDisplayed: _react.PropTypes.number.isRequired,
    marginPagesDisplayed: _react.PropTypes.number.isRequired,
    previousLabel: _react.PropTypes.node,
    nextLabel: _react.PropTypes.node,
    breakLabel: _react.PropTypes.node,
    clickCallback: _react.PropTypes.func,
    initialSelected: _react.PropTypes.number,
    forceSelected: _react.PropTypes.number,
    containerClassName: _react.PropTypes.string,
    pageClassName: _react.PropTypes.string,
    pageLinkClassName: _react.PropTypes.string,
    activeClassName: _react.PropTypes.string,
    previousClassName: _react.PropTypes.string,
    nextClassName: _react.PropTypes.string,
    previousLinkClassName: _react.PropTypes.string,
    nextLinkClassName: _react.PropTypes.string,
    disabledClassName: _react.PropTypes.string
  };
  PaginationBoxView.defaultProps = {
    pageNum: 10,
    pageRangeDisplayed: 2,
    marginPagesDisplayed: 3,
    activeClassName: "selected",
    previousClassName: "previous",
    nextClassName: "next",
    previousLabel: "Previous",
    nextLabel: "Next",
    breakLabel: "...",
    disabledClassName: "disabled"
  };
  exports['default'] = PaginationBoxView;
  ;
  //# sourceMappingURL=/static/nm/react-paginate-ie8/dist/PaginationBoxView.js.map

});

;/*!/node_modules/react-paginate-ie8/dist/index.js*/
define('common:node_modules/react-paginate-ie8/dist/index', function(require, exports, module) {

  'use strict';
  
  var _PaginationBoxView = require('common:node_modules/react-paginate-ie8/dist/PaginationBoxView');
  
  var _PaginationBoxView2 = _interopRequireDefault(_PaginationBoxView);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  module.exports = _PaginationBoxView2['default'];
  //# sourceMappingURL=/static/nm/react-paginate-ie8/dist/index.js.map

});
